!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(S,e){"use strict";function g(e){return null!=e&&e===e.window}var t=[],o=Object.getPrototypeOf,a=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,i=t.indexOf,n={},s=n.toString,m=n.hasOwnProperty,r=m.toString,c=r.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},C=S.document,d={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var o,i,s=(n=n||C).createElement("script");if(s.text=e,t)for(o in d)(i=t[o]||t.getAttribute&&t.getAttribute(o))&&s.setAttribute(o,i);n.head.appendChild(s).parentNode.removeChild(s)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[s.call(e)]||"object":typeof e}var u="3.5.0",k=function(e,t){return new k.fn.init(e,t)};function p(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!b(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:u,constructor:k,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(n){return this.pushStack(k.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(k.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(k.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,n,o,i,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||b(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)o=e[t],"__proto__"!==t&&r!==o&&(c&&o&&(k.isPlainObject(o)||(i=Array.isArray(o)))?(n=r[t],s=i&&!Array.isArray(n)?[]:i||k.isPlainObject(n)?n:{},i=!1,r[t]=k.extend(c,s,o)):void 0!==o&&(r[t]=o));return r},k.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==s.call(e))&&(!(t=o(e))||"function"==typeof(n=m.call(t,"constructor")&&t.constructor)&&r.call(n)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,o=0;if(p(e))for(n=e.length;o<n&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?k.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,o=0,i=e.length;o<n;o++)e[i++]=t[o];return e.length=i,e},grep:function(e,t,n){for(var o=[],i=0,s=e.length,r=!n;i<s;i++)!t(e[i],i)!=r&&o.push(e[i]);return o},map:function(e,t,n){var o,i,s=0,r=[];if(p(e))for(o=e.length;s<o;s++)null!=(i=t(e[s],s,n))&&r.push(i);else for(s in e)null!=(i=t(e[s],s,n))&&r.push(i);return v(r)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var f=function(n){function u(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function i(){T()}var e,f,x,s,r,h,p,g,w,l,c,T,S,a,C,v,d,m,y,k="sizzle"+ +new Date,b=n.document,$=0,o=0,A=le(),P=le(),E=le(),L=le(),D=function(e,t){return e===t&&(c=!0),0},j={}.hasOwnProperty,t=[],H=t.pop,M=t.push,O=t.push,I=t.slice,q=function(e,t){for(var n=0,o=e.length;n<o;n++)if(e[n]===t)return n;return-1},N="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",z="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\["+z+"*("+F+")(?:"+z+"*([*^$|!~]?=)"+z+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+z+"*\\]",W=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",B=new RegExp(z+"+","g"),X=new RegExp("^"+z+"+|((?:^|[^\\\\])(?:\\\\.)*)"+z+"+$","g"),_=new RegExp("^"+z+"*,"+z+"*"),Y=new RegExp("^"+z+"*([>+~]|"+z+")"+z+"*"),U=new RegExp(z+"|>"),V=new RegExp(W),Q=new RegExp("^"+F+"$"),Z={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+z+"*(even|odd|(([+-]|)(\\d*)n|)"+z+"*(?:([+-]|)"+z+"*(\\d+)|))"+z+"*\\)|)","i"),bool:new RegExp("^(?:"+N+")$","i"),needsContext:new RegExp("^"+z+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+z+"*((?:-\\d)?\\d*)"+z+"*\\)|)(?=[^-]|$)","i")},G=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,oe=new RegExp("\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\([^\\r\\n\\f])","g"),ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,se=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=xe(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{O.apply(t=I.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){M.apply(e,I.call(t))}:function(e,t){for(var n=e.length,o=0;e[n++]=t[o++];);e.length=n-1}}}function ae(t,e,n,o){var i,s,r,a,l,c,d,u=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!o&&(T(e),e=e||S,C)){if(11!==p&&(l=te.exec(t)))if(i=l[1]){if(9===p){if(!(r=e.getElementById(i)))return n;if(r.id===i)return n.push(r),n}else if(u&&(r=u.getElementById(i))&&y(e,r)&&r.id===i)return n.push(r),n}else{if(l[2])return O.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(i)),n}if(f.qsa&&!L[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(d=t,u=e,1===p&&(U.test(t)||Y.test(t))){for((u=ne.test(t)&&me(e.parentNode)||e)===e&&f.scope||((a=e.getAttribute("id"))?a=a.replace(ie,se):e.setAttribute("id",a=k)),s=(c=h(t)).length;s--;)c[s]=(a?"#"+a:":scope")+" "+be(c[s]);d=c.join(",")}try{return O.apply(n,u.querySelectorAll(d)),n}catch(e){L(t,!0)}finally{a===k&&e.removeAttribute("id")}}}return g(t.replace(X,"$1"),e,n,o)}function le(){var n=[];function o(e,t){return n.push(e+" ")>x.cacheLength&&delete o[n.shift()],o[e+" "]=t}return o}function ce(e){return e[k]=!0,e}function de(e){var t=S.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),o=n.length;o--;)x.attrHandle[n[o]]=t}function pe(e,t){var n=t&&e,o=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(o)return o;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&re(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(r){return ce(function(s){return s=+s,ce(function(e,t){for(var n,o=r([],e.length,s),i=o.length;i--;)e[n=o[i]]&&(e[n]=!(t[n]=e[n]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=ae.support={},r=ae.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!G.test(t||n&&n.nodeName||"HTML")},T=ae.setDocument=function(e){var t,n,o=e?e.ownerDocument||e:b;return o!=S&&9===o.nodeType&&o.documentElement&&(a=(S=o).documentElement,C=!r(S),b!=S&&(n=S.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",i,!1):n.attachEvent&&n.attachEvent("onunload",i)),f.scope=de(function(e){return a.appendChild(e).appendChild(S.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=de(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=de(function(e){return e.appendChild(S.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=ee.test(S.getElementsByClassName),f.getById=de(function(e){return a.appendChild(e).id=k,!S.getElementsByName||!S.getElementsByName(k).length}),f.getById?(x.filter.ID=function(e){var t=e.replace(oe,u);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(oe,u);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var n,o,i,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(i=t.getElementsByName(e),o=0;s=i[o++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),x.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,o=[],i=0,s=t.getElementsByTagName(e);if("*"!==e)return s;for(;n=s[i++];)1===n.nodeType&&o.push(n);return o},x.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},d=[],v=[],(f.qsa=ee.test(S.querySelectorAll))&&(de(function(e){var t;a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+z+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+z+"*(?:value|"+N+")"),e.querySelectorAll("[id~="+k+"-]").length||v.push("~="),(t=S.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+z+"*name"+z+"*="+z+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")}),de(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=S.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+z+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(f.matchesSelector=ee.test(m=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&de(function(e){f.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),d.push("!=",W)}),v=v.length&&new RegExp(v.join("|")),d=d.length&&new RegExp(d.join("|")),t=ee.test(a.compareDocumentPosition),y=t||ee.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,o=t&&t.parentNode;return e===o||!(!o||1!==o.nodeType||!(n.contains?n.contains(o):e.compareDocumentPosition&&16&e.compareDocumentPosition(o)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==S||e.ownerDocument==b&&y(b,e)?-1:t==S||t.ownerDocument==b&&y(b,t)?1:l?q(l,e)-q(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,o=0,i=e.parentNode,s=t.parentNode,r=[e],a=[t];if(!i||!s)return e==S?-1:t==S?1:i?-1:s?1:l?q(l,e)-q(l,t):0;if(i===s)return pe(e,t);for(n=e;n=n.parentNode;)r.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;r[o]===a[o];)o++;return o?pe(r[o],a[o]):r[o]==b?-1:a[o]==b?1:0}),S},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(T(e),f.matchesSelector&&C&&!L[t+" "]&&(!d||!d.test(t))&&(!v||!v.test(t)))try{var n=m.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){L(t,!0)}return 0<ae(t,S,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!=S&&T(e),y(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=S&&T(e);var n=x.attrHandle[t.toLowerCase()],o=n&&j.call(x.attrHandle,t.toLowerCase())?n(e,t,!C):void 0;return void 0!==o?o:f.attributes||!C?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},ae.escape=function(e){return(e+"").replace(ie,se)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,n=[],o=0,i=0;if(c=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(D),c){for(;t=e[i++];)t===e[i]&&(o=n.push(i));for(;o--;)e.splice(n[o],1)}return l=null,e},s=ae.getText=function(e){var t,n="",o=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=s(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[o++];)n+=s(t);return n},(x=ae.selectors={cacheLength:50,createPseudo:ce,match:Z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(oe,u),e[3]=(e[3]||e[4]||e[5]||"").replace(oe,u),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(oe,u).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|"+z+")"+e+"("+z+"|$)"))&&A(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,o,i){return function(e){var t=ae.attr(e,n);return null==t?"!="===o:!o||(t+="","="===o?t===i:"!="===o?t!==i:"^="===o?i&&0===t.indexOf(i):"*="===o?i&&-1<t.indexOf(i):"$="===o?i&&t.slice(-i.length)===i:"~="===o?-1<(" "+t.replace(B," ")+" ").indexOf(i):"|="===o&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,v){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),b="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var o,i,s,r,a,l,c=m!=y?"nextSibling":"previousSibling",d=e.parentNode,u=b&&e.nodeName.toLowerCase(),p=!n&&!b,f=!1;if(d){if(m){for(;c;){for(r=e;r=r[c];)if(b?r.nodeName.toLowerCase()===u:1===r.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?d.firstChild:d.lastChild],y&&p){for(f=(a=(o=(i=(s=(r=d)[k]||(r[k]={}))[r.uniqueID]||(s[r.uniqueID]={}))[h]||[])[0]===$&&o[1])&&o[2],r=a&&d.childNodes[a];r=++a&&r&&r[c]||(f=a=0)||l.pop();)if(1===r.nodeType&&++f&&r===e){i[h]=[$,a,f];break}}else if(p&&(f=a=(o=(i=(s=(r=e)[k]||(r[k]={}))[r.uniqueID]||(s[r.uniqueID]={}))[h]||[])[0]===$&&o[1]),!1===f)for(;(r=++a&&r&&r[c]||(f=a=0)||l.pop())&&((b?r.nodeName.toLowerCase()!==u:1!==r.nodeType)||!++f||(p&&((i=(s=r[k]||(r[k]={}))[r.uniqueID]||(s[r.uniqueID]={}))[h]=[$,f]),r!==e)););return(f-=v)===g||f%g==0&&0<=f/g}}},PSEUDO:function(e,s){var t,r=x.pseudos[e]||x.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return r[k]?r(s):1<r.length?(t=[e,e,"",s],x.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var n,o=r(e,s),i=o.length;i--;)e[n=q(e,o[i])]=!(t[n]=o[i])}):function(e){return r(e,0,t)}):r}},pseudos:{not:ce(function(e){var o=[],i=[],a=p(e.replace(X,"$1"));return a[k]?ce(function(e,t,n,o){for(var i,s=a(e,null,o,[]),r=e.length;r--;)(i=s[r])&&(e[r]=!(t[r]=i))}):function(e,t,n){return o[0]=e,a(o,null,n,i),o[0]=null,!i.pop()}}),has:ce(function(t){return function(e){return 0<ae(t,e).length}}),contains:ce(function(t){return t=t.replace(oe,u),function(e){return-1<(e.textContent||s(e)).indexOf(t)}}),lang:ce(function(n){return Q.test(n||"")||ae.error("unsupported lang: "+n),n=n.replace(oe,u).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var o=n<0?n+t:t<n?t:n;0<=--o;)e.push(o);return e}),gt:ve(function(e,t,n){for(var o=n<0?n+t:n;++o<t;)e.push(o);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=fe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function ye(){}function be(e){for(var t=0,n=e.length,o="";t<n;t++)o+=e[t].value;return o}function xe(a,e,t){var l=e.dir,c=e.next,d=c||l,u=t&&"parentNode"===d,p=o++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||u)return a(e,t,n);return!1}:function(e,t,n){var o,i,s,r=[$,p];if(n){for(;e=e[l];)if((1===e.nodeType||u)&&a(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||u)if(i=(s=e[k]||(e[k]={}))[e.uniqueID]||(s[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((o=i[d])&&o[0]===$&&o[1]===p)return r[2]=o[2];if((i[d]=r)[2]=a(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){for(var o=i.length;o--;)if(!i[o](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,o,i){for(var s,r=[],a=0,l=e.length,c=null!=t;a<l;a++)(s=e[a])&&(n&&!n(s,o,i)||(r.push(s),c&&t.push(a)));return r}function Se(f,h,g,v,m,e){return v&&!v[k]&&(v=Se(v)),m&&!m[k]&&(m=Se(m,e)),ce(function(e,t,n,o){var i,s,r,a=[],l=[],c=t.length,d=e||function(e,t,n){for(var o=0,i=t.length;o<i;o++)ae(e,t[o],n);return n}(h||"*",n.nodeType?[n]:n,[]),u=!f||!e&&h?d:Te(d,a,f,n,o),p=g?m||(e?f:c||v)?[]:t:u;if(g&&g(u,p,n,o),v)for(i=Te(p,l),v(i,[],n,o),s=i.length;s--;)(r=i[s])&&(p[l[s]]=!(u[l[s]]=r));if(e){if(m||f){if(m){for(i=[],s=p.length;s--;)(r=p[s])&&i.push(u[s]=r);m(null,p=[],i,o)}for(s=p.length;s--;)(r=p[s])&&-1<(i=m?q(e,r):a[s])&&(e[i]=!(t[i]=r))}}else p=Te(p===t?p.splice(c,p.length):p),m?m(null,t,p,o):O.apply(t,p)})}function Ce(e){for(var i,t,n,o=e.length,s=x.relative[e[0].type],r=s||x.relative[" "],a=s?1:0,l=xe(function(e){return e===i},r,!0),c=xe(function(e){return-1<q(i,e)},r,!0),d=[function(e,t,n){var o=!s&&(n||t!==w)||((i=t).nodeType?l:c)(e,t,n);return i=null,o}];a<o;a++)if(t=x.relative[e[a].type])d=[xe(we(d),t)];else{if((t=x.filter[e[a].type].apply(null,e[a].matches))[k]){for(n=++a;n<o&&!x.relative[e[n].type];n++);return Se(1<a&&we(d),1<a&&be(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(X,"$1"),t,a<n&&Ce(e.slice(a,n)),n<o&&Ce(e=e.slice(n)),n<o&&be(e))}d.push(t)}return we(d)}function ke(v,m){function e(e,t,n,o,i){var s,r,a,l=0,c="0",d=e&&[],u=[],p=w,f=e||b&&x.find.TAG("*",i),h=$+=null==p?1:Math.random()||.1,g=f.length;for(i&&(w=t==S||t||i);c!==g&&null!=(s=f[c]);c++){if(b&&s){for(r=0,t||s.ownerDocument==S||(T(s),n=!C);a=v[r++];)if(a(s,t||S,n)){o.push(s);break}i&&($=h)}y&&((s=!a&&s)&&l--,e&&d.push(s))}if(l+=c,y&&c!==l){for(r=0;a=m[r++];)a(d,u,t,n);if(e){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=H.call(o));u=Te(u)}O.apply(o,u),i&&!e&&0<u.length&&1<l+m.length&&ae.uniqueSort(o)}return i&&($=h,w=p),d}var y=0<m.length,b=0<v.length;return y?ce(e):e}return ye.prototype=x.filters=x.pseudos,x.setFilters=new ye,h=ae.tokenize=function(e,t){var n,o,i,s,r,a,l,c=P[e+" "];if(c)return t?0:c.slice(0);for(r=e,a=[],l=x.preFilter;r;){for(s in n&&!(o=_.exec(r))||(o&&(r=r.slice(o[0].length)||r),a.push(i=[])),n=!1,(o=Y.exec(r))&&(n=o.shift(),i.push({value:n,type:o[0].replace(X," ")}),r=r.slice(n.length)),x.filter)!(o=Z[s].exec(r))||l[s]&&!(o=l[s](o))||(n=o.shift(),i.push({value:n,type:s,matches:o}),r=r.slice(n.length));if(!n)break}return t?r.length:r?ae.error(e):P(e,a).slice(0)},p=ae.compile=function(e,t){var n,o=[],i=[],s=E[e+" "];if(!s){for(n=(t=t||h(e)).length;n--;)(s=Ce(t[n]))[k]?o.push(s):i.push(s);(s=E(e,ke(i,o))).selector=e}return s},g=ae.select=function(e,t,n,o){var i,s,r,a,l,c="function"==typeof e&&e,d=!o&&h(e=c.selector||e);if(n=n||[],1===d.length){if(2<(s=d[0]=d[0].slice(0)).length&&"ID"===(r=s[0]).type&&9===t.nodeType&&C&&x.relative[s[1].type]){if(!(t=(x.find.ID(r.matches[0].replace(oe,u),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(i=Z.needsContext.test(e)?0:s.length;i--&&(r=s[i],!x.relative[a=r.type]);)if((l=x.find[a])&&(o=l(r.matches[0].replace(oe,u),ne.test(s[0].type)&&me(t.parentNode)||t))){if(s.splice(i,1),!(e=o.length&&be(s)))return O.apply(n,o),n;break}}return(c||p(e,d))(o,t,!C,n,!t||ne.test(e)&&me(t.parentNode)||t),n},f.sortStable=k.split("").sort(D).join("")===k,f.detectDuplicates=!!c,T(),f.sortDetached=de(function(e){return 1&e.compareDocumentPosition(S.createElement("fieldset"))}),de(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&de(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),de(function(e){return null==e.getAttribute("disabled")})||ue(N,function(e,t,n){var o;if(!n)return!0===e[t]?t.toLowerCase():(o=e.getAttributeNode(t))&&o.specified?o.value:null}),ae}(S);k.find=f,k.expr=f.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=f.uniqueSort,k.text=f.getText,k.isXMLDoc=f.isXML,k.contains=f.contains,k.escapeSelector=f.escape;function h(e,t,n){for(var o=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&k(e).is(n))break;o.push(e)}return o}function T(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var $=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function E(e,n,o){return b(n)?k.grep(e,function(e,t){return!!n.call(e,t,e)!==o}):n.nodeType?k.grep(e,function(e){return e===n!==o}):"string"!=typeof n?k.grep(e,function(e){return-1<i.call(n,e)!==o}):k.filter(n,e,o)}k.filter=function(e,t,n){var o=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===o.nodeType?k.find.matchesSelector(o,e)?[o]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,o=this.length,i=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<o;t++)if(k.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<o;t++)k.find(e,i[t],n);return 1<o?k.uniqueSort(n):n},filter:function(e){return this.pushStack(E(this,e||[],!1))},not:function(e){return this.pushStack(E(this,e||[],!0))},is:function(e){return!!E(this,"string"==typeof e&&$.test(e)?k(e):e||[],!1).length}});var L,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var o,i;if(!e)return this;if(n=n||L,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this);if(!(o="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:D.exec(e))||!o[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(o[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(o[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),P.test(o[1])&&k.isPlainObject(t))for(o in t)b(this[o])?this[o](t[o]):this.attr(o,t[o]);return this}return(i=C.getElementById(o[2]))&&(this[0]=i,this.length=1),this}).prototype=k.fn,L=k(C);var j=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,o=0,i=this.length,s=[],r="string"!=typeof e&&k(e);if(!$.test(e))for(;o<i;o++)for(n=this[o];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(r?-1<r.index(n):1===n.nodeType&&k.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(1<s.length?k.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?i.call(k(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,"parentNode")},parentsUntil:function(e,t,n){return h(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return h(e,"nextSibling")},prevAll:function(e){return h(e,"previousSibling")},nextUntil:function(e,t,n){return h(e,"nextSibling",n)},prevUntil:function(e,t,n){return h(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(o,i){k.fn[o]=function(e,t){var n=k.map(this,i,e);return"Until"!==o.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=k.filter(t,n)),1<this.length&&(H[o]||k.uniqueSort(n),j.test(o)&&n.reverse()),this.pushStack(n)}});var O=/[^\x20\t\r\n\f]+/g;function I(e){return e}function q(e){throw e}function N(e,t,n,o){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(o))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(o){var e,n;o="string"==typeof o?(e=o,n={},k.each(e.match(O)||[],function(e,t){n[t]=!0}),n):k.extend({},o);function i(){for(a=a||o.once,r=s=!0;c.length;d=-1)for(t=c.shift();++d<l.length;)!1===l[d].apply(t[0],t[1])&&o.stopOnFalse&&(d=l.length,t=!1);o.memory||(t=!1),s=!1,a&&(l=t?[]:"")}var s,t,r,a,l=[],c=[],d=-1,u={add:function(){return l&&(t&&!s&&(d=l.length-1,c.push(t)),function n(e){k.each(e,function(e,t){b(t)?o.unique&&u.has(t)||l.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!s&&i()),this},remove:function(){return k.each(arguments,function(e,t){for(var n;-1<(n=k.inArray(t,l,n));)l.splice(n,1),n<=d&&d--}),this},has:function(e){return e?-1<k.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=c=[],t||s||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),s||i()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},k.extend({Deferred:function(e){var s=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var i=arguments;return k.Deferred(function(o){k.each(s,function(e,t){var n=b(i[t[4]])&&i[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(o.notify).done(o.resolve).fail(o.reject):o[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,o){var l=0;function c(i,s,r,a){return function(){function e(){var e,t;if(!(i<l)){if((e=r.apply(n,o))===s.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?a?t.call(e,c(l,s,I,a),c(l,s,q,a)):(l++,t.call(e,c(l,s,I,a),c(l,s,q,a),c(l,s,I,s.notifyWith))):(r!==I&&(n=void 0,o=[e]),(a||s.resolveWith)(n,o))}}var n=this,o=arguments,t=a?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),l<=i+1&&(r!==q&&(n=void 0,o=[e]),s.rejectWith(n,o))}};i?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),S.setTimeout(t))}}return k.Deferred(function(e){s[0][3].add(c(0,e,b(o)?o:I,e.notifyWith)),s[1][3].add(c(0,e,b(t)?t:I)),s[2][3].add(c(0,e,b(n)?n:q))}).promise()},promise:function(e){return null!=e?k.extend(e,r):r}},a={};return k.each(s,function(e,t){var n=t[2],o=t[5];r[t[1]]=n.add,o&&n.add(function(){i=o},s[3-e][2].disable,s[3-e][3].disable,s[0][2].lock,s[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),r.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){i[t]=this,s[t]=1<arguments.length?a.call(arguments):e,--n||r.resolveWith(i,s)}}var n=arguments.length,o=n,i=Array(o),s=a.call(arguments),r=k.Deferred();if(n<=1&&(N(e,r.done(t(o)).resolve,r.reject,!n),"pending"===r.state()||b(s[o]&&s[o].then)))return r.then();for(;o--;)N(s[o],t(o),r.reject);return r.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){S.console&&S.console.warn&&e&&z.test(e.name)&&S.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){S.setTimeout(function(){throw e})};var F=k.Deferred();function R(){C.removeEventListener("DOMContentLoaded",R),S.removeEventListener("load",R),k.ready()}k.fn.ready=function(e){return F.then(e).catch(function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||F.resolveWith(C,[k])}}),k.ready.then=F.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?S.setTimeout(k.ready):(C.addEventListener("DOMContentLoaded",R),S.addEventListener("load",R));var W=function(e,t,n,o,i,s,r){var a=0,l=e.length,c=null==n;if("object"===w(n))for(a in i=!0,n)W(e,t,a,n[a],!0,s,r);else if(void 0!==o&&(i=!0,b(o)||(r=!0),c&&(t=r?(t.call(e,o),null):(c=t,function(e,t,n){return c.call(k(e),n)})),t))for(;a<l;a++)t(e[a],n,r?o:o.call(e[a],a,t(e[a],n)));return i?e:c?t.call(e):l?t(e[0],n):s},B=/^-ms-/,X=/-([a-z])/g;function _(e,t){return t.toUpperCase()}function Y(e){return e.replace(B,"ms-").replace(X,_)}function U(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function V(){this.expando=k.expando+V.uid++}V.uid=1,V.prototype={cache:function(e){var t=e[this.expando];return t||(t=Object.create(null),U(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var o,i=this.cache(e);if("string"==typeof t)i[Y(t)]=n;else for(o in t)i[Y(o)]=t[o];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,o=e[this.expando];if(void 0!==o){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in o?[t]:t.match(O)||[]).length;for(;n--;)delete o[t[n]]}void 0!==t&&!k.isEmptyObject(o)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Q=new V,Z=new V,G=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,K=/[A-Z]/g;function J(e,t,n){var o,i;if(void 0===n&&1===e.nodeType)if(o="data-"+t.replace(K,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(o))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:G.test(i)?JSON.parse(i):i)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),k.fn.extend({data:function(n,e){var t,o,i,s=this[0],r=s&&s.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){Z.set(this,n)}):W(this,function(e){var t;if(s&&void 0===e)return void 0!==(t=Z.get(s,n))||void 0!==(t=J(s,n))?t:void 0;this.each(function(){Z.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=Z.get(s),1===s.nodeType&&!Q.get(s,"hasDataAttrs"))){for(t=r.length;t--;)r[t]&&0===(o=r[t].name).indexOf("data-")&&(o=Y(o.slice(5)),J(s,o,i[o]));Q.set(s,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),k.extend({queue:function(e,t,n){var o;if(e)return t=(t||"fx")+"queue",o=Q.get(e,t),n&&(!o||Array.isArray(n)?o=Q.access(e,t,k.makeArray(n)):o.push(n)),o||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),o=n.length,i=n.shift(),s=k._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),o--),i&&("fx"===t&&n.unshift("inprogress"),delete s.stop,i.call(e,function(){k.dequeue(e,t)},s)),!o&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:k.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===n?this:this.each(function(){var e=k.queue(this,t,n);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||s.resolveWith(r,[r])}var o,i=1,s=k.Deferred(),r=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(o=Q.get(r[a],e+"queueHooks"))&&o.empty&&(i++,o.empty.add(n));return n(),s.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],oe=C.documentElement,ie=function(e){return k.contains(e.ownerDocument,e)},se={composed:!0};oe.getRootNode&&(ie=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var re=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ie(e)&&"none"===k.css(e,"display")};function ae(e,t,n,o){var i,s,r=20,a=o?function(){return o.cur()}:function(){return k.css(e,t,"")},l=a(),c=n&&n[3]||(k.cssNumber[t]?"":"px"),d=e.nodeType&&(k.cssNumber[t]||"px"!==c&&+l)&&te.exec(k.css(e,t));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;r--;)k.style(e,t,d+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),d/=s;d*=2,k.style(e,t,d+c),n=n||[]}return n&&(d=+d||+l||0,i=n[1]?d+(n[1]+1)*n[2]:+n[2],o&&(o.unit=c,o.start=d,o.end=i)),i}var le={};function ce(e,t){for(var n,o,i,s,r,a,l,c=[],d=0,u=e.length;d<u;d++)(o=e[d]).style&&(n=o.style.display,t?("none"===n&&(c[d]=Q.get(o,"display")||null,c[d]||(o.style.display="")),""===o.style.display&&re(o)&&(c[d]=(l=r=s=void 0,r=(i=o).ownerDocument,a=i.nodeName,(l=le[a])||(s=r.body.appendChild(r.createElement(a)),l=k.css(s,"display"),s.parentNode.removeChild(s),"none"===l&&(l="block"),le[a]=l)))):"none"!==n&&(c[d]="none",Q.set(o,"display",n)));for(d=0;d<u;d++)null!=c[d]&&(e[d].style.display=c[d]);return e}k.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){re(this)?k(this).show():k(this).hide()})}});var de,ue,pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;de=C.createDocumentFragment().appendChild(C.createElement("div")),(ue=C.createElement("input")).setAttribute("type","radio"),ue.setAttribute("checked","checked"),ue.setAttribute("name","t"),de.appendChild(ue),y.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue,de.innerHTML="<option></option>",y.option=!!de.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?k.merge([e],n):n}function me(e,t){for(var n=0,o=e.length;n<o;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,y.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,n,o,i){for(var s,r,a,l,c,d,u=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((s=e[f])||0===s)if("object"===w(s))k.merge(p,s.nodeType?[s]:s);else if(ye.test(s)){for(r=r||u.appendChild(t.createElement("div")),a=(fe.exec(s)||["",""])[1].toLowerCase(),l=ge[a]||ge._default,r.innerHTML=l[1]+k.htmlPrefilter(s)+l[2],d=l[0];d--;)r=r.lastChild;k.merge(p,r.childNodes),(r=u.firstChild).textContent=""}else p.push(t.createTextNode(s));for(u.textContent="",f=0;s=p[f++];)if(o&&-1<k.inArray(s,o))i&&i.push(s);else if(c=ie(s),r=ve(u.appendChild(s),"script"),c&&me(r),n)for(d=0;s=r[d++];)he.test(s.type||"")&&n.push(s);return u}var xe=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ce(){return!1}function ke(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function $e(e,t,n,o,i,s){var r,a;if("object"==typeof t){for(a in"string"!=typeof n&&(o=o||n,n=void 0),t)$e(e,a,n,o,t[a],s);return e}if(null==o&&null==i?(i=n,o=n=void 0):null==i&&("string"==typeof n?(i=o,o=void 0):(i=o,o=n,n=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===s&&(r=i,(i=function(e){return k().off(e),r.apply(this,arguments)}).guid=r.guid||(r.guid=k.guid++)),e.each(function(){k.event.add(this,t,i,o,n)})}function Ae(e,i,s){s?(Q.set(e,i,!1),k.event.add(e,i,{namespace:!1,handler:function(e){var t,n,o=Q.get(this,i);if(1&e.isTrigger&&this[i]){if(o.length)(k.event.special[i]||{}).delegateType&&e.stopPropagation();else if(o=a.call(arguments),Q.set(this,i,o),t=s(this,i),this[i](),o!==(n=Q.get(this,i))||t?Q.set(this,i,!1):n={},o!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else o.length&&(Q.set(this,i,{value:k.event.trigger(k.extend(o[0],k.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,i)&&k.event.add(e,i,Se)}k.event={global:{},add:function(t,e,n,o,i){var s,r,a,l,c,d,u,p,f,h,g,v=Q.get(t);if(U(t))for(n.handler&&(n=(s=n).handler,i=s.selector),i&&k.find.matchesSelector(oe,i),n.guid||(n.guid=k.guid++),(l=v.events)||(l=v.events=Object.create(null)),(r=v.handle)||(r=v.handle=function(e){return void 0!==k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(O)||[""]).length;c--;)f=g=(a=Te.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(u=k.event.special[f]||{},f=(i?u.delegateType:u.bindType)||f,u=k.event.special[f]||{},d=k.extend({type:f,origType:g,data:o,handler:n,guid:n.guid,selector:i,needsContext:i&&k.expr.match.needsContext.test(i),namespace:h.join(".")},s),(p=l[f])||((p=l[f]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,o,h,r)||t.addEventListener&&t.addEventListener(f,r)),u.add&&(u.add.call(t,d),d.handler.guid||(d.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,d):p.push(d),k.event.global[f]=!0)},remove:function(e,t,n,o,i){var s,r,a,l,c,d,u,p,f,h,g,v=Q.hasData(e)&&Q.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(O)||[""]).length;c--;)if(f=g=(a=Te.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(u=k.event.special[f]||{},p=l[f=(o?u.delegateType:u.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=p.length;s--;)d=p[s],!i&&g!==d.origType||n&&n.guid!==d.guid||a&&!a.test(d.namespace)||o&&o!==d.selector&&("**"!==o||!d.selector)||(p.splice(s,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));r&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,h,v.handle)||k.removeEvent(e,f,v.handle),delete l[f])}else for(f in l)k.event.remove(e,f+t[c],n,o,!0);k.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,o,i,s,r,a=new Array(arguments.length),l=k.event.fix(e),c=(Q.get(this,"events")||Object.create(null))[l.type]||[],d=k.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(r=k.event.handlers.call(this,l,c),t=0;(i=r[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(s=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==s.namespace&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,void 0!==(o=((k.event.special[s.origType]||{}).handle||s.handler).apply(i.elem,a))&&!1===(l.result=o)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,o,i,s,r,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(s=[],r={},n=0;n<l;n++)void 0===r[i=(o=t[n]).selector+" "]&&(r[i]=o.needsContext?-1<k(i,this).index(c):k.find(i,this,null,[c]).length),r[i]&&s.push(o);s.length&&a.push({elem:c,handlers:s})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click",Se),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Q.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return Ae(this,e,ke),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){k.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,o=e.handleObj;return n&&(n===this||k.contains(this,n))||(e.type=o.origType,t=o.handler.apply(this,arguments),e.type=i),t}}}),k.fn.extend({on:function(e,t,n,o){return $e(this,e,t,n,o)},one:function(e,t,n,o){return $e(this,e,t,n,o,1)},off:function(e,t,n){var o,i;if(e&&e.preventDefault&&e.handleObj)return o=e.handleObj,k(e.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){k.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i]);return this}});var Pe=/<script|<style|<link/i,Ee=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function je(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function He(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,o,i,s,r,a;if(1===t.nodeType){if(Q.hasData(e)&&(a=Q.get(e).events))for(i in Q.remove(t,"handle events"),a)for(n=0,o=a[i].length;n<o;n++)k.event.add(t,i,a[i][n]);Z.hasData(e)&&(s=Z.access(e),r=k.extend({},s),Z.set(t,r))}}function Oe(n,o,i,s){o=v(o);var e,t,r,a,l,c,d=0,u=n.length,p=u-1,f=o[0],h=b(f);if(h||1<u&&"string"==typeof f&&!y.checkClone&&Ee.test(f))return n.each(function(e){var t=n.eq(e);h&&(o[0]=f.call(this,e,t.html())),Oe(t,o,i,s)});if(u&&(t=(e=be(o,n[0].ownerDocument,!1,n,s)).firstChild,1===e.childNodes.length&&(e=t),t||s)){for(a=(r=k.map(ve(e,"script"),je)).length;d<u;d++)l=e,d!==p&&(l=k.clone(l,!0,!0),a&&k.merge(r,ve(l,"script"))),i.call(n[d],l,d);if(a)for(c=r[r.length-1].ownerDocument,k.map(r,He),d=0;d<a;d++)l=r[d],he.test(l.type||"")&&!Q.access(l,"globalEval")&&k.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?k._evalUrl&&!l.noModule&&k._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):x(l.textContent.replace(Le,""),l,c))}return n}function Ie(e,t,n){for(var o,i=t?k.filter(t,e):e,s=0;null!=(o=i[s]);s++)n||1!==o.nodeType||k.cleanData(ve(o)),o.parentNode&&(n&&ie(o)&&me(ve(o,"script")),o.parentNode.removeChild(o));return e}k.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var o,i,s,r,a,l,c,d=e.cloneNode(!0),u=ie(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(r=ve(d),o=0,i=(s=ve(e)).length;o<i;o++)a=s[o],l=r[o],"input"===(c=l.nodeName.toLowerCase())&&pe.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(s=s||ve(e),r=r||ve(d),o=0,i=s.length;o<i;o++)Me(s[o],r[o]);else Me(e,d);return 0<(r=ve(d,"script")).length&&me(r,!u&&ve(e,"script")),d},cleanData:function(e){for(var t,n,o,i=k.event.special,s=0;void 0!==(n=e[s]);s++)if(U(n)){if(t=n[Q.expando]){if(t.events)for(o in t.events)i[o]?k.event.remove(n,o):k.removeEvent(n,o,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return W(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Oe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)})},prepend:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=De(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return W(this,function(e){var t=this[0]||{},n=0,o=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!ge[(fe.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<o;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Oe(this,arguments,function(e){var t=this.parentNode;k.inArray(this,n)<0&&(k.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,r){k.fn[e]=function(e){for(var t,n=[],o=k(e),i=o.length-1,s=0;s<=i;s++)t=s===i?this:this.clone(!0),k(o[s])[r](t),l.apply(n,t.get());return this.pushStack(n)}});function qe(e,t,n){var o,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];for(i in o=n.call(e),t)e.style[i]=s[i];return o}var Ne,ze,Fe,Re,We,Be,Xe,_e,Ye=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ue=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=S),t.getComputedStyle(e)},Ve=new RegExp(ne.join("|"),"i");function Qe(){if(_e){Xe.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",_e.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(Xe).appendChild(_e);var e=S.getComputedStyle(_e);Ne="1%"!==e.top,Be=12===Ze(e.marginLeft),_e.style.right="60%",Re=36===Ze(e.right),ze=36===Ze(e.width),_e.style.position="absolute",Fe=12===Ze(_e.offsetWidth/3),oe.removeChild(Xe),_e=null}}function Ze(e){return Math.round(parseFloat(e))}function Ge(e,t,n){var o,i,s,r,a=e.style;return(n=n||Ue(e))&&(""!==(r=n.getPropertyValue(t)||n[t])||ie(e)||(r=k.style(e,t)),!y.pixelBoxStyles()&&Ye.test(r)&&Ve.test(t)&&(o=a.width,i=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=n.width,a.width=o,a.minWidth=i,a.maxWidth=s)),void 0!==r?r+"":r}function Ke(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Xe=C.createElement("div"),(_e=C.createElement("div")).style&&(_e.style.backgroundClip="content-box",_e.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===_e.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return Qe(),ze},pixelBoxStyles:function(){return Qe(),Re},pixelPosition:function(){return Qe(),Ne},reliableMarginLeft:function(){return Qe(),Be},scrollboxSize:function(){return Qe(),Fe},reliableTrDimensions:function(){var e,t,n,o;return null==We&&(e=C.createElement("table"),t=C.createElement("tr"),n=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",oe.appendChild(e).appendChild(t).appendChild(n),o=S.getComputedStyle(t),We=3<parseInt(o.height),oe.removeChild(e)),We}}));var Je=["Webkit","Moz","ms"],et=C.createElement("div").style,tt={};function nt(e){var t=k.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in et)return e}(e)||e)}var ot=/^(none|table(?!-c[ea]).+)/,it=/^--/,st={position:"absolute",visibility:"hidden",display:"block"},rt={letterSpacing:"0",fontWeight:"400"};function at(e,t,n){var o=te.exec(t);return o?Math.max(0,o[2]-(n||0))+(o[3]||"px"):t}function lt(e,t,n,o,i,s){var r="width"===t?1:0,a=0,l=0;if(n===(o?"border":"content"))return 0;for(;r<4;r+=2)"margin"===n&&(l+=k.css(e,n+ne[r],!0,i)),o?("content"===n&&(l-=k.css(e,"padding"+ne[r],!0,i)),"margin"!==n&&(l-=k.css(e,"border"+ne[r]+"Width",!0,i))):(l+=k.css(e,"padding"+ne[r],!0,i),"padding"!==n?l+=k.css(e,"border"+ne[r]+"Width",!0,i):a+=k.css(e,"border"+ne[r]+"Width",!0,i));return!o&&0<=s&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-a-.5))||0),l}function ct(e,t,n){var o=Ue(e),i=(!y.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,o),s=i,r=Ge(e,t,o),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ye.test(r)){if(!n)return r;r="auto"}return(!y.boxSizingReliable()&&i||!y.reliableTrDimensions()&&A(e,"tr")||"auto"===r||!parseFloat(r)&&"inline"===k.css(e,"display",!1,o))&&e.getClientRects().length&&(i="border-box"===k.css(e,"boxSizing",!1,o),(s=a in e)&&(r=e[a])),(r=parseFloat(r)||0)+lt(e,t,n||(i?"border":"content"),s,o,r)+"px"}function dt(e,t,n,o,i){return new dt.prototype.init(e,t,n,o,i)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ge(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,o){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,s,r,a=Y(t),l=it.test(t),c=e.style;if(l||(t=nt(a)),r=k.cssHooks[t]||k.cssHooks[a],void 0===n)return r&&"get"in r&&void 0!==(i=r.get(e,!1,o))?i:c[t];"string"===(s=typeof n)&&(i=te.exec(n))&&i[1]&&(n=ae(e,t,i),s="number"),null!=n&&n==n&&("number"!==s||l||(n+=i&&i[3]||(k.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),r&&"set"in r&&void 0===(n=r.set(e,n,o))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,o){var i,s,r,a=Y(t);return it.test(t)||(t=nt(a)),(r=k.cssHooks[t]||k.cssHooks[a])&&"get"in r&&(i=r.get(e,!0,n)),void 0===i&&(i=Ge(e,t,o)),"normal"===i&&t in rt&&(i=rt[t]),""===n||n?(s=parseFloat(i),!0===n||isFinite(s)?s||0:i):i}}),k.each(["height","width"],function(e,l){k.cssHooks[l]={get:function(e,t,n){if(t)return!ot.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,n):qe(e,st,function(){return ct(e,l,n)})},set:function(e,t,n){var o,i=Ue(e),s=!y.scrollboxSize()&&"absolute"===i.position,r=(s||n)&&"border-box"===k.css(e,"boxSizing",!1,i),a=n?lt(e,l,n,r,i):0;return r&&s&&(a-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(i[l])-lt(e,l,"border",!1,i)-.5)),a&&(o=te.exec(t))&&"px"!==(o[3]||"px")&&(e.style[l]=t,t=k.css(e,l)),at(0,t,a)}}}),k.cssHooks.marginLeft=Ke(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ge(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(i,s){k.cssHooks[i+s]={expand:function(e){for(var t=0,n={},o="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+ne[t]+s]=o[t]||o[t-2]||o[0];return n}},"margin"!==i&&(k.cssHooks[i+s].set=at)}),k.fn.extend({css:function(e,t){return W(this,function(e,t,n){var o,i,s={},r=0;if(Array.isArray(t)){for(o=Ue(e),i=t.length;r<i;r++)s[t[r]]=k.css(e,t[r],!1,o);return s}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,1<arguments.length)}}),(k.Tween=dt).prototype={constructor:dt,init:function(e,t,n,o,i,s){this.elem=e,this.prop=n,this.easing=i||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=o,this.unit=s||(k.cssNumber[n]?"":"px")},cur:function(){var e=dt.propHooks[this.prop];return e&&e.get?e.get(this):dt.propHooks._default.get(this)},run:function(e){var t,n=dt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):dt.propHooks._default.set(this),this}},dt.prototype.init.prototype=dt.prototype,dt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}},dt.propHooks.scrollTop=dt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=dt.prototype.init,k.fx.step={};var ut,pt,ft,ht,gt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function mt(){pt&&(!1===C.hidden&&S.requestAnimationFrame?S.requestAnimationFrame(mt):S.setTimeout(mt,k.fx.interval),k.fx.tick())}function yt(){return S.setTimeout(function(){ut=void 0}),ut=Date.now()}function bt(e,t){var n,o=0,i={height:e};for(t=t?1:0;o<4;o+=2-t)i["margin"+(n=ne[o])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function xt(e,t,n){for(var o,i=(wt.tweeners[t]||[]).concat(wt.tweeners["*"]),s=0,r=i.length;s<r;s++)if(o=i[s].call(n,t,e))return o}function wt(s,e,t){var n,r,o=0,i=wt.prefilters.length,a=k.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ut||yt(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),o=0,i=c.tweens.length;o<i;o++)c.tweens[o].run(n);return a.notifyWith(s,[c,n,t]),n<1&&i?t:(i||a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c]),!1)},c=a.promise({elem:s,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:ut||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=k.Tween(s,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(r)return this;for(r=!0;t<n;t++)c.tweens[t].run(1);return e?(a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c,e])):a.rejectWith(s,[c,e]),this}}),d=c.props;for(!function(e,t){var n,o,i,s,r;for(n in e)if(i=t[o=Y(n)],s=e[n],Array.isArray(s)&&(i=s[1],s=e[n]=s[0]),n!==o&&(e[o]=s,delete e[n]),(r=k.cssHooks[o])&&"expand"in r)for(n in s=r.expand(s),delete e[o],s)n in e||(e[n]=s[n],t[n]=i);else t[o]=i}(d,c.opts.specialEasing);o<i;o++)if(n=wt.prefilters[o].call(c,s,d,c.opts))return b(n.stop)&&(k._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return k.map(d,xt,c),b(c.opts.start)&&c.opts.start.call(s,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),k.fx.timer(k.extend(l,{elem:s,anim:c,queue:c.opts.queue})),c}k.Animation=k.extend(wt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ae(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,o=0,i=(e=b(e)?(t=e,["*"]):e.match(O)).length;o<i;o++)n=e[o],wt.tweeners[n]=wt.tweeners[n]||[],wt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var o,i,s,r,a,l,c,d,u="width"in t||"height"in t,p=this,f={},h=e.style,g=e.nodeType&&re(e),v=Q.get(e,"fxshow");for(o in n.queue||(null==(r=k._queueHooks(e,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,p.always(function(){p.always(function(){r.unqueued--,k.queue(e,"fx").length||r.empty.fire()})})),t)if(i=t[o],gt.test(i)){if(delete t[o],s=s||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[o])continue;g=!0}f[o]=v&&v[o]||k.style(e,o)}if((l=!k.isEmptyObject(t))||!k.isEmptyObject(f))for(o in u&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=Q.get(e,"display")),"none"===(d=k.css(e,"display"))&&(c?d=c:(ce([e],!0),c=e.style.display||c,d=k.css(e,"display"),ce([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===k.css(e,"float")&&(l||(p.done(function(){h.display=c}),null==c&&(d=h.display,c="none"===d?"":d)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,f)l||(v?"hidden"in v&&(g=v.hidden):v=Q.access(e,"fxshow",{display:c}),s&&(v.hidden=!g),g&&ce([e],!0),p.done(function(){for(o in g||ce([e]),Q.remove(e,"fxshow"),f)k.style(e,o,f[o])})),l=xt(g?v[o]:0,o,p),o in v||(v[o]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?wt.prefilters.unshift(e):wt.prefilters.push(e)}}),k.speed=function(e,t,n){var o=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return k.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in k.fx.speeds?o.duration=k.fx.speeds[o.duration]:o.duration=k.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){b(o.old)&&o.old.call(this),o.queue&&k.dequeue(this,o.queue)},o},k.fn.extend({fadeTo:function(e,t,n,o){return this.filter(re).css("opacity",0).show().end().animate({opacity:t},e,n,o)},animate:function(t,e,n,o){function i(){var e=wt(this,k.extend({},t),r);(s||Q.get(this,"finish"))&&e.stop(!0)}var s=k.isEmptyObject(t),r=k.speed(e,n,o);return i.finish=i,s||!1===r.queue?this.each(i):this.queue(r.queue,i)},stop:function(i,e,s){function r(e){var t=e.stop;delete e.stop,t(s)}return"string"!=typeof i&&(s=e,e=i,i=void 0),e&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=k.timers,o=Q.get(this);if(t)o[t]&&o[t].stop&&r(o[t]);else for(t in o)o[t]&&o[t].stop&&vt.test(t)&&r(o[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(s),e=!1,n.splice(t,1));!e&&s||k.dequeue(this,i)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var e,t=Q.get(this),n=t[r+"queue"],o=t[r+"queueHooks"],i=k.timers,s=n?n.length:0;for(t.finish=!0,k.queue(this,r,[]),o&&o.stop&&o.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===r&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<s;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,o){var i=k.fn[o];k.fn[o]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(bt(o,!0),e,t,n)}}),k.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,o){k.fn[e]=function(e,t,n){return this.animate(o,e,t,n)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(ut=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),ut=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){pt||(pt=!0,mt())},k.fx.stop=function(){pt=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(o,e){return o=k.fx&&k.fx.speeds[o]||o,e=e||"fx",this.queue(e,function(e,t){var n=S.setTimeout(e,o);t.stop=function(){S.clearTimeout(n)}})},ft=C.createElement("input"),ht=C.createElement("select").appendChild(C.createElement("option")),ft.type="checkbox",y.checkOn=""!==ft.value,y.optSelected=ht.selected,(ft=C.createElement("input")).value="t",ft.type="radio",y.radioValue="t"===ft.value;var Tt,St=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return W(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var o,i,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?k.prop(e,t,n):(1===s&&k.isXMLDoc(e)||(i=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?Tt:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):i&&"set"in i&&void 0!==(o=i.set(e,n,t))?o:(e.setAttribute(t,n+""),n):!(i&&"get"in i&&null!==(o=i.get(e,t)))&&null==(o=k.find.attr(e,t))?void 0:o)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,o=0,i=t&&t.match(O);if(i&&1===e.nodeType)for(;n=i[o++];)e.removeAttribute(n)}}),Tt={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var r=St[t]||k.find.attr;St[t]=function(e,t,n){var o,i,s=t.toLowerCase();return n||(i=St[s],St[s]=o,o=null!=r(e,t,n)?s:null,St[s]=i),o}});var Ct=/^(?:input|select|textarea|button)$/i,kt=/^(?:a|area)$/i;function $t(e){return(e.match(O)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function Pt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(O)||[]}k.fn.extend({prop:function(e,t){return W(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var o,i,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&k.isXMLDoc(e)||(t=k.propFix[t]||t,i=k.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(o=i.set(e,n,t))?o:e[t]=n:i&&"get"in i&&null!==(o=i.get(e,t))?o:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):Ct.test(e.nodeName)||kt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,o,i,s,r,a,l=0;if(b(t))return this.each(function(e){k(this).addClass(t.call(this,e,At(this)))});if((e=Pt(t)).length)for(;n=this[l++];)if(i=At(n),o=1===n.nodeType&&" "+$t(i)+" "){for(r=0;s=e[r++];)o.indexOf(" "+s+" ")<0&&(o+=s+" ");i!==(a=$t(o))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,o,i,s,r,a,l=0;if(b(t))return this.each(function(e){k(this).removeClass(t.call(this,e,At(this)))});if(!arguments.length)return this.attr("class","");if((e=Pt(t)).length)for(;n=this[l++];)if(i=At(n),o=1===n.nodeType&&" "+$t(i)+" "){for(r=0;s=e[r++];)for(;-1<o.indexOf(" "+s+" ");)o=o.replace(" "+s+" "," ");i!==(a=$t(o))&&n.setAttribute("class",a)}return this},toggleClass:function(i,t){var s=typeof i,r="string"==s||Array.isArray(i);return"boolean"==typeof t&&r?t?this.addClass(i):this.removeClass(i):b(i)?this.each(function(e){k(this).toggleClass(i.call(this,e,At(this),t),t)}):this.each(function(){var e,t,n,o;if(r)for(t=0,n=k(this),o=Pt(i);e=o[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==i&&"boolean"!=s||((e=At(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==i&&Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,o=0;for(t=" "+e+" ";n=this[o++];)if(1===n.nodeType&&-1<(" "+$t(At(n))+" ").indexOf(t))return!0;return!1}});var Et=/\r/g;k.fn.extend({val:function(n){var o,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,k(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(o=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in o&&void 0!==o.set(this,t,"value")||(this.value=t))})):t?(o=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in o&&void 0!==(e=o.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Et,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:$t(k.text(e))}},select:{get:function(e){var t,n,o,i=e.options,s=e.selectedIndex,r="select-one"===e.type,a=r?null:[],l=r?s+1:i.length;for(o=s<0?l:r?s:0;o<l;o++)if(((n=i[o]).selected||o===s)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=k(n).val(),r)return t;a.push(t)}return a},set:function(e,t){for(var n,o,i=e.options,s=k.makeArray(t),r=i.length;r--;)((o=i[r]).selected=-1<k.inArray(k.valHooks.option.get(o),s))&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in S;function Lt(e){e.stopPropagation()}var Dt=/^(?:focusinfocus|focusoutblur)$/;k.extend(k.event,{trigger:function(e,t,n,o){var i,s,r,a,l,c,d,u,p=[n||C],f=m.call(e,"type")?e.type:e,h=m.call(e,"namespace")?e.namespace.split("."):[];if(s=u=r=n=n||C,3!==n.nodeType&&8!==n.nodeType&&!Dt.test(f+k.event.triggered)&&(-1<f.indexOf(".")&&(f=(h=f.split(".")).shift(),h.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[k.expando]?e:new k.Event(f,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),d=k.event.special[f]||{},o||!d.trigger||!1!==d.trigger.apply(n,t))){if(!o&&!d.noBubble&&!g(n)){for(a=d.delegateType||f,Dt.test(a+f)||(s=s.parentNode);s;s=s.parentNode)p.push(s),r=s;r===(n.ownerDocument||C)&&p.push(r.defaultView||r.parentWindow||S)}for(i=0;(s=p[i++])&&!e.isPropagationStopped();)u=s,e.type=1<i?a:d.bindType||f,(c=(Q.get(s,"events")||Object.create(null))[e.type]&&Q.get(s,"handle"))&&c.apply(s,t),(c=l&&s[l])&&c.apply&&U(s)&&(e.result=c.apply(s,t),!1===e.result&&e.preventDefault());return e.type=f,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),t)||!U(n)||l&&b(n[f])&&!g(n)&&((r=n[l])&&(n[l]=null),k.event.triggered=f,e.isPropagationStopped()&&u.addEventListener(f,Lt),n[f](),e.isPropagationStopped()&&u.removeEventListener(f,Lt),k.event.triggered=void 0,r&&(n[l]=r)),e.result}},simulate:function(e,t,n){var o=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(o,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(n,o){function i(e){k.event.simulate(o,e.target,k.event.fix(e))}k.event.special[o]={setup:function(){var e=this.ownerDocument||this.document||this,t=Q.access(e,o);t||e.addEventListener(n,i,!0),Q.access(e,o,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Q.access(e,o)-1;t?Q.access(e,o,t):(e.removeEventListener(n,i,!0),Q.remove(e,o))}}});var jt=S.location,Ht={guid:Date.now()},Mt=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new S.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Ot=/\[\]$/,It=/\r?\n/g,qt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function zt(n,e,o,i){var t;if(Array.isArray(e))k.each(e,function(e,t){o||Ot.test(n)?i(n,t):zt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,o,i)});else if(o||"object"!==w(e))i(n,e);else for(t in e)zt(n+"["+t+"]",e[t],o,i)}k.param=function(e,t){function n(e,t){var n=b(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var o,i=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){n(this.name,this.value)});else for(o in e)zt(o,e[o],t,n);return i.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Nt.test(this.nodeName)&&!qt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace(It,"\r\n")}}):{name:t.name,value:n.replace(It,"\r\n")}}).get()}});var Ft=/%20/g,Rt=/#.*$/,Wt=/([?&])_=[^&]*/,Bt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Xt=/^(?:GET|HEAD)$/,_t=/^\/\//,Yt={},Ut={},Vt="*/".concat("*"),Qt=C.createElement("a");function Zt(s){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,o=0,i=e.toLowerCase().match(O)||[];if(b(t))for(;n=i[o++];)"+"===n[0]?(n=n.slice(1)||"*",(s[n]=s[n]||[]).unshift(t)):(s[n]=s[n]||[]).push(t)}}function Gt(t,i,s,r){var a={},l=t===Ut;function c(e){var o;return a[e]=!0,k.each(t[e]||[],function(e,t){var n=t(i,s,r);return"string"!=typeof n||l||a[n]?l?!(o=n):void 0:(i.dataTypes.unshift(n),c(n),!1)}),o}return c(i.dataTypes[0])||!a["*"]&&c("*")}function Kt(e,t){var n,o,i=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:o=o||{})[n]=t[n]);return o&&k.extend(!0,e,o),e}Qt.href=jt.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(jt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Kt(Kt(e,k.ajaxSettings),t):Kt(k.ajaxSettings,e)},ajaxPrefilter:Zt(Yt),ajaxTransport:Zt(Ut),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var d,u,p,n,f,o,h,g,i,s,v=k.ajaxSetup({},t),m=v.context||v,y=v.context&&(m.nodeType||m.jquery)?k(m):k.event,b=k.Deferred(),x=k.Callbacks("once memory"),w=v.statusCode||{},r={},a={},l="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n)for(n={};t=Bt.exec(p);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,r[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||l;return d&&d.abort(t),c(0,t),this}};if(b.promise(T),v.url=((e||v.url||jt.href)+"").replace(_t,jt.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(O)||[""],null==v.crossDomain){o=C.createElement("a");try{o.href=v.url,o.href=o.href,v.crossDomain=Qt.protocol+"//"+Qt.host!=o.protocol+"//"+o.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=k.param(v.data,v.traditional)),Gt(Yt,v,t,T),h)return T;for(i in(g=k.event&&v.global)&&0==k.active++&&k.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Xt.test(v.type),u=v.url.replace(Rt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Ft,"+")):(s=v.url.slice(u.length),v.data&&(v.processData||"string"==typeof v.data)&&(u+=(Mt.test(u)?"&":"?")+v.data,delete v.data),!1===v.cache&&(u=u.replace(Wt,"$1"),s=(Mt.test(u)?"&":"?")+"_="+Ht.guid+++s),v.url=u+s),v.ifModified&&(k.lastModified[u]&&T.setRequestHeader("If-Modified-Since",k.lastModified[u]),k.etag[u]&&T.setRequestHeader("If-None-Match",k.etag[u])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+Vt+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(m,T,v)||h))return T.abort();if(l="abort",x.add(v.complete),T.done(v.success),T.fail(v.error),d=Gt(Ut,v,t,T)){if(T.readyState=1,g&&y.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(f=S.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,d.send(r,c)}catch(e){if(h)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,n,o){var i,s,r,a,l,c=t;h||(h=!0,f&&S.clearTimeout(f),d=void 0,p=o||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var o,i,s,r,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=e.mimeType||t.getResponseHeader("Content-Type"));if(o)for(i in a)if(a[i]&&a[i].test(o)){l.unshift(i);break}if(l[0]in n)s=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){s=i;break}r=r||i}s=s||r}if(s)return s!==l[0]&&l.unshift(s),n[s]}(v,T,n)),!i&&-1<k.inArray("script",v.dataTypes)&&(v.converters["text script"]=function(){}),a=function(e,t,n,o){var i,s,r,a,l,c={},d=e.dataTypes.slice();if(d[1])for(r in e.converters)c[r.toLowerCase()]=e.converters[r];for(s=d.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&o&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(i in c)if((a=i.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[i]:!0!==c[i]&&(s=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&e.throws)t=r(t);else try{t=r(t)}catch(e){return{state:"parsererror",error:r?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}(v,a,T,i),i?(v.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(k.lastModified[u]=l),(l=T.getResponseHeader("etag"))&&(k.etag[u]=l)),204===e||"HEAD"===v.type?c="nocontent":304===e?c="notmodified":(c=a.state,s=a.data,i=!(r=a.error))):(r=c,!e&&c||(c="error",e<0&&(e=0))),T.status=e,T.statusText=(t||c)+"",i?b.resolveWith(m,[s,c,T]):b.rejectWith(m,[T,c,r]),T.statusCode(w),w=void 0,g&&y.trigger(i?"ajaxSuccess":"ajaxError",[T,v,i?s:r]),x.fireWith(m,[T,c]),g&&(y.trigger("ajaxComplete",[T,v]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,i){k[i]=function(e,t,n,o){return b(t)&&(o=o||n,n=t,t=void 0),k.ajax(k.extend({url:e,type:i,dataType:o,data:t,success:n},k.isPlainObject(e)&&e))}}),k.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),k._evalUrl=function(e,t,n){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t,n)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){k(this).wrapInner(n.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){k(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},en=k.ajaxSettings.xhr();y.cors=!!en&&"withCredentials"in en,y.ajax=en=!!en,k.ajaxTransport(function(i){var s,r;if(y.cors||en&&!i.crossDomain)return{send:function(e,t){var n,o=i.xhr();if(o.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)o[n]=i.xhrFields[n];for(n in i.mimeType&&o.overrideMimeType&&o.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)o.setRequestHeader(n,e[n]);s=function(e){return function(){s&&(s=r=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?t(0,"error"):t(o.status,o.statusText):t(Jt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=s(),r=o.onerror=o.ontimeout=s("error"),void 0!==o.onabort?o.onabort=r:o.onreadystatechange=function(){4===o.readyState&&S.setTimeout(function(){s&&r()})},s=s("abort");try{o.send(i.hasContent&&i.data||null)}catch(e){if(s)throw e}},abort:function(){s&&s()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(n){var o,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){o=k("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){o.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(o[0])},abort:function(){i&&i()}}});var tn,nn=[],on=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=nn.pop()||k.expando+"_"+Ht.guid++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,n){var o,i,s,r=!1!==e.jsonp&&(on.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&on.test(e.data)&&"data");if(r||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,r?e[r]=e[r].replace(on,"$1"+o):!1!==e.jsonp&&(e.url+=(Mt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||k.error(o+" was not called"),s[0]},e.dataTypes[0]="json",i=S[o],S[o]=function(){s=arguments},n.always(function(){void 0===i?k(S).removeProp(o):S[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,nn.push(o)),s&&b(i)&&i(s[0]),s=i=void 0}),"script"}),y.createHTMLDocument=((tn=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===tn.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((o=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(o)):t=C),s=!n&&[],(i=P.exec(e))?[t.createElement(i[1])]:(i=be([e],t,s),s&&s.length&&k(s).remove(),k.merge([],i.childNodes)));var o,i,s},k.fn.load=function(e,t,n){var o,i,s,r=this,a=e.indexOf(" ");return-1<a&&(o=$t(e.slice(a)),e=e.slice(0,a)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<r.length&&k.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){s=arguments,r.html(o?k("<div>").append(k.parseHTML(e)).find(o):e)}).always(n&&function(e,t){r.each(function(){n.apply(this,s||[e.responseText,t,e])})}),this},k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,n){var o,i,s,r,a,l,c=k.css(e,"position"),d=k(e),u={};"static"===c&&(e.style.position="relative"),a=d.offset(),s=k.css(e,"top"),l=k.css(e,"left"),i=("absolute"===c||"fixed"===c)&&-1<(s+l).indexOf("auto")?(r=(o=d.position()).top,o.left):(r=parseFloat(s)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,n,k.extend({},a))),null!=t.top&&(u.top=t.top-a.top+r),null!=t.left&&(u.left=t.left-a.left+i),"using"in t?t.using.call(e,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),d.css(u))}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,o=this[0];return o?o.getClientRects().length?(e=o.getBoundingClientRect(),n=o.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,o=this[0],i={top:0,left:0};if("fixed"===k.css(o,"position"))t=o.getBoundingClientRect();else{for(t=this.offset(),n=o.ownerDocument,e=o.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==o&&1===e.nodeType&&((i=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),i.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-k.css(o,"marginTop",!0),left:t.left-i.left-k.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||oe})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var s="pageYOffset"===i;k.fn[t]=function(e){return W(this,function(e,t,n){var o;if(g(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===n)return o?o[i]:e[t];o?o.scrollTo(s?o.pageXOffset:n,s?n:o.pageYOffset):e[t]=n},t,e,arguments.length)}}),k.each(["top","left"],function(e,n){k.cssHooks[n]=Ke(y.pixelPosition,function(e,t){if(t)return t=Ge(e,n),Ye.test(t)?k(e).position()[n]+"px":t})}),k.each({Height:"height",Width:"width"},function(r,a){k.each({padding:"inner"+r,content:a,"":"outer"+r},function(o,s){k.fn[s]=function(e,t){var n=arguments.length&&(o||"boolean"!=typeof e),i=o||(!0===e||!0===t?"margin":"border");return W(this,function(e,t,n){var o;return g(e)?0===s.indexOf("outer")?e["inner"+r]:e.document.documentElement["client"+r]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+r],o["scroll"+r],e.body["offset"+r],o["offset"+r],o["client"+r])):void 0===n?k.css(e,t,i):k.style(e,t,n,i)},a,n?e:void 0,n)}})}),k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,o){return this.on(t,e,n,o)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){k.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var sn=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;k.proxy=function(e,t){var n,o,i;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return o=a.call(arguments,2),(i=function(){return e.apply(t||this,o.concat(a.call(arguments)))}).guid=e.guid=e.guid||k.guid++,i},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=b,k.isWindow=g,k.camelCase=Y,k.type=w,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},k.trim=function(e){return null==e?"":(e+"").replace(sn,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var rn=S.jQuery,an=S.$;return k.noConflict=function(e){return S.$===k&&(S.$=an),e&&S.jQuery===k&&(S.jQuery=rn),k},void 0===e&&(S.jQuery=S.$=k),k}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(c){"use strict";var i,r=window.Slick||{};i=0,(r=function(e,t){var n,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(e),appendDots:c(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return c('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=c(e),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,n=c(e).data("slick")||{},o.options=c.extend({},o.defaults,t,n),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,void 0!==document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=c.proxy(o.autoPlay,o),o.autoPlayClear=c.proxy(o.autoPlayClear,o),o.autoPlayIterator=c.proxy(o.autoPlayIterator,o),o.changeSlide=c.proxy(o.changeSlide,o),o.clickHandler=c.proxy(o.clickHandler,o),o.selectHandler=c.proxy(o.selectHandler,o),o.setPosition=c.proxy(o.setPosition,o),o.swipeHandler=c.proxy(o.swipeHandler,o),o.dragHandler=c.proxy(o.dragHandler,o),o.keyHandler=c.proxy(o.keyHandler,o),o.instanceUid=i++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(e,t,n){var o=this;if("boolean"==typeof t)n=t,t=null;else if(t<0||t>=o.slideCount)return!1;o.unload(),"number"==typeof t?0===t&&0===o.$slides.length?c(e).appendTo(o.$slideTrack):n?c(e).insertBefore(o.$slides.eq(t)):c(e).insertAfter(o.$slides.eq(t)):!0===n?c(e).prependTo(o.$slideTrack):c(e).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each(function(e,t){c(t).attr("data-slick-index",e)}),o.$slidesCache=o.$slides,o.reinit()},r.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},r.prototype.animateSlide=function(e,t){var n={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(e=-e),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:e},o.options.speed,o.options.easing,t):o.$slideTrack.animate({top:e},o.options.speed,o.options.easing,t):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),c({animStart:o.currentLeft}).animate({animStart:e},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?n[o.animType]="translate("+e+"px, 0px)":n[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(n)},complete:function(){t&&t.call()}})):(o.applyTransition(),e=Math.ceil(e),!1===o.options.vertical?n[o.animType]="translate3d("+e+"px, 0px, 0px)":n[o.animType]="translate3d(0px,"+e+"px, 0px)",o.$slideTrack.css(n),t&&setTimeout(function(){o.disableTransition(),t.call()},o.options.speed))},r.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=c(e).not(this.$slider)),e},r.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var e=c(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},r.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},r.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},r.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=c(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=c(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var e,t,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),t=c("<ul />").addClass(n.options.dotsClass),e=0;e<=n.getDotCount();e+=1)t.append(c("<li />").append(n.options.customPaging.call(this,n,e)));n.$dots=t.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){c(t).attr("data-slick-index",e).data("originalStyling",c(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?c('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),c("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},r.prototype.buildRows=function(){var e,t,n,o,i,s,r,a=this;if(o=document.createDocumentFragment(),s=a.$slider.children(),0<a.options.rows){for(r=a.options.slidesPerRow*a.options.rows,i=Math.ceil(s.length/r),e=0;e<i;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var d=e*r+(t*a.options.slidesPerRow+n);s.get(d)&&c.appendChild(s.get(d))}l.appendChild(c)}o.appendChild(l)}a.$slider.empty().append(o),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(e,t){var n,o,i,s=this,r=!1,a=s.$slider.width(),l=window.innerWidth||c(window).width();if("window"===s.respondTo?i=l:"slider"===s.respondTo?i=a:"min"===s.respondTo&&(i=Math.min(l,a)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(n in o=null,s.breakpoints)s.breakpoints.hasOwnProperty(n)&&(!1===s.originalSettings.mobileFirst?i<s.breakpoints[n]&&(o=s.breakpoints[n]):i>s.breakpoints[n]&&(o=s.breakpoints[n]));null!==o?null!==s.activeBreakpoint&&o===s.activeBreakpoint&&!t||(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=c.extend({},s.originalSettings,s.breakpointSettings[o]),!0===e&&(s.currentSlide=s.options.initialSlide),s.refresh(e)),r=o):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===e&&(s.currentSlide=s.options.initialSlide),s.refresh(e),r=o),e||!1===r||s.$slider.trigger("breakpoint",[s,r])}},r.prototype.changeSlide=function(e,t){var n,o,i=this,s=c(e.currentTarget);switch(s.is("a")&&e.preventDefault(),s.is("li")||(s=s.closest("li")),n=i.slideCount%i.options.slidesToScroll!=0?0:(i.slideCount-i.currentSlide)%i.options.slidesToScroll,e.data.message){case"previous":o=0==n?i.options.slidesToScroll:i.options.slidesToShow-n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide-o,!1,t);break;case"next":o=0==n?i.options.slidesToScroll:n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide+o,!1,t);break;case"index":var r=0===e.data.index?0:e.data.index||s.index()*i.options.slidesToScroll;i.slideHandler(i.checkNavigable(r),!1,t),s.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(e){var t,n;if(n=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var o in t){if(e<t[o]){e=n;break}n=t[o]}return e},r.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(c("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",c.proxy(e.interrupt,e,!0)).off("mouseleave.slick",c.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),c(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().off("click.slick",e.selectHandler),c(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),c(window).off("resize.slick.slick-"+e.instanceUid,e.resize),c("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),c(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},r.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",c.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",c.proxy(e.interrupt,e,!1))},r.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},r.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},r.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),c(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},r.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(t):this.$slides.eq(e).css(t)},r.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout(function(){n.disableTransition(e),t.call()},n.options.speed))},r.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},r.prototype.focusHandler=function(){var n=this;n.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(e){e.stopImmediatePropagation();var t=c(this);setTimeout(function(){n.options.pauseOnFocus&&(n.focussed=t.is(":focus"),n.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var e=this,t=0,n=0,o=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++o;else for(;t<e.slideCount;)++o,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)o=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++o,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else o=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return o-1},r.prototype.getLeft=function(e){var t,n,o,i,s=this,r=0;return s.slideOffset=0,n=s.$slides.first().outerHeight(!0),!0===s.options.infinite?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,i=-1,!0===s.options.vertical&&!0===s.options.centerMode&&(2===s.options.slidesToShow?i=-1.5:1===s.options.slidesToShow&&(i=-2)),r=n*s.options.slidesToShow*i),s.slideCount%s.options.slidesToScroll!=0&&e+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(r=e>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(e-s.slideCount))*s.slideWidth*-1,(s.options.slidesToShow-(e-s.slideCount))*n*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,s.slideCount%s.options.slidesToScroll*n*-1))):e+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(e+s.options.slidesToShow-s.slideCount)*s.slideWidth,r=(e+s.options.slidesToShow-s.slideCount)*n),s.slideCount<=s.options.slidesToShow&&(r=s.slideOffset=0),!0===s.options.centerMode&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:!0===s.options.centerMode&&!0===s.options.infinite?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:!0===s.options.centerMode&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),t=!1===s.options.vertical?e*s.slideWidth*-1+s.slideOffset:e*n*-1+r,!0===s.options.variableWidth&&(o=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow),t=!0===s.options.rtl?o[0]?-1*(s.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,!0===s.options.centerMode&&(o=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow+1),t=!0===s.options.rtl?o[0]?-1*(s.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,t+=(s.$list.width()-o.outerWidth())/2)),t},r.prototype.getOption=r.prototype.slickGetOption=function(e){return this.options[e]},r.prototype.getNavigableIndexes=function(){var e,t=this,n=0,o=0,i=[];for(e=!1===t.options.infinite?t.slideCount:(n=-1*t.options.slidesToScroll,o=-1*t.options.slidesToScroll,2*t.slideCount);n<e;)i.push(n),n=o+t.options.slidesToScroll,o+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return i},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var n,o,i=this;return o=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0,!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each(function(e,t){if(t.offsetLeft-o+c(t).outerWidth()/2>-1*i.swipeLeft)return n=t,!1}),Math.abs(c(n).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},r.prototype.init=function(e){var t=this;c(t.$slider).hasClass("slick-initialized")||(c(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},r.prototype.initADA=function(){var o=this,n=Math.ceil(o.slideCount/o.options.slidesToShow),i=o.getNavigableIndexes().filter(function(e){return 0<=e&&e<o.slideCount});o.$slides.add(o.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==o.$dots&&(o.$slides.not(o.$slideTrack.find(".slick-cloned")).each(function(e){var t=i.indexOf(e);if(c(this).attr({role:"tabpanel",id:"slick-slide"+o.instanceUid+e,tabindex:-1}),-1!==t){var n="slick-slide-control"+o.instanceUid+t;c("#"+n).length&&c(this).attr({"aria-describedby":n})}}),o.$dots.attr("role","tablist").find("li").each(function(e){var t=i[e];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+o.instanceUid+e,"aria-controls":"slick-slide"+o.instanceUid+t,"aria-label":e+1+" of "+n,"aria-selected":null,tabindex:"-1"})}).eq(o.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=o.currentSlide,t=e+o.options.slidesToShow;e<t;e++)o.options.focusOnChange?o.$slides.eq(e).attr({tabindex:"0"}):o.$slides.eq(e).removeAttr("tabindex");o.activateADA()},r.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},r.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(c("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&c("li",e.$dots).on("mouseenter.slick",c.proxy(e.interrupt,e,!0)).on("mouseleave.slick",c.proxy(e.interrupt,e,!1))},r.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",c.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",c.proxy(e.interrupt,e,!1)))},r.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),c(document).on(e.visibilityChange,c.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),c(window).on("orientationchange.slick.slick-"+e.instanceUid,c.proxy(e.orientationChange,e)),c(window).on("resize.slick.slick-"+e.instanceUid,c.proxy(e.resize,e)),c("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),c(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),c(e.setPosition)},r.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},r.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){var e,t,n,s=this;function o(e){c("img[data-lazy]",e).each(function(){var e=c(this),t=c(this).attr("data-lazy"),n=c(this).attr("data-srcset"),o=c(this).attr("data-sizes")||s.$slider.attr("data-sizes"),i=document.createElement("img");i.onload=function(){e.animate({opacity:0},100,function(){n&&(e.attr("srcset",n),o&&e.attr("sizes",o)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,e,t])})},i.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,e,t])},i.src=t})}if(!0===s.options.centerMode?n=!0===s.options.infinite?(t=s.currentSlide+(s.options.slidesToShow/2+1))+s.options.slidesToShow+2:(t=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),s.options.slidesToShow/2+1+2+s.currentSlide):(t=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,n=Math.ceil(t+s.options.slidesToShow),!0===s.options.fade&&(0<t&&t--,n<=s.slideCount&&n++)),e=s.$slider.find(".slick-slide").slice(t,n),"anticipated"===s.options.lazyLoad)for(var i=t-1,r=n,a=s.$slider.find(".slick-slide"),l=0;l<s.options.slidesToScroll;l++)i<0&&(i=s.slideCount-1),e=(e=e.add(a.eq(i))).add(a.eq(r)),i--,r++;o(e),s.slideCount<=s.options.slidesToShow?o(s.$slider.find(".slick-slide")):s.currentSlide>=s.slideCount-s.options.slidesToShow?o(s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow)):0===s.currentSlide&&o(s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow))},r.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},r.prototype.postSlide=function(e){var t=this;t.unslicked||(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange&&c(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(e){e.preventDefault()},r.prototype.progressiveLazyLoad=function(e){e=e||1;var t,n,o,i,s,r=this,a=c("img[data-lazy]",r.$slider);a.length?(t=a.first(),n=t.attr("data-lazy"),o=t.attr("data-srcset"),i=t.attr("data-sizes")||r.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){o&&(t.attr("srcset",o),i&&t.attr("sizes",i)),t.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,t,n]),r.progressiveLazyLoad()},s.onerror=function(){e<3?setTimeout(function(){r.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,t,n]),r.progressiveLazyLoad())},s.src=n):r.$slider.trigger("allImagesLoaded",[r])},r.prototype.refresh=function(e){var t,n,o=this;n=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>n&&(o.currentSlide=n),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),t=o.currentSlide,o.destroy(!0),c.extend(o,o.initials,{currentSlide:t}),o.init(),e||o.changeSlide({data:{message:"index",index:t}},!1)},r.prototype.registerBreakpoints=function(){var e,t,n,o=this,i=o.options.responsive||null;if("array"===c.type(i)&&i.length){for(e in o.respondTo=o.options.respondTo||"window",i)if(n=o.breakpoints.length-1,i.hasOwnProperty(e)){for(t=i[e].breakpoint;0<=n;)o.breakpoints[n]&&o.breakpoints[n]===t&&o.breakpoints.splice(n,1),n--;o.breakpoints.push(t),o.breakpointSettings[t]=i[e].settings}o.breakpoints.sort(function(e,t){return o.options.mobileFirst?e-t:t-e})}},r.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},r.prototype.resize=function(){var e=this;c(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=c(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(e,t,n){var o=this;if(e="boolean"==typeof e?!0===(t=e)?0:o.slideCount-1:!0===t?--e:e,o.slideCount<1||e<0||e>o.slideCount-1)return!1;o.unload(),!0===n?o.$slideTrack.children().remove():o.$slideTrack.children(this.options.slide).eq(e).remove(),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slidesCache=o.$slides,o.reinit()},r.prototype.setCSS=function(e){var t,n,o=this,i={};!0===o.options.rtl&&(e=-e),t="left"==o.positionProp?Math.ceil(e)+"px":"0px",n="top"==o.positionProp?Math.ceil(e)+"px":"0px",i[o.positionProp]=e,!1===o.transformsEnabled||(!(i={})===o.cssTransitions?i[o.animType]="translate("+t+", "+n+")":i[o.animType]="translate3d("+t+", "+n+", 0px)"),o.$slideTrack.css(i)},r.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},r.prototype.setFade=function(){var n,o=this;o.$slides.each(function(e,t){n=o.slideWidth*e*-1,!0===o.options.rtl?c(t).css({position:"relative",right:n,top:0,zIndex:o.options.zIndex-2,opacity:0}):c(t).css({position:"relative",left:n,top:0,zIndex:o.options.zIndex-2,opacity:0})}),o.$slides.eq(o.currentSlide).css({zIndex:o.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},r.prototype.setOption=r.prototype.slickSetOption=function(){var e,t,n,o,i,s=this,r=!1;if("object"===c.type(arguments[0])?(n=arguments[0],r=arguments[1],i="multiple"):"string"===c.type(arguments[0])&&(o=arguments[1],r=arguments[2],"responsive"===(n=arguments[0])&&"array"===c.type(arguments[1])?i="responsive":void 0!==arguments[1]&&(i="single")),"single"===i)s.options[n]=o;else if("multiple"===i)c.each(n,function(e,t){s.options[e]=t});else if("responsive"===i)for(t in o)if("array"!==c.type(s.options.responsive))s.options.responsive=[o[t]];else{for(e=s.options.responsive.length-1;0<=e;)s.options.responsive[e].breakpoint===o[t].breakpoint&&s.options.responsive.splice(e,1),e--;s.options.responsive.push(o[t])}r&&(s.unload(),s.reinit())},r.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},r.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},r.prototype.setSlideClasses=function(e){var t,n,o,i,s=this;if(n=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(e).addClass("slick-current"),!0===s.options.centerMode){var r=s.options.slidesToShow%2==0?1:0;t=Math.floor(s.options.slidesToShow/2),!0===s.options.infinite&&(t<=e&&e<=s.slideCount-1-t?s.$slides.slice(e-t+r,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(o=s.options.slidesToShow+e,n.slice(o-t+1+r,o+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-s.options.slidesToShow).addClass("slick-center"):e===s.slideCount-1&&n.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=s.slideCount-s.options.slidesToShow?s.$slides.slice(e,e+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=s.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(i=s.slideCount%s.options.slidesToShow,o=!0===s.options.infinite?s.options.slidesToShow+e:e,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-e<s.options.slidesToShow?n.slice(o-(s.options.slidesToShow-i),o+i).addClass("slick-active").attr("aria-hidden","false"):n.slice(o,o+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},r.prototype.setupInfinite=function(){var e,t,n,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(t=null,o.slideCount>o.options.slidesToShow)){for(n=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,e=o.slideCount;e>o.slideCount-n;--e)t=e-1,c(o.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(e=0;e<n+o.slideCount;e+=1)t=e,c(o.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},r.prototype.selectHandler=function(e){var t=c(e.target).is(".slick-slide")?c(e.target):c(e.target).parents(".slick-slide"),n=parseInt(t.attr("data-slick-index"));n=n||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(n,!1,!0):this.slideHandler(n)},r.prototype.slideHandler=function(e,t,n){var o,i,s,r,a,l,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))if(!1===t&&c.asNavFor(e),o=e,a=c.getLeft(o),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(o=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(o)}):c.postSlide(o));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(o=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(o)}):c.postSlide(o));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),i=o<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+o:o>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:o-c.slideCount:o,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,i]),s=c.currentSlide,c.currentSlide=i,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==n?(c.fadeSlideOut(s),c.fadeSlide(i,function(){c.postSlide(i)})):c.postSlide(i),void c.animateHeight();!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,function(){c.postSlide(i)}):c.postSlide(i)}},r.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var e,t,n,o,i=this;return e=i.touchObject.startX-i.touchObject.curX,t=i.touchObject.startY-i.touchObject.curY,n=Math.atan2(t,e),(o=Math.round(180*n/Math.PI))<0&&(o=360-Math.abs(o)),o<=45&&0<=o||o<=360&&315<=o?!1===i.options.rtl?"left":"right":135<=o&&o<=225?!1===i.options.rtl?"right":"left":!0===i.options.verticalSwiping?35<=o&&o<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(e){var t,n,o=this;if(o.dragging=!1,o.swiping=!1,o.scrolling)return o.scrolling=!1;if(o.interrupted=!1,o.shouldClick=!(10<o.touchObject.swipeLength),void 0===o.touchObject.curX)return!1;if(!0===o.touchObject.edgeHit&&o.$slider.trigger("edge",[o,o.swipeDirection()]),o.touchObject.swipeLength>=o.touchObject.minSwipe){switch(n=o.swipeDirection()){case"left":case"down":t=o.options.swipeToSlide?o.checkNavigable(o.currentSlide+o.getSlideCount()):o.currentSlide+o.getSlideCount(),o.currentDirection=0;break;case"right":case"up":t=o.options.swipeToSlide?o.checkNavigable(o.currentSlide-o.getSlideCount()):o.currentSlide-o.getSlideCount(),o.currentDirection=1}"vertical"!=n&&(o.slideHandler(t),o.touchObject={},o.$slider.trigger("swipe",[o,n]))}else o.touchObject.startX!==o.touchObject.curX&&(o.slideHandler(o.currentSlide),o.touchObject={})},r.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},r.prototype.swipeMove=function(e){var t,n,o,i,s,r,a=this;return s=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:e.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<r?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),n=a.swipeDirection(),void 0!==e.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,e.preventDefault()),i=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(i=a.touchObject.curY>a.touchObject.startY?1:-1),o=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===n||a.currentSlide>=a.getDotCount()&&"left"===n)&&(o=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+o*i:a.swipeLeft=t+o*(a.$list.height()/a.listWidth)*i,!0===a.options.verticalSwiping&&(a.swipeLeft=t+o*i),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},r.prototype.swipeStart=function(e){var t,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return!(n.touchObject={});void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},r.prototype.unload=function(){var e=this;c(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},r.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){var e,t,n=this,o=arguments[0],i=Array.prototype.slice.call(arguments,1),s=n.length;for(e=0;e<s;e++)if("object"==typeof o||void 0===o?n[e].slick=new r(n[e],o):t=n[e].slick[o].apply(n[e].slick,i),void 0!==t)return t;return n}}),function(l,u,g,v){"use strict";if(l.console=l.console||{info:function(e){}},g)if(g.fn.fancybox)console.info("fancyBox already initialized");else{var e,t,n,o,i={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:g.noop,beforeLoad:g.noop,afterLoad:g.noop,beforeShow:g.noop,afterShow:g.noop,beforeClose:g.noop,afterClose:g.noop,onActivate:g.noop,onDeactivate:g.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},s=g(l),r=g(u),a=0,p=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},c=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},d=function(){var e,t=u.createElement("fakeelement"),n={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in n)if(t.style[e]!==v)return n[e];return"transitionend"}(),f=function(e){return e&&e.length&&e[0].offsetHeight},h=function(e,t){var n=g.extend(!0,{},e,t);return g.each(t,function(e,t){g.isArray(t)&&(n[e]=t)}),n},m=function(e,t,n){var o=this;o.opts=h({index:n},g.fancybox.defaults),g.isPlainObject(t)&&(o.opts=h(o.opts,t)),g.fancybox.isMobile&&(o.opts=h(o.opts,o.opts.mobile)),o.id=o.opts.id||++a,o.currIndex=parseInt(o.opts.index,10)||0,o.prevIndex=null,o.prevPos=null,o.currPos=0,o.firstRun=!0,o.group=[],o.slides={},o.addContent(e),o.group.length&&o.init()};g.extend(m.prototype,{init:function(){var t,n,o=this,i=o.group[o.currIndex].opts;i.closeExisting&&g.fancybox.close(!0),g("body").addClass("fancybox-active"),!g.fancybox.getInstance()&&!1!==i.hideScrollbar&&!g.fancybox.isMobile&&u.body.scrollHeight>l.innerHeight&&(g("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-u.documentElement.clientWidth)+"px;}</style>"),g("body").addClass("compensate-for-scrollbar")),n="",g.each(i.buttons,function(e,t){n+=i.btnTpl[t]||""}),t=g(o.translate(o,i.baseTpl.replace("{{buttons}}",n).replace("{{arrows}}",i.btnTpl.arrowLeft+i.btnTpl.arrowRight))).attr("id","fancybox-container-"+o.id).addClass(i.baseClass).data("FancyBox",o).appendTo(i.parentEl),o.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){o.$refs[e]=t.find(".fancybox-"+e)}),o.trigger("onInit"),o.activate(),o.jumpTo(o.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){return n[t]===v?e:n[t]})},addContent:function(e){var t,c=this,n=g.makeArray(e);g.each(n,function(e,t){var n,o,i,s,r,a={},l={};g.isPlainObject(t)?l=(a=t).opts||t:"object"===g.type(t)&&g(t).length?(l=(n=g(t)).data()||{},(l=g.extend(!0,{},l,l.options)).$orig=n,a.src=c.opts.src||l.src||n.attr("href"),a.type||a.src||(a.type="inline",a.src=t)):a={type:"html",src:t+""},a.opts=g.extend(!0,{},c.opts,l),g.isArray(l.buttons)&&(a.opts.buttons=l.buttons),g.fancybox.isMobile&&a.opts.mobile&&(a.opts=h(a.opts,a.opts.mobile)),o=a.type||a.opts.type,s=a.src||"",!o&&s&&((i=s.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(o="video",a.opts.video.format||(a.opts.video.format="video/"+("ogv"===i[1]?"ogg":i[1]))):s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?o="image":s.match(/\.(pdf)((\?|#).*)?$/i)?(o="iframe",a=g.extend(!0,a,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===s.charAt(0)&&(o="inline")),o?a.type=o:c.trigger("objectNeedsType",a),a.contentType||(a.contentType=-1<g.inArray(a.type,["html","inline","ajax"])?"html":a.type),a.index=c.group.length,"auto"==a.opts.smallBtn&&(a.opts.smallBtn=-1<g.inArray(a.type,["html","inline","ajax"])),"auto"===a.opts.toolbar&&(a.opts.toolbar=!a.opts.smallBtn),a.$thumb=a.opts.$thumb||null,a.opts.$trigger&&a.index===c.opts.index&&(a.$thumb=a.opts.$trigger.find("img:first"),a.$thumb.length&&(a.opts.$orig=a.opts.$trigger)),a.$thumb&&a.$thumb.length||!a.opts.$orig||(a.$thumb=a.opts.$orig.find("img:first")),a.$thumb&&!a.$thumb.length&&(a.$thumb=null),a.thumb=a.opts.thumb||(a.$thumb?a.$thumb[0].src:null),"function"===g.type(a.opts.caption)&&(a.opts.caption=a.opts.caption.apply(t,[c,a])),"function"===g.type(c.opts.caption)&&(a.opts.caption=c.opts.caption.apply(t,[c,a])),a.opts.caption instanceof g||(a.opts.caption=a.opts.caption===v?"":a.opts.caption+""),"ajax"===a.type&&1<(r=s.split(/\s+/,2)).length&&(a.src=r.shift(),a.opts.filter=r.shift()),a.opts.modal&&(a.opts=g.extend(!0,a.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),c.group.push(a)}),Object.keys(c.slides).length&&(c.updateControls(),(t=c.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var o=this;o.removeEvents(),o.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),o.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),o.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),o.next()}).on("click.fb","[data-fancybox-zoom]",function(e){o[o.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(o.requestId&&c(o.requestId),o.requestId=p(function(){o.update(e)})):(o.current&&"iframe"===o.current.type&&o.$refs.stage.hide(),setTimeout(function(){o.$refs.stage.show(),o.update(e)},g.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(e){var t=(g.fancybox?g.fancybox.getInstance():null).current,n=e.keyCode||e.which;if(9!=n){if(!(!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||g(e.target).is("input,textarea,video,audio,select")))return 8===n||27===n?(e.preventDefault(),void o.close(e)):37===n||38===n?(e.preventDefault(),void o.previous()):39===n||40===n?(e.preventDefault(),void o.next()):void o.trigger("afterKeydown",e,n)}else t.opts.trapFocus&&o.focus(e)}),o.group[o.currIndex].opts.idleTime&&(o.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){o.idleSecondsCounter=0,o.isIdle&&o.showControls(),o.isIdle=!1}),o.idleInterval=l.setInterval(function(){o.idleSecondsCounter++,o.idleSecondsCounter>=o.group[o.currIndex].opts.idleTime&&!o.isDragging&&(o.isIdle=!0,o.idleSecondsCounter=0,o.hideControls())},1e3))},removeEvents:function(){s.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,o){var t,n,i,s,r,a,l,c,d,u=this,p=u.group.length;if(!(u.isDragging||u.isClosing||u.isAnimating&&u.firstRun)){if(e=parseInt(e,10),!(i=u.current?u.current.opts.loop:u.opts.loop)&&(e<0||p<=e))return!1;if(t=u.firstRun=!Object.keys(u.slides).length,r=u.current,u.prevIndex=u.currIndex,u.prevPos=u.currPos,s=u.createSlide(e),1<p&&((i||s.index<p-1)&&u.createSlide(e+1),(i||0<s.index)&&u.createSlide(e-1)),u.current=s,u.currIndex=s.index,u.currPos=s.pos,u.trigger("beforeShow",t),u.updateControls(),s.forcedDuration=v,g.isNumeric(o)?s.forcedDuration=o:o=s.opts[t?"animationDuration":"transitionDuration"],o=parseInt(o,10),n=u.isMoved(s),s.$slide.addClass("fancybox-slide--current"),t)return s.opts.animationEffect&&o&&u.$refs.container.css("transition-duration",o+"ms"),u.$refs.container.addClass("fancybox-is-open").trigger("focus"),u.loadSlide(s),void u.preload("image");a=g.fancybox.getTranslate(r.$slide),l=g.fancybox.getTranslate(u.$refs.stage),g.each(u.slides,function(e,t){g.fancybox.stop(t.$slide,!0)}),r.pos!==s.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),n?(d=a.left-(r.pos*a.width+r.pos*r.opts.gutter),g.each(u.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var n=t.pos*a.width+t.pos*t.opts.gutter;g.fancybox.setTranslate(t.$slide,{top:0,left:n-l.left+d}),t.pos!==s.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>s.pos?"next":"previous")),f(t.$slide),g.fancybox.animate(t.$slide,{top:0,left:(t.pos-s.pos)*a.width+(t.pos-s.pos)*t.opts.gutter},o,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===u.currPos&&u.complete()})})):o&&s.opts.transitionEffect&&(c="fancybox-animated fancybox-fx-"+s.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>s.pos?"next":"previous")),g.fancybox.animate(r.$slide,c,o,function(){r.$slide.removeClass(c).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),s.isLoaded?u.revealContent(s):u.loadSlide(s),u.preload("image")}},createSlide:function(e){var t,n,o=this;return n=(n=e%o.group.length)<0?o.group.length+n:n,!o.slides[e]&&o.group[n]&&(t=g('<div class="fancybox-slide"></div>').appendTo(o.$refs.stage),o.slides[e]=g.extend(!0,{},o.group[n],{pos:e,$slide:t,isLoaded:!1}),o.updateSlide(o.slides[e])),o.slides[e]},scaleToActual:function(e,t,n){var o,i,s,r,a,l=this,c=l.current,d=c.$content,u=g.fancybox.getTranslate(c.$slide).width,p=g.fancybox.getTranslate(c.$slide).height,f=c.width,h=c.height;l.isAnimating||l.isMoved()||!d||"image"!=c.type||!c.isLoaded||c.hasError||(l.isAnimating=!0,g.fancybox.stop(d),e=e===v?.5*u:e,t=t===v?.5*p:t,(o=g.fancybox.getTranslate(d)).top-=g.fancybox.getTranslate(c.$slide).top,o.left-=g.fancybox.getTranslate(c.$slide).left,r=f/o.width,a=h/o.height,i=.5*u-.5*f,s=.5*p-.5*h,u<f&&(0<(i=o.left*r-(e*r-e))&&(i=0),i<u-f&&(i=u-f)),p<h&&(0<(s=o.top*a-(t*a-t))&&(s=0),s<p-h&&(s=p-h)),l.updateCursor(f,h),g.fancybox.animate(d,{top:s,left:i,scaleX:r,scaleY:a},n||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(e){var t,n=this,o=n.current,i=o.$content;n.isAnimating||n.isMoved()||!i||"image"!=o.type||!o.isLoaded||o.hasError||(n.isAnimating=!0,g.fancybox.stop(i),t=n.getFitPos(o),n.updateCursor(t.width,t.height),g.fancybox.animate(i,{top:t.top,left:t.left,scaleX:t.width/i.width(),scaleY:t.height/i.height()},e||366,function(){n.isAnimating=!1}))},getFitPos:function(e){var t,n,o,i,s=e.$content,r=e.$slide,a=e.width||e.opts.width,l=e.height||e.opts.height,c={};return!!(e.isLoaded&&s&&s.length)&&(t=g.fancybox.getTranslate(this.$refs.stage).width,n=g.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(r.css("paddingLeft"))+parseFloat(r.css("paddingRight"))+parseFloat(s.css("marginLeft"))+parseFloat(s.css("marginRight")),n-=parseFloat(r.css("paddingTop"))+parseFloat(r.css("paddingBottom"))+parseFloat(s.css("marginTop"))+parseFloat(s.css("marginBottom")),a&&l||(a=t,l=n),t-.5<(a*=o=Math.min(1,t/a,n/l))&&(a=t),n-.5<(l*=o)&&(l=n),"image"===e.type?(c.top=Math.floor(.5*(n-l))+parseFloat(r.css("paddingTop")),c.left=Math.floor(.5*(t-a))+parseFloat(r.css("paddingLeft"))):"video"===e.contentType&&(a/(i=e.opts.width&&e.opts.height?a/l:e.opts.ratio||16/9)<l?l=a/i:l*i<a&&(a=l*i)),c.width=a,c.height=l,c)},update:function(n){var o=this;g.each(o.slides,function(e,t){o.updateSlide(t,n)})},updateSlide:function(e,t){var n=this,o=e&&e.$content,i=e.width||e.opts.width,s=e.height||e.opts.height,r=e.$slide;n.adjustCaption(e),o&&(i||s||"video"===e.contentType)&&!e.hasError&&(g.fancybox.stop(o),g.fancybox.setTranslate(o,n.getFitPos(e)),e.pos===n.currPos&&(n.isAnimating=!1,n.updateCursor())),n.adjustLayout(e),r.length&&(r.trigger("refresh"),e.pos===n.currPos&&n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),n.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,n=t.current,o=n.$slide;!t.isClosing&&n&&(o.siblings().css({transform:"",opacity:""}),o.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),g.fancybox.animate(o,{top:0,left:0,opacity:1},e===v?0:e,function(){o.css({transform:"",opacity:""}),n.isComplete||t.complete()},!1))},isMoved:function(e){var t,n,o=e||this.current;return!!o&&(n=g.fancybox.getTranslate(this.$refs.stage),t=g.fancybox.getTranslate(o.$slide),!o.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(t.top-n.top)||.5<Math.abs(t.left-n.left)))},updateCursor:function(e,t){var n,o,i=this,s=i.current,r=i.$refs.container;s&&!i.isClosing&&i.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),o=!!(n=i.canPan(e,t))||i.isZoomable(),r.toggleClass("fancybox-is-zoomable",o),g("[data-fancybox-zoom]").prop("disabled",!o),n?r.addClass("fancybox-can-pan"):o&&("zoom"===s.opts.clickContent||g.isFunction(s.opts.clickContent)&&"zoom"==s.opts.clickContent(s))?r.addClass("fancybox-can-zoomIn"):s.opts.touch&&(s.opts.touch.vertical||1<i.group.length)&&"video"!==s.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var n=!1,o=this.current,i=o.$content;return e!==v&&t!==v?n=e<o.width&&t<o.height:i&&(n=(n=g.fancybox.getTranslate(i)).width<o.width&&n.height<o.height),n},canPan:function(e,t){var n=this.current,o=null,i=!1;return"image"===n.type&&(n.isComplete||e&&t)&&!n.hasError&&(i=this.getFitPos(n),e!==v&&t!==v?o={width:e,height:t}:n.isComplete&&(o=g.fancybox.getTranslate(n.$content)),o&&i&&(i=1.5<Math.abs(o.width-i.width)||1.5<Math.abs(o.height-i.height))),i},loadSlide:function(n){var e,t,o,i=this;if(!n.isLoading&&!n.isLoaded){if(!(n.isLoading=!0)===i.trigger("beforeLoad",n))return n.isLoading=!1;switch(e=n.type,(t=n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass),e){case"image":i.setImage(n);break;case"iframe":i.setIframe(n);break;case"html":i.setContent(n,n.src||n.content);break;case"video":i.setContent(n,n.opts.video.tpl.replace(/\{\{src\}\}/gi,n.src).replace("{{format}}",n.opts.videoFormat||n.opts.video.format||"").replace("{{poster}}",n.thumb||""));break;case"inline":g(n.src).length?i.setContent(n,g(n.src)):i.setError(n);break;case"ajax":i.showLoading(n),o=g.ajax(g.extend({},n.opts.ajax.settings,{url:n.src,success:function(e,t){"success"===t&&i.setContent(n,e)},error:function(e,t){e&&"abort"!==t&&i.setError(n)}})),t.one("onReset",function(){o.abort()});break;default:i.setError(n)}return!0}},setImage:function(t){var e,n=this;setTimeout(function(){var e=t.$image;n.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||n.showLoading(t)},50),n.checkSrcset(t),t.$content=g('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=u.createElement("img")).onerror=function(){g(this).remove(),t.$ghost=null},e.onload=function(){n.afterLoad(t)},t.$ghost=g(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),n.setBigImage(t)},checkSrcset:function(e){var t,n,o,i,s=e.opts.srcset||e.opts.image.srcset;if(s){o=l.devicePixelRatio||1,i=l.innerWidth*o,(n=s.split(",").map(function(e){var o={};return e.trim().split(/\s+/).forEach(function(e,t){var n=parseInt(e.substring(0,e.length-1),10);if(0===t)return o.url=e;n&&(o.value=n,o.postfix=e[e.length-1])}),o})).sort(function(e,t){return e.value-t.value});for(var r=0;r<n.length;r++){var a=n[r];if("w"===a.postfix&&a.value>=i||"x"===a.postfix&&a.value>=o){t=a;break}}!t&&n.length&&(t=n[n.length-1]),t&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=s)}},setBigImage:function(t){var n=this,e=u.createElement("img"),o=g(e);t.$image=o.one("error",function(){n.setError(t)}).one("load",function(){var e;t.$ghost||(n.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),n.afterLoad(t)),n.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<s.width()/s.height()?"100":Math.round(t.width/t.height*100))+"vw"),o.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!n.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),n.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&o.naturalWidth&&o.naturalHeight?o.trigger("load"):e.error&&o.trigger("error")},resolveImageSlideSize:function(e,t,n){var o=parseInt(e.opts.width,10),i=parseInt(e.opts.height,10);e.width=t,e.height=n,0<o&&(e.width=o,e.height=Math.floor(o*n/t)),0<i&&(e.width=Math.floor(i*t/n),e.height=i)},setIframe:function(i){var s,t=this,r=i.opts.iframe,a=i.$slide;i.$content=g('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(a),a.addClass("fancybox-slide--"+i.contentType),i.$iframe=s=g(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(i.$content),r.preload?(t.showLoading(i),s.on("load.fb error.fb",function(e){this.isReady=1,i.$slide.trigger("refresh"),t.afterLoad(i)}),a.on("refresh.fb",function(){var e,t=i.$content,n=r.css.width,o=r.css.height;if(1===s[0].isReady){try{e=s.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(a.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),n===v&&(n=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",n||"").css("max-width",""),o===v&&(o=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",o||""),a.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(i),s.attr("src",i.src),a.one("onReset",function(){try{g(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}g(this).off("refresh.fb").empty(),i.isLoaded=!1,i.isRevealed=!1})},setContent:function(e,t){var n;this.isClosing||(this.hideLoading(e),e.$content&&g.fancybox.stop(e.$content),e.$slide.empty(),(n=t)&&n.hasOwnProperty&&n instanceof g&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=g("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===g.type(t)&&(t=g("<div>").append(g.trim(t)).contents()),e.opts.filter&&(t=g("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){g(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(g(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),g(t).appendTo(e.$slide),g(t).is("video,audio")&&(g(t).addClass("fancybox-video"),g(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||g(t).attr("width"),e.opts.height=e.opts.height||g(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=g(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=g(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&g('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.adjustCaption(e),t.adjustLayout(e),e.pos===t.currPos&&t.updateCursor(),t.revealContent(e))},adjustCaption:function(e){var t,n=this,o=e||n.current,i=o.opts.caption,s=o.opts.preventCaptionOverlap,r=n.$refs.caption,a=!1;r.toggleClass("fancybox-caption--separate",s),s&&i&&i.length&&(o.pos!==n.currPos?((t=r.clone().appendTo(r.parent())).children().eq(0).empty().html(i),a=t.outerHeight(!0),t.empty().remove()):n.$caption&&(a=n.$caption.outerHeight(!0)),o.$slide.css("padding-bottom",a||""))},adjustLayout:function(e){var t,n,o,i,s=e||this.current;s.isLoaded&&!0!==s.opts.disableLayoutFix&&(s.$content.css("margin-bottom",""),s.$content.outerHeight()>s.$slide.height()+.5&&(o=s.$slide[0].style["padding-bottom"],i=s.$slide.css("padding-bottom"),0<parseFloat(i)&&(t=s.$slide[0].scrollHeight,s.$slide.css("padding-bottom",0),Math.abs(t-s.$slide[0].scrollHeight)<1&&(n=i),s.$slide.css("padding-bottom",o))),s.$content.css("margin-bottom",n))},revealContent:function(e){var t,n,o,i,s=this,r=e.$slide,a=!1,l=!1,c=s.isMoved(e),d=e.isRevealed;return e.isRevealed=!0,t=e.opts[s.firstRun?"animationEffect":"transitionEffect"],o=e.opts[s.firstRun?"animationDuration":"transitionDuration"],o=parseInt(e.forcedDuration===v?o:e.forcedDuration,10),!c&&e.pos===s.currPos&&o||(t=!1),"zoom"===t&&(e.pos===s.currPos&&o&&"image"===e.type&&!e.hasError&&(l=s.getThumbPos(e))?a=s.getFitPos(e):t="fade"),"zoom"===t?(s.isAnimating=!0,a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,"auto"==(i=e.opts.zoomOpacity)&&(i=.1<Math.abs(e.width/e.height-l.width/l.height)),i&&(l.opacity=.1,a.opacity=1),g.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),f(e.$content),void g.fancybox.animate(e.$content,a,o,function(){s.isAnimating=!1,s.complete()})):(s.updateSlide(e),t?(g.fancybox.stop(r),n="fancybox-slide--"+(e.pos>=s.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,r.addClass(n).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),f(r),"image"!==e.type&&e.$content.hide().show(0),void g.fancybox.animate(r,"fancybox-slide--current",o,function(){r.removeClass(n).css({transform:"",opacity:""}),e.pos===s.currPos&&s.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),d||!c||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),void(e.pos===s.currPos&&s.complete())))},getThumbPos:function(e){var t,n,o,i,s,r,a,l,c,d=e.$thumb;return!!(d&&(a=d[0])&&a.ownerDocument===u&&(g(".fancybox-container").css("pointer-events","none"),l={x:a.getBoundingClientRect().left+a.offsetWidth/2,y:a.getBoundingClientRect().top+a.offsetHeight/2},c=u.elementFromPoint(l.x,l.y)===a,g(".fancybox-container").css("pointer-events",""),c))&&(n=g.fancybox.getTranslate(d),o=parseFloat(d.css("border-top-width")||0),i=parseFloat(d.css("border-right-width")||0),s=parseFloat(d.css("border-bottom-width")||0),r=parseFloat(d.css("border-left-width")||0),t={top:n.top+o,left:n.left+r,width:n.width-i-r,height:n.height-o-s,scaleX:1,scaleY:1},0<n.width&&0<n.height&&t)},complete:function(){var e,n=this,t=n.current,o={};!n.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),n.preload("inline"),f(t.$slide),t.$slide.addClass("fancybox-slide--complete"),g.each(n.slides,function(e,t){t.pos>=n.currPos-1&&t.pos<=n.currPos+1?o[t.pos]=t:t&&(g.fancybox.stop(t.$slide),t.$slide.off().remove())}),n.slides=o),n.isAnimating=!1,n.updateCursor(),n.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),n.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):n.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,n,o=this;o.group.length<2||(n=o.slides[o.currPos+1],(t=o.slides[o.currPos-1])&&t.type===e&&o.loadSlide(t),n&&n.type===e&&o.loadSlide(n))},focus:function(e,t){var n,o,i=this,s=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");i.isClosing||((n=(n=!e&&i.current&&i.current.isComplete?i.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):i.$refs.container.find("*:visible")).filter(s).filter(function(){return"hidden"!==g(this).css("visibility")&&!g(this).hasClass("disabled")})).length?(o=n.index(u.activeElement),e&&e.shiftKey?(o<0||0==o)&&(e.preventDefault(),n.eq(n.length-1).trigger("focus")):(o<0||o==n.length-1)&&(e&&e.preventDefault(),n.eq(0).trigger("focus"))):i.$refs.container.trigger("focus"))},activate:function(){var t=this;g(".fancybox-container").each(function(){var e=g(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function n(){d.cleanUp(e)}var o,i,s,r,a,l,c,d=this,u=d.current;return!d.isClosing&&(!(d.isClosing=!0)===d.trigger("beforeClose",e)?(d.isClosing=!1,p(function(){d.update()}),!1):(d.removeEvents(),s=u.$content,o=u.opts.animationEffect,i=g.isNumeric(t)?t:o?u.opts.animationDuration:0,u.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?g.fancybox.stop(u.$slide):o=!1,u.$slide.siblings().trigger("onReset").remove(),i&&d.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",i+"ms"),d.hideLoading(u),d.hideControls(!0),d.updateCursor(),"zoom"!==o||s&&i&&"image"===u.type&&!d.isMoved()&&!u.hasError&&(c=d.getThumbPos(u))||(o="fade"),"zoom"===o?(g.fancybox.stop(s),l={top:(r=g.fancybox.getTranslate(s)).top,left:r.left,scaleX:r.width/c.width,scaleY:r.height/c.height,width:c.width,height:c.height},"auto"==(a=u.opts.zoomOpacity)&&(a=.1<Math.abs(u.width/u.height-c.width/c.height)),a&&(c.opacity=0),g.fancybox.setTranslate(s,l),f(s),g.fancybox.animate(s,c,i,n)):o&&i?g.fancybox.animate(u.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+o,i,n):!0===e?setTimeout(n,i):n(),!0))},cleanUp:function(e){var t,n,o,i=this,s=i.current.opts.$orig;i.current.$slide.trigger("onReset"),i.$refs.container.empty().remove(),i.trigger("afterClose",e),i.current.opts.backFocus&&(s&&s.length&&s.is(":visible")||(s=i.$trigger),s&&s.length&&(n=l.scrollX,o=l.scrollY,s.trigger("focus"),g("html, body").scrollTop(o).scrollLeft(n))),i.current=null,(t=g.fancybox.getInstance())?t.activate():(g("body").removeClass("fancybox-active compensate-for-scrollbar"),g("#fancybox-style-noscroll").remove())},trigger:function(e,t){var n,o=Array.prototype.slice.call(arguments,1),i=this,s=t&&t.opts?t:i.current;if(s?o.unshift(s):s=i,o.unshift(i),g.isFunction(s.opts[e])&&(n=s.opts[e].apply(s,o)),!1===n)return n;"afterClose"!==e&&i.$refs?i.$refs.container.trigger(e+".fb",o):r.trigger(e+".fb",o)},updateControls:function(){var e=this,t=e.current,n=t.index,o=e.$refs.container,i=e.$refs.caption,s=t.opts.caption;t.$slide.trigger("refresh"),s&&s.length?(e.$caption=i).children().eq(0).html(s):e.$caption=null,e.hasHiddenControls||e.isIdle||e.showControls(),o.find("[data-fancybox-count]").html(e.group.length),o.find("[data-fancybox-index]").html(n+1),o.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&n<=0),o.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&n>=e.group.length-1),"image"===t.type?o.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&o.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),g(u.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.hasHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<e.group.length)).toggleClass("fancybox-show-caption",!!e.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<e.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),g.fancybox={version:"3.5.7",defaults:i,getInstance:function(e){var t=g('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),n=Array.prototype.slice.call(arguments,1);return t instanceof m&&("string"===g.type(e)?t[e].apply(t,n):"function"===g.type(e)&&e.apply(t,n),t)},open:function(e,t,n){return new m(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(e=u.createElement("div"),l.getComputedStyle&&l.getComputedStyle(e)&&l.getComputedStyle(e).getPropertyValue("transform")&&!(u.documentMode&&u.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var n="",o={};if(e&&t)return t.left===v&&t.top===v||(n=(t.left===v?e.position().left:t.left)+"px, "+(t.top===v?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==v&&t.scaleY!==v?n+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==v&&(n+=" scaleX("+t.scaleX+")"),n.length&&(o.transform=n),t.opacity!==v&&(o.opacity=t.opacity),t.width!==v&&(o.width=t.width),t.height!==v&&(o.height=t.height),e.css(o)},animate:function(t,n,o,i,s){var r,a=this;g.isFunction(o)&&(i=o,o=null),a.stop(t),r=a.getTranslate(t),t.on(d,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(a.stop(t),g.isNumeric(o)&&t.css("transition-duration",""),g.isPlainObject(n)?n.scaleX!==v&&n.scaleY!==v&&a.setTranslate(t,{top:n.top,left:n.left,width:r.width*n.scaleX,height:r.height*n.scaleY,scaleX:1,scaleY:1}):!0!==s&&t.removeClass(n),g.isFunction(i)&&i(e))}),g.isNumeric(o)&&t.css("transition-duration",o+"ms"),g.isPlainObject(n)?(n.scaleX!==v&&n.scaleY!==v&&(delete n.width,delete n.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),g.fancybox.setTranslate(t,n)):t.addClass(n),t.data("timer",setTimeout(function(){t.trigger(d)},o+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(d),e.off(d).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},g.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?g("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},y):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},y),this},r.on("click.fb-start","[data-fancybox]",y),r.on("click.fb-start","[data-fancybox-trigger]",function(e){g('[data-fancybox="'+g(this).attr("data-fancybox-trigger")+'"]').eq(g(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:g(this)})}),t=".fancybox-button",n="fancybox-focus",o=null,r.on("mousedown mouseup focus blur",t,function(e){switch(e.type){case"mousedown":o=g(this);break;case"mouseup":o=null;break;case"focusin":g(t).removeClass(n),g(this).is(o)||g(this).is("[disabled]")||g(this).addClass(n);break;case"focusout":g(t).removeClass(n)}})}function y(e,t){var n,o,i,s=[],r=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},e&&e.data&&(t=h(e.data.options,t)),n=t.$target||g(e.currentTarget).trigger("blur"),(i=g.fancybox.getInstance())&&i.$trigger&&i.$trigger.is(n)||(s=t.selector?g(t.selector):(o=n.attr("data-fancybox")||"")?(s=e.data?e.data.items:[]).length?s.filter('[data-fancybox="'+o+'"]'):g('[data-fancybox="'+o+'"]'):[n],(r=g(s).index(n))<0&&(r=0),(i=g.fancybox.open(s,t,r)).$trigger=n))}}(window,document,jQuery),function(f){"use strict";function h(n,e,t){if(n)return t=t||"","object"===f.type(t)&&(t=f.param(t,!0)),f.each(e,function(e,t){n=n.replace("$"+e,t||"")}),t.length&&(n+=(0<n.indexOf("?")?"&":"?")+t),n}var o={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};f(document).on("objectNeedsType.fb",function(e,t,i){var n,s,r,a,l,c,d,u=i.src||"",p=!1;n=f.extend(!0,{},o,i.opts.media),f.each(n,function(e,t){if(r=u.match(t.matcher)){if(p=t.type,d=e,c={},t.paramPlace&&r[t.paramPlace]){"?"==(l=r[t.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var n=0;n<l.length;++n){var o=l[n].split("=",2);2==o.length&&(c[o[0]]=decodeURIComponent(o[1].replace(/\+/g," ")))}}return a=f.extend(!0,{},t.params,i.opts[e],c),u="function"===f.type(t.url)?t.url.call(this,r,a,i):h(t.url,r,a),s="function"===f.type(t.thumb)?t.thumb.call(this,r,a,i):h(t.thumb,r),"youtube"===e?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,n,o){return"&start="+((n?60*parseInt(n,10):0)+parseInt(o,10))}):"vimeo"===e&&(u=u.replace("&%23","#")),!1}}),p?(i.opts.thumb||i.opts.$thumb&&i.opts.$thumb.length||(i.opts.thumb=s),"iframe"===p&&(i.opts=f.extend(!0,i.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),f.extend(i,{type:p,src:u,origSrc:i.src,contentSource:d,contentType:"image"===p?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):u&&(i.type=i.opts.defaultType)});var i={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,n=this;this[e].loaded?setTimeout(function(){n.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){n[e].loaded=!0,n.done(e)}:t.onload=function(){n[e].loaded=!0,n.done(e)},document.body.appendChild(t))},done:function(e){var t,n;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=f.fancybox.getInstance())&&(n=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(n.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(n).on("ended",function(){t.next()}))}};f(document).on({"afterShow.fb":function(e,t,n){1<t.group.length&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&i.load(n.contentSource)}})}(jQuery),function(g,l,v){"use strict";function d(e){var t=[];for(var n in e=(e=e.originalEvent||e||g.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[n].pageX?t.push({x:e[n].pageX,y:e[n].pageY}):e[n].clientX&&t.push({x:e[n].clientX,y:e[n].clientY});return t}function m(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function c(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||v.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,n=e[0].attributes,o=n.length;t<o;t++)if("data-fancybox-"===n[t].nodeName.substr(0,14))return 1}function u(e){for(var t,n,o,i,s,r=!1;t=e.get(0),0,n=g.getComputedStyle(t)["overflow-y"],o=g.getComputedStyle(t)["overflow-x"],i=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,s=("scroll"===o||"auto"===o)&&t.scrollWidth>t.clientWidth,!(r=i||s)&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return r}function n(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",v.proxy(t,"ontouchstart"))}var y=g.requestAnimationFrame||g.webkitRequestAnimationFrame||g.mozRequestAnimationFrame||g.oRequestAnimationFrame||function(e){return g.setTimeout(e,1e3/60)},b=g.cancelAnimationFrame||g.webkitCancelAnimationFrame||g.mozCancelAnimationFrame||g.oCancelAnimationFrame||function(e){g.clearTimeout(e)};n.prototype.destroy=function(){var e=this;e.$container.off(".fb.touch"),v(l).off(".fb.touch"),e.requestId&&(b(e.requestId),e.requestId=null),e.tapped&&(clearTimeout(e.tapped),e.tapped=null)},n.prototype.ontouchstart=function(e){var t=this,n=v(e.target),o=t.instance,i=o.current,s=i.$slide,r=i.$content,a="touchstart"==e.type;if(a&&t.$container.off("mousedown.fb.touch"),(!e.originalEvent||2!=e.originalEvent.button)&&s.length&&n.length&&!c(n)&&!c(n.parent())&&(n.is("img")||!(e.originalEvent.clientX>n[0].clientWidth+n.offset().left))){if(!i||o.isAnimating||i.$slide.hasClass("fancybox-animated"))return e.stopPropagation(),void e.preventDefault();t.realPoints=t.startPoints=d(e),t.startPoints.length&&(i.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=n,t.$content=r,t.opts=i.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=o.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(s[0].clientWidth),t.canvasHeight=Math.round(s[0].clientHeight),t.contentLastPos=null,t.contentStartPos=v.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=v.fancybox.getTranslate(s),t.stagePos=v.fancybox.getTranslate(o.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,v(l).off(".fb.touch").on(a?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",v.proxy(t,"ontouchend")).on(a?"touchmove.fb.touch":"mousemove.fb.touch",v.proxy(t,"ontouchmove")),v.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(n.is(t.$stage)||t.$stage.find(n).length)||(n.is(".fancybox-image")&&e.preventDefault(),v.fancybox.isMobile&&n.parents(".fancybox-caption").length))&&(t.isScrollable=u(n)||u(n.parent()),v.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!i.hasError||(t.canPan?(v.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===i.type&&(i.isLoaded||i.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,v.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-v(g).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-v(g).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=m(t.startPoints[0],t.startPoints[1]))))}},n.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},n.prototype.ontouchmove=function(e){var t=this;void 0===e.originalEvent.buttons||0!==e.originalEvent.buttons?t.isScrolling?t.canTap=!1:(t.newPoints=d(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=m(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=m(t.newPoints[0],t.startPoints[0],"y"),t.distance=m(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))):t.ontouchend(e)},n.prototype.onSwipe=function(e){var t,i=this,s=i.instance,n=i.isSwiping,o=i.sliderStartPos.left||0;if(!0!==n)"x"==n&&(0<i.distanceX&&(i.instance.group.length<2||0===i.instance.current.index&&!i.instance.current.opts.loop)?o+=Math.pow(i.distanceX,.8):i.distanceX<0&&(i.instance.group.length<2||i.instance.current.index===i.instance.group.length-1&&!i.instance.current.opts.loop)?o-=Math.pow(-i.distanceX,.8):o+=i.distanceX),i.sliderLastPos={top:"x"==n?0:i.sliderStartPos.top+i.distanceY,left:o},i.requestId&&(b(i.requestId),i.requestId=null),i.requestId=y(function(){i.sliderLastPos&&(v.each(i.instance.slides,function(e,t){var n=t.pos-i.instance.currPos;v.fancybox.setTranslate(t.$slide,{top:i.sliderLastPos.top,left:i.sliderLastPos.left+n*i.canvasWidth+n*t.opts.gutter})}),i.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(i.distance)){if(i.canTap=!1,s.group.length<2&&i.opts.vertical?i.isSwiping="y":s.isDragging||!1===i.opts.vertical||"auto"===i.opts.vertical&&800<v(g).width()?i.isSwiping="x":(t=Math.abs(180*Math.atan2(i.distanceY,i.distanceX)/Math.PI),i.isSwiping=45<t&&t<135?"y":"x"),"y"===i.isSwiping&&v.fancybox.isMobile&&i.isScrollable)return void(i.isScrolling=!0);s.isDragging=i.isSwiping,i.startPoints=i.newPoints,v.each(s.slides,function(e,t){var n,o;v.fancybox.stop(t.$slide),n=v.fancybox.getTranslate(t.$slide),o=v.fancybox.getTranslate(s.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===s.current.pos&&(i.sliderStartPos.top=n.top-o.top,i.sliderStartPos.left=n.left-o.left),v.fancybox.setTranslate(t.$slide,{top:n.top-o.top,left:n.left-o.left})}),s.SlideShow&&s.SlideShow.isActive&&s.SlideShow.stop()}},n.prototype.onPan=function(){var e=this;m(e.newPoints[0],e.realPoints[0])<(v.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&b(e.requestId),e.requestId=y(function(){v.fancybox.setTranslate(e.$content,e.contentLastPos)}))},n.prototype.limitMovement=function(){var e,t,n,o,i,s,r=this,a=r.canvasWidth,l=r.canvasHeight,c=r.distanceX,d=r.distanceY,u=r.contentStartPos,p=u.left,f=u.top,h=u.width,g=u.height;return i=a<h?p+c:p,s=f+d,e=Math.max(0,.5*a-.5*h),t=Math.max(0,.5*l-.5*g),n=Math.min(a-h,.5*a-.5*h),o=Math.min(l-g,.5*l-.5*g),0<c&&e<i&&(i=e-1+Math.pow(-e+p+c,.8)||0),c<0&&i<n&&(i=n+1-Math.pow(n-p-c,.8)||0),0<d&&t<s&&(s=t-1+Math.pow(-t+f+d,.8)||0),d<0&&s<o&&(s=o+1-Math.pow(o-f-d,.8)||0),{top:s,left:i}},n.prototype.limitPosition=function(e,t,n,o){var i=this.canvasWidth,s=this.canvasHeight;return e=i<n?(e=0<e?0:e)<i-n?i-n:e:Math.max(0,i/2-n/2),{top:t=s<o?(t=0<t?0:t)<s-o?s-o:t:Math.max(0,s/2-o/2),left:e}},n.prototype.onZoom=function(){var e=this,t=e.contentStartPos,n=t.width,o=t.height,i=t.left,s=t.top,r=m(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,a=Math.floor(n*r),l=Math.floor(o*r),c=(n-a)*e.percentageOfImageAtPinchPointX,d=(o-l)*e.percentageOfImageAtPinchPointY,u=(e.newPoints[0].x+e.newPoints[1].x)/2-v(g).scrollLeft(),p=(e.newPoints[0].y+e.newPoints[1].y)/2-v(g).scrollTop(),f=u-e.centerPointStartX,h={top:s+(d+(p-e.centerPointStartY)),left:i+(c+f),scaleX:r,scaleY:r};e.canTap=!1,e.newWidth=a,e.newHeight=l,e.contentLastPos=h,e.requestId&&b(e.requestId),e.requestId=y(function(){v.fancybox.setTranslate(e.$content,e.contentLastPos)})},n.prototype.ontouchend=function(e){var t=this,n=t.isSwiping,o=t.isPanning,i=t.isZooming,s=t.isScrolling;if(t.endPoints=d(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),v(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(b(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,o?t.endPanning():i?t.endZooming():t.endSwiping(n,s)},n.prototype.endSwiping=function(e,t){var n=this,o=!1,i=n.instance.group.length,s=Math.abs(n.distanceX),r="x"==e&&1<i&&(130<n.dMs&&10<s||50<s);n.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(n.distanceY)?(v.fancybox.animate(n.instance.current.$slide,{top:n.sliderStartPos.top+n.distanceY+150*n.velocityY,opacity:0},200),o=n.instance.close(!0,250)):r&&0<n.distanceX?o=n.instance.previous(300):r&&n.distanceX<0&&(o=n.instance.next(300)),!1!==o||"x"!=e&&"y"!=e||n.instance.centerSlide(200),n.$container.removeClass("fancybox-is-sliding")},n.prototype.endPanning=function(){var e,t,n,o=this;o.contentLastPos&&(t=!1===o.opts.momentum||350<o.dMs?(e=o.contentLastPos.left,o.contentLastPos.top):(e=o.contentLastPos.left+500*o.velocityX,o.contentLastPos.top+500*o.velocityY),(n=o.limitPosition(e,t,o.contentStartPos.width,o.contentStartPos.height)).width=o.contentStartPos.width,n.height=o.contentStartPos.height,v.fancybox.animate(o.$content,n,366))},n.prototype.endZooming=function(){var e,t,n,o,i=this,s=i.instance.current,r=i.newWidth,a=i.newHeight;i.contentLastPos&&(e=i.contentLastPos.left,o={top:t=i.contentLastPos.top,left:e,width:r,height:a,scaleX:1,scaleY:1},v.fancybox.setTranslate(i.$content,o),r<i.canvasWidth&&a<i.canvasHeight?i.instance.scaleToFit(150):r>s.width||a>s.height?i.instance.scaleToActual(i.centerPointStartX,i.centerPointStartY,150):(n=i.limitPosition(e,t,r,a),v.fancybox.animate(i.$content,n,150)))},n.prototype.onTap=function(n){function e(e){var t=r.opts[e];if(v.isFunction(t)&&(t=t.apply(s,[r,n])),t)switch(t){case"close":s.close(o.startEvent);break;case"toggleControls":s.toggleControls();break;case"next":s.next();break;case"nextOrClose":1<s.group.length?s.next():s.close(o.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(l,c):s.group.length<2&&s.close(o.startEvent))}}var t,o=this,i=v(n.target),s=o.instance,r=s.current,a=n&&d(n)||o.startPoints,l=a[0]?a[0].x-v(g).scrollLeft()-o.stagePos.left:0,c=a[0]?a[0].y-v(g).scrollTop()-o.stagePos.top:0;if((!n.originalEvent||2!=n.originalEvent.button)&&(i.is("img")||!(l>i[0].clientWidth+i.offset().left))){if(i.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(i.is(".fancybox-slide"))t="Slide";else{if(!s.current.$content||!s.current.$content.find(i).addBack().filter(i).length)return;t="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,50<Math.abs(l-o.tapX)||50<Math.abs(c-o.tapY))return this;e("dblclick"+t)}else o.tapX=l,o.tapY=c,r.opts["dblclick"+t]&&r.opts["dblclick"+t]!==r.opts["click"+t]?o.tapped=setTimeout(function(){o.tapped=null,s.isAnimating||e("click"+t)},500):e("click"+t);return this}},v(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new n(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(r,a){"use strict";a.extend(!0,a.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function n(e){this.instance=e,this.init()}a.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,n=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!n?e.$button.hide():n.progress&&(e.$progress=a('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this,n=t.instance,o=n.current;o&&(!0===e||o.opts.loop||n.currIndex<n.group.length-1)?t.isActive&&"video"!==o.contentType&&(t.$progress&&a.fancybox.animate(t.$progress.show(),{scaleX:1},o.opts.slideShow.speed),t.timer=setTimeout(function(){n.current.opts.loop||n.current.index!=n.group.length-1?n.next():n.jumpTo(0)},o.opts.slideShow.speed)):(t.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this,t=e.instance.current;t&&(e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.isActive=!0,t.isComplete&&e.set(!0),e.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1,e.instance.trigger("onSlideShowChange",!1),e.$progress&&e.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),a(r).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,o){var i=t&&t.SlideShow;o?i&&n.opts.slideShow.autoStart&&i.start():i&&i.isActive&&i.clear()},"afterShow.fb":function(e,t,n){var o=t&&t.SlideShow;o&&o.isActive&&o.set()},"afterKeydown.fb":function(e,t,n,o,i){var s=t&&t.SlideShow;!s||!n.opts.slideShow||80!==i&&32!==i||a(r.activeElement).is("button,a,input")||(o.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),a(r).on("visibilitychange",function(){var e=a.fancybox.getInstance(),t=e&&e.SlideShow;t&&t.isActive&&(r.hidden?t.clear():t.set())})}(document,jQuery),function(s,n){"use strict";var o=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},n=0;n<e.length;n++){var o=e[n];if(o&&o[1]in s){for(var i=0;i<o.length;i++)t[e[0][i]]=o[i];return t}}return!1}();if(o){var i={request:function(e){(e=e||s.documentElement)[o.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){s[o.exitFullscreen]()},toggle:function(e){e=e||s.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(s[o.fullscreenElement])},enabled:function(){return Boolean(s[o.fullscreenEnabled])}};n.extend(!0,n.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),n(s).on(o.fullscreenchange,function(){var e=i.isFullscreen(),t=n.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.isAnimating=!1,t.update(!0,!0,0),t.isComplete||t.complete()),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})}n(s).on({"onInit.fb":function(e,t){o?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,n,o,i){t&&t.FullScreen&&70===i&&(o.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(e,s){"use strict";var r="fancybox-thumbs",a=r+"-active";s.fancybox.defaults=s.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},s.fancybox.defaults);function o(e){this.init(e)}s.extend(o.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,n=e.group,o=0;t.instance=e,t.opts=n[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var i=0,s=n.length;i<s&&(n[i].thumb&&o++,!(1<o));i++);1<o&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var n,e=this,t=e.instance,o=e.opts.parentEl,i=[];e.$grid||(e.$grid=s('<div class="'+r+" "+r+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(o).addBack().filter(o)),e.$grid.on("click","a",function(){t.jumpTo(s(this).attr("data-index"))})),e.$list||(e.$list=s('<div class="'+r+'__list">').appendTo(e.$grid)),s.each(t.group,function(e,t){(n=t.thumb)||"image"!==t.type||(n=t.src),i.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(n&&n.length?' style="background-image:url('+n+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=i.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,n,o=this,i=o.$list,s=o.$grid;o.instance.current&&(n=(t=i.children().removeClass(a).filter('[data-index="'+o.instance.current.index+'"]').addClass(a)).position(),"y"===o.opts.axis&&(n.top<0||n.top>i.height()-t.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},e):"x"===o.opts.axis&&(n.left<s.scrollLeft()||n.left>s.scrollLeft()+(s.width()-t.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),s(e).on({"onInit.fb":function(e,t){var n;t&&!t.Thumbs&&(n=new o(t)).isActive&&!0===n.opts.autoStart&&n.show()},"beforeShow.fb":function(e,t,n,o){var i=t&&t.Thumbs;i&&i.isVisible&&i.focus(o?0:250)},"afterKeydown.fb":function(e,t,n,o,i){var s=t&&t.Thumbs;s&&s.isActive&&71===i&&(o.preventDefault(),s.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,jQuery),function(e,s){"use strict";s.extend(!0,s.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),s(e).on("click","[data-fancybox-share]",function(){var e,t,n,o=s.fancybox.getInstance(),i=o.current||null;i&&("function"===s.type(i.opts.share.url)&&(e=i.opts.share.url.apply(i,[o,i])),t=i.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===i.type?encodeURIComponent(i.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return n[e]}))).replace(/\{\{descr\}\}/g,o.$caption?encodeURIComponent(o.$caption.text()):""),s.fancybox.open({src:o.translate(o,t),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){o.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(s,r,i){"use strict";function a(){var e=s.location.hash.substr(1),t=e.split("-"),n=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:n<1?1:n,gallery:t.join("-")}}function t(e){""!==e.gallery&&i("[data-fancybox='"+i.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function l(e){var t,n;return!!e&&(""!==(n=(t=e.current?e.current.opts:e.opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&n)}i.escapeSelector||(i.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),i(function(){!1!==i.fancybox.defaults.hash&&(i(r).on({"onInit.fb":function(e,t){var n,o;!1!==t.group[t.currIndex].opts.hash&&(n=a(),(o=l(t))&&n.gallery&&o==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(e,t,n,o){var i;n&&!1!==n.opts.hash&&(i=l(t))&&(t.currentHash=i+(1<t.group.length?"-"+(n.index+1):""),s.location.hash!=="#"+t.currentHash&&(o&&!t.origHash&&(t.origHash=s.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in s.history?(s.history[o?"pushState":"replaceState"]({},r.title,s.location.pathname+s.location.search+"#"+t.currentHash),o&&(t.hasCreatedHistory=!0)):s.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,n){n&&!1!==n.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?s.history.back():t.currentHash&&("replaceState"in s.history?s.history.replaceState({},r.title,s.location.pathname+s.location.search+(t.origHash||"")):s.location.hash=t.origHash),t.currentHash=null)}}),i(s).on("hashchange.fb",function(){var e=a(),o=null;i.each(i(".fancybox-container").get().reverse(),function(e,t){var n=i(t).data("FancyBox");if(n&&n.currentHash)return o=n,!1}),o?o.currentHash===e.gallery+"-"+e.index||1===e.index&&o.currentHash==e.gallery||(o.currentHash=null,o.close()):""!==e.gallery&&t(e)}),setTimeout(function(){i.fancybox.getInstance()||t(a())},50))})}(window,document,jQuery),function(e,t){"use strict";var i=(new Date).getTime();t(e).on({"onInit.fb":function(e,o,t){o.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=o.current,n=(new Date).getTime();o.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,n-i<250||(i=n,o[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
