!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";function m(e){return null!=e&&e===e.window}var t=[],i=Object.getPrototypeOf,o=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,a=t.indexOf,n={},r=n.toString,g=n.hasOwnProperty,s=g.toString,c=s.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},S=C.document,d={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var i,a,r=(n=n||S).createElement("script");if(r.text=e,t)for(i in d)(a=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,a);n.head.appendChild(r).parentNode.removeChild(r)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[r.call(e)]||"object":typeof e}var u="3.5.1",E=function(e,t){return new E.fn.init(e,t)};function p(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!b(e)&&!m(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:u,constructor:E,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,i,a,r,s=arguments[0]||{},o=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[o]||{},o++),"object"==typeof s||b(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(c&&i&&(E.isPlainObject(i)||(a=Array.isArray(i)))?(n=s[t],r=a&&!Array.isArray(n)?[]:a||E.isPlainObject(n)?n:{},a=!1,s[t]=E.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},E.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==r.call(e))&&(!(t=i(e))||"function"==typeof(n=g.call(t,"constructor")&&t.constructor)&&s.call(n)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(p(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?E.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:a.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,a=e.length;i<n;i++)e[a++]=t[i];return e.length=a,e},grep:function(e,t,n){for(var i=[],a=0,r=e.length,s=!n;a<r;a++)!t(e[a],a)!=s&&i.push(e[a]);return i},map:function(e,t,n){var i,a,r=0,s=[];if(p(e))for(i=e.length;r<i;r++)null!=(a=t(e[r],r,n))&&s.push(a);else for(r in e)null!=(a=t(e[r],r,n))&&s.push(a);return v(s)},guid:1,support:y}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var f=function(n){function u(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function a(){T()}var e,f,x,r,s,h,p,m,w,l,c,T,C,o,S,v,d,g,y,E="sizzle"+ +new Date,b=n.document,M=0,i=0,k=le(),P=le(),$=le(),L=le(),A=function(e,t){return e===t&&(c=!0),0},z={}.hasOwnProperty,t=[],D=t.pop,I=t.push,O=t.push,N=t.slice,H=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\["+q+"*("+F+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+q+"*\\]",B=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",X=new RegExp(q+"+","g"),W=new RegExp("^"+q+"+|((?:^|[^\\\\])(?:\\\\.)*)"+q+"+$","g"),Y=new RegExp("^"+q+"*,"+q+"*"),_=new RegExp("^"+q+"*([>+~]|"+q+")"+q+"*"),G=new RegExp(q+"|>"),V=new RegExp(B),U=new RegExp("^"+F+"$"),K={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+q+"*(even|odd|(([+-]|)(\\d*)n|)"+q+"*(?:([+-]|)"+q+"*(\\d+)|))"+q+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+q+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+q+"*((?:-\\d)?\\d*)"+q+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,ie=new RegExp("\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\([^\\r\\n\\f])","g"),ae=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=xe(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{O.apply(t=N.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){I.apply(e,N.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(t,e,n,i){var a,r,s,o,l,c,d,u=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&(T(e),e=e||C,S)){if(11!==p&&(l=te.exec(t)))if(a=l[1]){if(9===p){if(!(s=e.getElementById(a)))return n;if(s.id===a)return n.push(s),n}else if(u&&(s=u.getElementById(a))&&y(e,s)&&s.id===a)return n.push(s),n}else{if(l[2])return O.apply(n,e.getElementsByTagName(t)),n;if((a=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(a)),n}if(f.qsa&&!L[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(d=t,u=e,1===p&&(G.test(t)||_.test(t))){for((u=ne.test(t)&&ge(e.parentNode)||e)===e&&f.scope||((o=e.getAttribute("id"))?o=o.replace(ae,re):e.setAttribute("id",o=E)),r=(c=h(t)).length;r--;)c[r]=(o?"#"+o:":scope")+" "+be(c[r]);d=c.join(",")}try{return O.apply(n,u.querySelectorAll(d)),n}catch(e){L(t,!0)}finally{o===E&&e.removeAttribute("id")}}}return m(t.replace(W,"$1"),e,n,i)}function le(){var n=[];function i(e,t){return n.push(e+" ")>x.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function ce(e){return e[E]=!0,e}function de(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function me(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&se(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(s){return ce(function(r){return r=+r,ce(function(e,t){for(var n,i=s([],e.length,r),a=i.length;a--;)e[n=i[a]]&&(e[n]=!(t[n]=e[n]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=oe.support={},s=oe.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},T=oe.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:b;return i!=C&&9===i.nodeType&&i.documentElement&&(o=(C=i).documentElement,S=!s(C),b!=C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",a,!1):n.attachEvent&&n.attachEvent("onunload",a)),f.scope=de(function(e){return o.appendChild(e).appendChild(C.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=de(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=de(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=ee.test(C.getElementsByClassName),f.getById=de(function(e){return o.appendChild(e).id=E,!C.getElementsByName||!C.getElementsByName(E).length}),f.getById?(x.filter.ID=function(e){var t=e.replace(ie,u);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(ie,u);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var n,i,a,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(a=t.getElementsByName(e),i=0;r=a[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),x.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],a=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[a++];)1===n.nodeType&&i.push(n);return i},x.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&S)return t.getElementsByClassName(e)},d=[],v=[],(f.qsa=ee.test(C.querySelectorAll))&&(de(function(e){var t;o.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+q+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+q+"*(?:value|"+j+")"),e.querySelectorAll("[id~="+E+"-]").length||v.push("~="),(t=C.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+q+"*name"+q+"*="+q+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")}),de(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+q+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),o.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(f.matchesSelector=ee.test(g=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&de(function(e){f.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),d.push("!=",B)}),v=v.length&&new RegExp(v.join("|")),d=d.length&&new RegExp(d.join("|")),t=ee.test(o.compareDocumentPosition),y=t||ee.test(o.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==C||e.ownerDocument==b&&y(b,e)?-1:t==C||t.ownerDocument==b&&y(b,t)?1:l?H(l,e)-H(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,a=e.parentNode,r=t.parentNode,s=[e],o=[t];if(!a||!r)return e==C?-1:t==C?1:a?-1:r?1:l?H(l,e)-H(l,t):0;if(a===r)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;s[i]===o[i];)i++;return i?pe(s[i],o[i]):s[i]==b?-1:o[i]==b?1:0}),C},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(T(e),f.matchesSelector&&S&&!L[t+" "]&&(!d||!d.test(t))&&(!v||!v.test(t)))try{var n=g.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){L(t,!0)}return 0<oe(t,C,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!=C&&T(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=C&&T(e);var n=x.attrHandle[t.toLowerCase()],i=n&&z.call(x.attrHandle,t.toLowerCase())?n(e,t,!S):void 0;return void 0!==i?i:f.attributes||!S?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(ae,re)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,n=[],i=0,a=0;if(c=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(A),c){for(;t=e[a++];)t===e[a]&&(i=n.push(a));for(;i--;)e.splice(n[i],1)}return l=null,e},r=oe.getText=function(e){var t,n="",i=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(x=oe.selectors={cacheLength:50,createPseudo:ce,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,u),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,u),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,u).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+q+")"+e+"("+q+"|$)"))&&k(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,a){return function(e){var t=oe.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===a:"!="===i?t!==a:"^="===i?a&&0===t.indexOf(a):"*="===i?a&&-1<t.indexOf(a):"$="===i?a&&t.slice(-a.length)===a:"~="===i?-1<(" "+t.replace(X," ")+" ").indexOf(a):"|="===i&&(t===a||t.slice(0,a.length+1)===a+"-"))}},CHILD:function(h,e,t,m,v){var g="nth"!==h.slice(0,3),y="last"!==h.slice(-4),b="of-type"===e;return 1===m&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var i,a,r,s,o,l,c=g!=y?"nextSibling":"previousSibling",d=e.parentNode,u=b&&e.nodeName.toLowerCase(),p=!n&&!b,f=!1;if(d){if(g){for(;c;){for(s=e;s=s[c];)if(b?s.nodeName.toLowerCase()===u:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?d.firstChild:d.lastChild],y&&p){for(f=(o=(i=(a=(r=(s=d)[E]||(s[E]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===M&&i[1])&&i[2],s=o&&d.childNodes[o];s=++o&&s&&s[c]||(f=o=0)||l.pop();)if(1===s.nodeType&&++f&&s===e){a[h]=[M,o,f];break}}else if(p&&(f=o=(i=(a=(r=(s=e)[E]||(s[E]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===M&&i[1]),!1===f)for(;(s=++o&&s&&s[c]||(f=o=0)||l.pop())&&((b?s.nodeName.toLowerCase()!==u:1!==s.nodeType)||!++f||(p&&((a=(r=s[E]||(s[E]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[M,f]),s!==e)););return(f-=v)===m||f%m==0&&0<=f/m}}},PSEUDO:function(e,r){var t,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return s[E]?s(r):1<s.length?(t=[e,e,"",r],x.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var n,i=s(e,r),a=i.length;a--;)e[n=H(e,i[a])]=!(t[n]=i[a])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ce(function(e){var i=[],a=[],o=p(e.replace(W,"$1"));return o[E]?ce(function(e,t,n,i){for(var a,r=o(e,null,i,[]),s=e.length;s--;)(a=r[s])&&(e[s]=!(t[s]=a))}):function(e,t,n){return i[0]=e,o(i,null,n,a),i[0]=null,!a.pop()}}),has:ce(function(t){return function(e){return 0<oe(t,e).length}}),contains:ce(function(t){return t=t.replace(ie,u),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:ce(function(n){return U.test(n||"")||oe.error("unsupported lang: "+n),n=n.replace(ie,u).toLowerCase(),function(e){var t;do{if(t=S?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===o},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:ve(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=fe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function xe(o,e,t){var l=e.dir,c=e.next,d=c||l,u=t&&"parentNode"===d,p=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||u)return o(e,t,n);return!1}:function(e,t,n){var i,a,r,s=[M,p];if(n){for(;e=e[l];)if((1===e.nodeType||u)&&o(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||u)if(a=(r=e[E]||(e[E]={}))[e.uniqueID]||(r[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((i=a[d])&&i[0]===M&&i[1]===p)return s[2]=i[2];if((a[d]=s)[2]=o(e,t,n))return!0}return!1}}function we(a){return 1<a.length?function(e,t,n){for(var i=a.length;i--;)if(!a[i](e,t,n))return!1;return!0}:a[0]}function Te(e,t,n,i,a){for(var r,s=[],o=0,l=e.length,c=null!=t;o<l;o++)(r=e[o])&&(n&&!n(r,i,a)||(s.push(r),c&&t.push(o)));return s}function Ce(f,h,m,v,g,e){return v&&!v[E]&&(v=Ce(v)),g&&!g[E]&&(g=Ce(g,e)),ce(function(e,t,n,i){var a,r,s,o=[],l=[],c=t.length,d=e||function(e,t,n){for(var i=0,a=t.length;i<a;i++)oe(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),u=!f||!e&&h?d:Te(d,o,f,n,i),p=m?g||(e?f:c||v)?[]:t:u;if(m&&m(u,p,n,i),v)for(a=Te(p,l),v(a,[],n,i),r=a.length;r--;)(s=a[r])&&(p[l[r]]=!(u[l[r]]=s));if(e){if(g||f){if(g){for(a=[],r=p.length;r--;)(s=p[r])&&a.push(u[r]=s);g(null,p=[],a,i)}for(r=p.length;r--;)(s=p[r])&&-1<(a=g?H(e,s):o[r])&&(e[a]=!(t[a]=s))}}else p=Te(p===t?p.splice(c,p.length):p),g?g(null,t,p,i):O.apply(t,p)})}function Se(e){for(var a,t,n,i=e.length,r=x.relative[e[0].type],s=r||x.relative[" "],o=r?1:0,l=xe(function(e){return e===a},s,!0),c=xe(function(e){return-1<H(a,e)},s,!0),d=[function(e,t,n){var i=!r&&(n||t!==w)||((a=t).nodeType?l:c)(e,t,n);return a=null,i}];o<i;o++)if(t=x.relative[e[o].type])d=[xe(we(d),t)];else{if((t=x.filter[e[o].type].apply(null,e[o].matches))[E]){for(n=++o;n<i&&!x.relative[e[n].type];n++);return Ce(1<o&&we(d),1<o&&be(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(W,"$1"),t,o<n&&Se(e.slice(o,n)),n<i&&Se(e=e.slice(n)),n<i&&be(e))}d.push(t)}return we(d)}function Ee(v,g){function e(e,t,n,i,a){var r,s,o,l=0,c="0",d=e&&[],u=[],p=w,f=e||b&&x.find.TAG("*",a),h=M+=null==p?1:Math.random()||.1,m=f.length;for(a&&(w=t==C||t||a);c!==m&&null!=(r=f[c]);c++){if(b&&r){for(s=0,t||r.ownerDocument==C||(T(r),n=!S);o=v[s++];)if(o(r,t||C,n)){i.push(r);break}a&&(M=h)}y&&((r=!o&&r)&&l--,e&&d.push(r))}if(l+=c,y&&c!==l){for(s=0;o=g[s++];)o(d,u,t,n);if(e){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=D.call(i));u=Te(u)}O.apply(i,u),a&&!e&&0<u.length&&1<l+g.length&&oe.uniqueSort(i)}return a&&(M=h,w=p),d}var y=0<g.length,b=0<v.length;return y?ce(e):e}return ye.prototype=x.filters=x.pseudos,x.setFilters=new ye,h=oe.tokenize=function(e,t){var n,i,a,r,s,o,l,c=P[e+" "];if(c)return t?0:c.slice(0);for(s=e,o=[],l=x.preFilter;s;){for(r in n&&!(i=Y.exec(s))||(i&&(s=s.slice(i[0].length)||s),o.push(a=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),a.push({value:n,type:i[0].replace(W," ")}),s=s.slice(n.length)),x.filter)!(i=K[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),a.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):P(e,o).slice(0)},p=oe.compile=function(e,t){var n,i=[],a=[],r=$[e+" "];if(!r){for(n=(t=t||h(e)).length;n--;)(r=Se(t[n]))[E]?i.push(r):a.push(r);(r=$(e,Ee(a,i))).selector=e}return r},m=oe.select=function(e,t,n,i){var a,r,s,o,l,c="function"==typeof e&&e,d=!i&&h(e=c.selector||e);if(n=n||[],1===d.length){if(2<(r=d[0]=d[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===t.nodeType&&S&&x.relative[r[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ie,u),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(a=K.needsContext.test(e)?0:r.length;a--&&(s=r[a],!x.relative[o=s.type]);)if((l=x.find[o])&&(i=l(s.matches[0].replace(ie,u),ne.test(r[0].type)&&ge(t.parentNode)||t))){if(r.splice(a,1),!(e=i.length&&be(r)))return O.apply(n,i),n;break}}return(c||p(e,d))(i,t,!S,n,!t||ne.test(e)&&ge(t.parentNode)||t),n},f.sortStable=E.split("").sort(A).join("")===E,f.detectDuplicates=!!c,T(),f.sortDetached=de(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),de(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&de(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),de(function(e){return null==e.getAttribute("disabled")})||ue(j,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(C);E.find=f,E.expr=f.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=f.uniqueSort,E.text=f.getText,E.isXMLDoc=f.isXML,E.contains=f.contains,E.escapeSelector=f.escape;function h(e,t,n){for(var i=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&E(e).is(n))break;i.push(e)}return i}function T(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var M=E.expr.match.needsContext;function k(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function $(e,n,i){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?E.grep(e,function(e){return e===n!==i}):"string"!=typeof n?E.grep(e,function(e){return-1<a.call(n,e)!==i}):E.filter(n,e,i)}E.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?E.find.matchesSelector(i,e)?[i]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,i=this.length,a=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<i;t++)if(E.contains(a[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)E.find(e,a[t],n);return 1<i?E.uniqueSort(n):n},filter:function(e){return this.pushStack($(this,e||[],!1))},not:function(e){return this.pushStack($(this,e||[],!0))},is:function(e){return!!$(this,"string"==typeof e&&M.test(e)?E(e):e||[],!1).length}});var L,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var i,a;if(!e)return this;if(n=n||L,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:A.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:S,!0)),P.test(i[1])&&E.isPlainObject(t))for(i in t)b(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(a=S.getElementById(i[2]))&&(this[0]=a,this.length=1),this}).prototype=E.fn,L=E(S);var z=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,a=this.length,r=[],s="string"!=typeof e&&E(e);if(!M.test(e))for(;i<a;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?E.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?a.call(E(e),this[0]):a.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,"parentNode")},parentsUntil:function(e,t,n){return h(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return h(e,"nextSibling")},prevAll:function(e){return h(e,"previousSibling")},nextUntil:function(e,t,n){return h(e,"nextSibling",n)},prevUntil:function(e,t,n){return h(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(k(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(i,a){E.fn[i]=function(e,t){var n=E.map(this,a,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=E.filter(t,n)),1<this.length&&(D[i]||E.uniqueSort(n),z.test(i)&&n.reverse()),this.pushStack(n)}});var O=/[^\x20\t\r\n\f]+/g;function N(e){return e}function H(e){throw e}function j(e,t,n,i){var a;try{e&&b(a=e.promise)?a.call(e).done(t).fail(n):e&&b(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},E.each(e.match(O)||[],function(e,t){n[t]=!0}),n):E.extend({},i);function a(){for(o=o||i.once,s=r=!0;c.length;d=-1)for(t=c.shift();++d<l.length;)!1===l[d].apply(t[0],t[1])&&i.stopOnFalse&&(d=l.length,t=!1);i.memory||(t=!1),r=!1,o&&(l=t?[]:"")}var r,t,s,o,l=[],c=[],d=-1,u={add:function(){return l&&(t&&!r&&(d=l.length-1,c.push(t)),function n(e){E.each(e,function(e,t){b(t)?i.unique&&u.has(t)||l.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!r&&a()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;-1<(n=E.inArray(t,l,n));)l.splice(n,1),n<=d&&d--}),this},has:function(e){return e?-1<E.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return o=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return o=c=[],t||r||(l=t=""),this},locked:function(){return!!o},fireWith:function(e,t){return o||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),r||a()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!s}};return u},E.extend({Deferred:function(e){var r=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],a="pending",s={state:function(){return a},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var a=arguments;return E.Deferred(function(i){E.each(r,function(e,t){var n=b(a[t[4]])&&a[t[4]];o[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),a=null}).promise()},then:function(t,n,i){var l=0;function c(a,r,s,o){return function(){function e(){var e,t;if(!(a<l)){if((e=s.apply(n,i))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?o?t.call(e,c(l,r,N,o),c(l,r,H,o)):(l++,t.call(e,c(l,r,N,o),c(l,r,H,o),c(l,r,N,r.notifyWith))):(s!==N&&(n=void 0,i=[e]),(o||r.resolveWith)(n,i))}}var n=this,i=arguments,t=o?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),l<=a+1&&(s!==H&&(n=void 0,i=[e]),r.rejectWith(n,i))}};a?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),C.setTimeout(t))}}return E.Deferred(function(e){r[0][3].add(c(0,e,b(i)?i:N,e.notifyWith)),r[1][3].add(c(0,e,b(t)?t:N)),r[2][3].add(c(0,e,b(n)?n:H))}).promise()},promise:function(e){return null!=e?E.extend(e,s):s}},o={};return E.each(r,function(e,t){var n=t[2],i=t[5];s[t[1]]=n.add,i&&n.add(function(){a=i},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),n.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=n.fireWith}),s.promise(o),e&&e.call(o,o),o},when:function(e){function t(t){return function(e){a[t]=this,r[t]=1<arguments.length?o.call(arguments):e,--n||s.resolveWith(a,r)}}var n=arguments.length,i=n,a=Array(i),r=o.call(arguments),s=E.Deferred();if(n<=1&&(j(e,s.done(t(i)).resolve,s.reject,!n),"pending"===s.state()||b(r[i]&&r[i].then)))return s.then();for(;i--;)j(r[i],t(i),s.reject);return s.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&q.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){C.setTimeout(function(){throw e})};var F=E.Deferred();function R(){S.removeEventListener("DOMContentLoaded",R),C.removeEventListener("load",R),E.ready()}E.fn.ready=function(e){return F.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||F.resolveWith(S,[E])}}),E.ready.then=F.then,"complete"===S.readyState||"loading"!==S.readyState&&!S.documentElement.doScroll?C.setTimeout(E.ready):(S.addEventListener("DOMContentLoaded",R),C.addEventListener("load",R));var B=function(e,t,n,i,a,r,s){var o=0,l=e.length,c=null==n;if("object"===w(n))for(o in a=!0,n)B(e,t,o,n[o],!0,r,s);else if(void 0!==i&&(a=!0,b(i)||(s=!0),c&&(t=s?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(E(e),n)})),t))for(;o<l;o++)t(e[o],n,s?i:i.call(e[o],o,t(e[o],n)));return a?e:c?t.call(e):l?t(e[0],n):r},X=/^-ms-/,W=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function _(e){return e.replace(X,"ms-").replace(W,Y)}function G(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function V(){this.expando=E.expando+V.uid++}V.uid=1,V.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,a=this.cache(e);if("string"==typeof t)a[_(t)]=n;else for(i in t)a[_(i)]=t[i];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][_(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(_):(t=_(t))in i?[t]:t.match(O)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!E.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var U=new V,K=new V,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(e,t,n){var i,a;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(a=n)||"false"!==a&&("null"===a?null:a===+a+""?+a:Q.test(a)?JSON.parse(a):a)}catch(e){}K.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return K.hasData(e)||U.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return U.access(e,t,n)},_removeData:function(e,t){U.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,i,a,r=this[0],s=r&&r.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){K.set(this,n)}):B(this,function(e){var t;if(r&&void 0===e)return void 0!==(t=K.get(r,n))||void 0!==(t=J(r,n))?t:void 0;this.each(function(){K.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(a=K.get(r),1===r.nodeType&&!U.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(i=s[t].name).indexOf("data-")&&(i=_(i.slice(5)),J(r,i,a[i]));U.set(r,"hasDataAttrs",!0)}return a},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),E.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=U.get(e,t),n&&(!i||Array.isArray(n)?i=U.access(e,t,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),i=n.length,a=n.shift(),r=E._queueHooks(e,t);"inprogress"===a&&(a=n.shift(),i--),a&&("fx"===t&&n.unshift("inprogress"),delete r.stop,a.call(e,function(){E.dequeue(e,t)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return U.get(e,n)||U.access(e,n,{empty:E.Callbacks("once memory").add(function(){U.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--a||r.resolveWith(s,[s])}var i,a=1,r=E.Deferred(),s=this,o=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(i=U.get(s[o],e+"queueHooks"))&&i.empty&&(a++,i.empty.add(n));return n(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ie=S.documentElement,ae=function(e){return E.contains(e.ownerDocument,e)},re={composed:!0};ie.getRootNode&&(ae=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===E.css(e,"display")};function oe(e,t,n,i){var a,r,s=20,o=i?function(){return i.cur()}:function(){return E.css(e,t,"")},l=o(),c=n&&n[3]||(E.cssNumber[t]?"":"px"),d=e.nodeType&&(E.cssNumber[t]||"px"!==c&&+l)&&te.exec(E.css(e,t));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;s--;)E.style(e,t,d+c),(1-r)*(1-(r=o()/l||.5))<=0&&(s=0),d/=r;d*=2,E.style(e,t,d+c),n=n||[]}return n&&(d=+d||+l||0,a=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=a)),a}var le={};function ce(e,t){for(var n,i,a,r,s,o,l,c=[],d=0,u=e.length;d<u;d++)(i=e[d]).style&&(n=i.style.display,t?("none"===n&&(c[d]=U.get(i,"display")||null,c[d]||(i.style.display="")),""===i.style.display&&se(i)&&(c[d]=(l=s=r=void 0,s=(a=i).ownerDocument,o=a.nodeName,(l=le[o])||(r=s.body.appendChild(s.createElement(o)),l=E.css(r,"display"),r.parentNode.removeChild(r),"none"===l&&(l="block"),le[o]=l)))):"none"!==n&&(c[d]="none",U.set(i,"display",n)));for(d=0;d<u;d++)null!=c[d]&&(e[d].style.display=c[d]);return e}E.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?E(this).show():E(this).hide()})}});var de,ue,pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;de=S.createDocumentFragment().appendChild(S.createElement("div")),(ue=S.createElement("input")).setAttribute("type","radio"),ue.setAttribute("checked","checked"),ue.setAttribute("name","t"),de.appendChild(ue),y.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue,de.innerHTML="<option></option>",y.option=!!de.lastChild;var me={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&k(e,t)?E.merge([e],n):n}function ge(e,t){for(var n=0,i=e.length;n<i;n++)U.set(e[n],"globalEval",!t||U.get(t[n],"globalEval"))}me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td,y.option||(me.optgroup=me.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,n,i,a){for(var r,s,o,l,c,d,u=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===w(r))E.merge(p,r.nodeType?[r]:r);else if(ye.test(r)){for(s=s||u.appendChild(t.createElement("div")),o=(fe.exec(r)||["",""])[1].toLowerCase(),l=me[o]||me._default,s.innerHTML=l[1]+E.htmlPrefilter(r)+l[2],d=l[0];d--;)s=s.lastChild;E.merge(p,s.childNodes),(s=u.firstChild).textContent=""}else p.push(t.createTextNode(r));for(u.textContent="",f=0;r=p[f++];)if(i&&-1<E.inArray(r,i))a&&a.push(r);else if(c=ae(r),s=ve(u.appendChild(r),"script"),c&&ge(s),n)for(d=0;r=s[d++];)he.test(r.type||"")&&n.push(r);return u}var xe=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function Se(){return!1}function Ee(e,t){return e===function(){try{return S.activeElement}catch(e){}}()==("focus"===t)}function Me(e,t,n,i,a,r){var s,o;if("object"==typeof t){for(o in"string"!=typeof n&&(i=i||n,n=void 0),t)Me(e,o,n,i,t[o],r);return e}if(null==i&&null==a?(a=n,i=n=void 0):null==a&&("string"==typeof n?(a=i,i=void 0):(a=i,i=n,n=void 0)),!1===a)a=Se;else if(!a)return e;return 1===r&&(s=a,(a=function(e){return E().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=E.guid++)),e.each(function(){E.event.add(this,t,a,i,n)})}function ke(e,a,r){r?(U.set(e,a,!1),E.event.add(e,a,{namespace:!1,handler:function(e){var t,n,i=U.get(this,a);if(1&e.isTrigger&&this[a]){if(i.length)(E.event.special[a]||{}).delegateType&&e.stopPropagation();else if(i=o.call(arguments),U.set(this,a,i),t=r(this,a),this[a](),i!==(n=U.get(this,a))||t?U.set(this,a,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else i.length&&(U.set(this,a,{value:E.event.trigger(E.extend(i[0],E.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===U.get(e,a)&&E.event.add(e,a,Ce)}E.event={global:{},add:function(t,e,n,i,a){var r,s,o,l,c,d,u,p,f,h,m,v=U.get(t);if(G(t))for(n.handler&&(n=(r=n).handler,a=r.selector),a&&E.find.matchesSelector(ie,a),n.guid||(n.guid=E.guid++),(l=v.events)||(l=v.events=Object.create(null)),(s=v.handle)||(s=v.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(O)||[""]).length;c--;)f=m=(o=Te.exec(e[c])||[])[1],h=(o[2]||"").split(".").sort(),f&&(u=E.event.special[f]||{},f=(a?u.delegateType:u.bindType)||f,u=E.event.special[f]||{},d=E.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:a,needsContext:a&&E.expr.match.needsContext.test(a),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,i,h,s)||t.addEventListener&&t.addEventListener(f,s)),u.add&&(u.add.call(t,d),d.handler.guid||(d.handler.guid=n.guid)),a?p.splice(p.delegateCount++,0,d):p.push(d),E.event.global[f]=!0)},remove:function(e,t,n,i,a){var r,s,o,l,c,d,u,p,f,h,m,v=U.hasData(e)&&U.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(O)||[""]).length;c--;)if(f=m=(o=Te.exec(t[c])||[])[1],h=(o[2]||"").split(".").sort(),f){for(u=E.event.special[f]||{},p=l[f=(i?u.delegateType:u.bindType)||f]||[],o=o[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)d=p[r],!a&&m!==d.origType||n&&n.guid!==d.guid||o&&!o.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(r,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));s&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,h,v.handle)||E.removeEvent(e,f,v.handle),delete l[f])}else for(f in l)E.event.remove(e,f+t[c],n,i,!0);E.isEmptyObject(l)&&U.remove(e,"handle events")}},dispatch:function(e){var t,n,i,a,r,s,o=new Array(arguments.length),l=E.event.fix(e),c=(U.get(this,"events")||Object.create(null))[l.type]||[],d=E.event.special[l.type]||{};for(o[0]=l,t=1;t<arguments.length;t++)o[t]=arguments[t];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(s=E.event.handlers.call(this,l,c),t=0;(a=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=a.elem,n=0;(r=a.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((E.event.special[r.origType]||{}).handle||r.handler).apply(a.elem,o))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,a,r,s,o=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[a=(i=t[n]).selector+" "]&&(s[a]=i.needsContext?-1<E(a,this).index(c):E.find(a,this,null,[c]).length),s[a]&&r.push(i);r.length&&o.push({elem:c,handlers:r})}return c=this,l<t.length&&o.push({elem:c,handlers:t.slice(l)}),o},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&k(t,"input")&&ke(t,"click",Ce),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&k(t,"input")&&ke(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&k(t,"input")&&U.get(t,"click")||k(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(e,t){E.event.special[e]={setup:function(){return ke(this,e,Ee),!1},trigger:function(){return ke(this,e),!0},delegateType:t}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,a){E.event.special[e]={delegateType:a,bindType:a,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=a),t}}}),E.fn.extend({on:function(e,t,n,i){return Me(this,e,t,n,i)},one:function(e,t,n,i){return Me(this,e,t,n,i,1)},off:function(e,t,n){var i,a;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,E(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){E.event.remove(this,e,n,t)});for(a in e)this.off(a,t,e[a]);return this}});var Pe=/<script|<style|<link/i,$e=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ae(e,t){return k(e,"table")&&k(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function ze(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ie(e,t){var n,i,a,r,s,o;if(1===t.nodeType){if(U.hasData(e)&&(o=U.get(e).events))for(a in U.remove(t,"handle events"),o)for(n=0,i=o[a].length;n<i;n++)E.event.add(t,a,o[a][n]);K.hasData(e)&&(r=K.access(e),s=E.extend({},r),K.set(t,s))}}function Oe(n,i,a,r){i=v(i);var e,t,s,o,l,c,d=0,u=n.length,p=u-1,f=i[0],h=b(f);if(h||1<u&&"string"==typeof f&&!y.checkClone&&$e.test(f))return n.each(function(e){var t=n.eq(e);h&&(i[0]=f.call(this,e,t.html())),Oe(t,i,a,r)});if(u&&(t=(e=be(i,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(o=(s=E.map(ve(e,"script"),ze)).length;d<u;d++)l=e,d!==p&&(l=E.clone(l,!0,!0),o&&E.merge(s,ve(l,"script"))),a.call(n[d],l,d);if(o)for(c=s[s.length-1].ownerDocument,E.map(s,De),d=0;d<o;d++)l=s[d],he.test(l.type||"")&&!U.access(l,"globalEval")&&E.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&!l.noModule&&E._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):x(l.textContent.replace(Le,""),l,c))}return n}function Ne(e,t,n){for(var i,a=t?E.filter(t,e):e,r=0;null!=(i=a[r]);r++)n||1!==i.nodeType||E.cleanData(ve(i)),i.parentNode&&(n&&ae(i)&&ge(ve(i,"script")),i.parentNode.removeChild(i));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,a,r,s,o,l,c,d=e.cloneNode(!0),u=ae(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(s=ve(d),i=0,a=(r=ve(e)).length;i<a;i++)o=r[i],l=s[i],"input"===(c=l.nodeName.toLowerCase())&&pe.test(o.type)?l.checked=o.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=o.defaultValue);if(t)if(n)for(r=r||ve(e),s=s||ve(d),i=0,a=r.length;i<a;i++)Ie(r[i],s[i]);else Ie(e,d);return 0<(s=ve(d,"script")).length&&ge(s,!u&&ve(e,"script")),d},cleanData:function(e){for(var t,n,i,a=E.event.special,r=0;void 0!==(n=e[r]);r++)if(G(n)){if(t=n[U.expando]){if(t.events)for(i in t.events)a[i]?E.event.remove(n,i):E.removeEvent(n,i,t.handle);n[U.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Ne(this,e,!0)},remove:function(e){return Ne(this,e)},text:function(e){return B(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Oe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ae(this,e).appendChild(e)})},prepend:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ae(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!me[(fe.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Oe(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){E.fn[e]=function(e){for(var t,n=[],i=E(e),a=i.length-1,r=0;r<=a;r++)t=r===a?this:this.clone(!0),E(i[r])[s](t),l.apply(n,t.get());return this.pushStack(n)}});function He(e,t,n){var i,a,r={};for(a in t)r[a]=e.style[a],e.style[a]=t[a];for(a in i=n.call(e),t)e.style[a]=r[a];return i}var je,qe,Fe,Re,Be,Xe,We,Ye,_e=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ge=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Ve=new RegExp(ne.join("|"),"i");function Ue(){if(Ye){We.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ye.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(We).appendChild(Ye);var e=C.getComputedStyle(Ye);je="1%"!==e.top,Xe=12===Ke(e.marginLeft),Ye.style.right="60%",Re=36===Ke(e.right),qe=36===Ke(e.width),Ye.style.position="absolute",Fe=12===Ke(Ye.offsetWidth/3),ie.removeChild(We),Ye=null}}function Ke(e){return Math.round(parseFloat(e))}function Qe(e,t,n){var i,a,r,s,o=e.style;return(n=n||Ge(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ae(e)||(s=E.style(e,t)),!y.pixelBoxStyles()&&_e.test(s)&&Ve.test(t)&&(i=o.width,a=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=i,o.minWidth=a,o.maxWidth=r)),void 0!==s?s+"":s}function Ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}We=S.createElement("div"),(Ye=S.createElement("div")).style&&(Ye.style.backgroundClip="content-box",Ye.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Ye.style.backgroundClip,E.extend(y,{boxSizingReliable:function(){return Ue(),qe},pixelBoxStyles:function(){return Ue(),Re},pixelPosition:function(){return Ue(),je},reliableMarginLeft:function(){return Ue(),Xe},scrollboxSize:function(){return Ue(),Fe},reliableTrDimensions:function(){var e,t,n,i;return null==Be&&(e=S.createElement("table"),t=S.createElement("tr"),n=S.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",ie.appendChild(e).appendChild(t).appendChild(n),i=C.getComputedStyle(t),Be=3<parseInt(i.height),ie.removeChild(e)),Be}}));var Je=["Webkit","Moz","ms"],et=S.createElement("div").style,tt={};function nt(e){var t=E.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in et)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,at=/^--/,rt={position:"absolute",visibility:"hidden",display:"block"},st={letterSpacing:"0",fontWeight:"400"};function ot(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function lt(e,t,n,i,a,r){var s="width"===t?1:0,o=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=E.css(e,n+ne[s],!0,a)),i?("content"===n&&(l-=E.css(e,"padding"+ne[s],!0,a)),"margin"!==n&&(l-=E.css(e,"border"+ne[s]+"Width",!0,a))):(l+=E.css(e,"padding"+ne[s],!0,a),"padding"!==n?l+=E.css(e,"border"+ne[s]+"Width",!0,a):o+=E.css(e,"border"+ne[s]+"Width",!0,a));return!i&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-o-.5))||0),l}function ct(e,t,n){var i=Ge(e),a=(!y.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,i),r=a,s=Qe(e,t,i),o="offset"+t[0].toUpperCase()+t.slice(1);if(_e.test(s)){if(!n)return s;s="auto"}return(!y.boxSizingReliable()&&a||!y.reliableTrDimensions()&&k(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===E.css(e,"display",!1,i))&&e.getClientRects().length&&(a="border-box"===E.css(e,"boxSizing",!1,i),(r=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+lt(e,t,n||(a?"border":"content"),r,i,s)+"px"}function dt(e,t,n,i,a){return new dt.prototype.init(e,t,n,i,a)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,r,s,o=_(t),l=at.test(t),c=e.style;if(l||(t=nt(o)),s=E.cssHooks[t]||E.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(a=s.get(e,!1,i))?a:c[t];"string"===(r=typeof n)&&(a=te.exec(n))&&a[1]&&(n=oe(e,t,a),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=a&&a[3]||(E.cssNumber[o]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var a,r,s,o=_(t);return at.test(t)||(t=nt(o)),(s=E.cssHooks[t]||E.cssHooks[o])&&"get"in s&&(a=s.get(e,!0,n)),void 0===a&&(a=Qe(e,t,i)),"normal"===a&&t in st&&(a=st[t]),""===n||n?(r=parseFloat(a),!0===n||isFinite(r)?r||0:a):a}}),E.each(["height","width"],function(e,l){E.cssHooks[l]={get:function(e,t,n){if(t)return!it.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,n):He(e,rt,function(){return ct(e,l,n)})},set:function(e,t,n){var i,a=Ge(e),r=!y.scrollboxSize()&&"absolute"===a.position,s=(r||n)&&"border-box"===E.css(e,"boxSizing",!1,a),o=n?lt(e,l,n,s,a):0;return s&&r&&(o-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(a[l])-lt(e,l,"border",!1,a)-.5)),o&&(i=te.exec(t))&&"px"!==(i[3]||"px")&&(e.style[l]=t,t=E.css(e,l)),ot(0,t,o)}}}),E.cssHooks.marginLeft=Ze(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-He(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(a,r){E.cssHooks[a+r]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[a+ne[t]+r]=i[t]||i[t-2]||i[0];return n}},"margin"!==a&&(E.cssHooks[a+r].set=ot)}),E.fn.extend({css:function(e,t){return B(this,function(e,t,n){var i,a,r={},s=0;if(Array.isArray(t)){for(i=Ge(e),a=t.length;s<a;s++)r[t[s]]=E.css(e,t[s],!1,i);return r}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),(E.Tween=dt).prototype={constructor:dt,init:function(e,t,n,i,a,r){this.elem=e,this.prop=n,this.easing=a||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(E.cssNumber[n]?"":"px")},cur:function(){var e=dt.propHooks[this.prop];return e&&e.get?e.get(this):dt.propHooks._default.get(this)},run:function(e){var t,n=dt.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):dt.propHooks._default.set(this),this}},dt.prototype.init.prototype=dt.prototype,dt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},dt.propHooks.scrollTop=dt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=dt.prototype.init,E.fx.step={};var ut,pt,ft,ht,mt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function gt(){pt&&(!1===S.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(gt):C.setTimeout(gt,E.fx.interval),E.fx.tick())}function yt(){return C.setTimeout(function(){ut=void 0}),ut=Date.now()}function bt(e,t){var n,i=0,a={height:e};for(t=t?1:0;i<4;i+=2-t)a["margin"+(n=ne[i])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function xt(e,t,n){for(var i,a=(wt.tweeners[t]||[]).concat(wt.tweeners["*"]),r=0,s=a.length;r<s;r++)if(i=a[r].call(n,t,e))return i}function wt(r,e,t){var n,s,i=0,a=wt.prefilters.length,o=E.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=ut||yt(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),i=0,a=c.tweens.length;i<a;i++)c.tweens[i].run(n);return o.notifyWith(r,[c,n,t]),n<1&&a?t:(a||o.notifyWith(r,[c,1,0]),o.resolveWith(r,[c]),!1)},c=o.promise({elem:r,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},t),originalProperties:e,originalOptions:t,startTime:ut||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=E.Tween(r,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)c.tweens[t].run(1);return e?(o.notifyWith(r,[c,1,0]),o.resolveWith(r,[c,e])):o.rejectWith(r,[c,e]),this}}),d=c.props;for(!function(e,t){var n,i,a,r,s;for(n in e)if(a=t[i=_(n)],r=e[n],Array.isArray(r)&&(a=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=E.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=a);else t[i]=a}(d,c.opts.specialEasing);i<a;i++)if(n=wt.prefilters[i].call(c,r,d,c.opts))return b(n.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return E.map(d,xt,c),b(c.opts.start)&&c.opts.start.call(r,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:r,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(wt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return oe(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,a=(e=b(e)?(t=e,["*"]):e.match(O)).length;i<a;i++)n=e[i],wt.tweeners[n]=wt.tweeners[n]||[],wt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,a,r,s,o,l,c,d,u="width"in t||"height"in t,p=this,f={},h=e.style,m=e.nodeType&&se(e),v=U.get(e,"fxshow");for(i in n.queue||(null==(s=E._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,E.queue(e,"fx").length||s.empty.fire()})})),t)if(a=t[i],mt.test(a)){if(delete t[i],r=r||"toggle"===a,a===(m?"hide":"show")){if("show"!==a||!v||void 0===v[i])continue;m=!0}f[i]=v&&v[i]||E.style(e,i)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(f))for(i in u&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=U.get(e,"display")),"none"===(d=E.css(e,"display"))&&(c?d=c:(ce([e],!0),c=e.style.display||c,d=E.css(e,"display"),ce([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===E.css(e,"float")&&(l||(p.done(function(){h.display=c}),null==c&&(d=h.display,c="none"===d?"":d)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,f)l||(v?"hidden"in v&&(m=v.hidden):v=U.access(e,"fxshow",{display:c}),r&&(v.hidden=!m),m&&ce([e],!0),p.done(function(){for(i in m||ce([e]),U.remove(e,"fxshow"),f)E.style(e,i,f[i])})),l=xt(m?v[i]:0,i,p),i in v||(v[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?wt.prefilters.unshift(e):wt.prefilters.push(e)}}),E.speed=function(e,t,n){var i=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){b(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function a(){var e=wt(this,E.extend({},t),s);(r||U.get(this,"finish"))&&e.stop(!0)}var r=E.isEmptyObject(t),s=E.speed(e,n,i);return a.finish=a,r||!1===s.queue?this.each(a):this.queue(s.queue,a)},stop:function(a,e,r){function s(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof a&&(r=e,e=a,a=void 0),e&&this.queue(a||"fx",[]),this.each(function(){var e=!0,t=null!=a&&a+"queueHooks",n=E.timers,i=U.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&vt.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=a&&n[t].queue!==a||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||E.dequeue(this,a)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=U.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],a=E.timers,r=n?n.length:0;for(t.finish=!0,E.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=a.length;e--;)a[e].elem===this&&a[e].queue===s&&(a[e].anim.stop(!0),a.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),E.each(["toggle","show","hide"],function(e,i){var a=E.fn[i];E.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?a.apply(this,arguments):this.animate(bt(i,!0),e,t,n)}}),E.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){E.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(ut=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),ut=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){pt||(pt=!0,gt())},E.fx.stop=function(){pt=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(i,e){return i=E.fx&&E.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,i);t.stop=function(){C.clearTimeout(n)}})},ft=S.createElement("input"),ht=S.createElement("select").appendChild(S.createElement("option")),ft.type="checkbox",y.checkOn=""!==ft.value,y.optSelected=ht.selected,(ft=S.createElement("input")).value="t",ft.type="radio",y.radioValue="t"===ft.value;var Tt,Ct=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return B(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var i,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?E.prop(e,t,n):(1===r&&E.isXMLDoc(e)||(a=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?Tt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(a&&"get"in a&&null!==(i=a.get(e,t)))&&null==(i=E.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&k(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,a=t&&t.match(O);if(a&&1===e.nodeType)for(;n=a[i++];)e.removeAttribute(n)}}),Tt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var s=Ct[t]||E.find.attr;Ct[t]=function(e,t,n){var i,a,r=t.toLowerCase();return n||(a=Ct[r],Ct[r]=i,i=null!=s(e,t,n)?r:null,Ct[r]=a),i}});var St=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function Mt(e){return(e.match(O)||[]).join(" ")}function kt(e){return e.getAttribute&&e.getAttribute("class")||""}function Pt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(O)||[]}E.fn.extend({prop:function(e,t){return B(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var i,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&E.isXMLDoc(e)||(t=E.propFix[t]||t,a=E.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:e[t]=n:a&&"get"in a&&null!==(i=a.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):St.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,i,a,r,s,o,l=0;if(b(t))return this.each(function(e){E(this).addClass(t.call(this,e,kt(this)))});if((e=Pt(t)).length)for(;n=this[l++];)if(a=kt(n),i=1===n.nodeType&&" "+Mt(a)+" "){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a!==(o=Mt(i))&&n.setAttribute("class",o)}return this},removeClass:function(t){var e,n,i,a,r,s,o,l=0;if(b(t))return this.each(function(e){E(this).removeClass(t.call(this,e,kt(this)))});if(!arguments.length)return this.attr("class","");if((e=Pt(t)).length)for(;n=this[l++];)if(a=kt(n),i=1===n.nodeType&&" "+Mt(a)+" "){for(s=0;r=e[s++];)for(;-1<i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");a!==(o=Mt(i))&&n.setAttribute("class",o)}return this},toggleClass:function(a,t){var r=typeof a,s="string"==r||Array.isArray(a);return"boolean"==typeof t&&s?t?this.addClass(a):this.removeClass(a):b(a)?this.each(function(e){E(this).toggleClass(a.call(this,e,kt(this),t),t)}):this.each(function(){var e,t,n,i;if(s)for(t=0,n=E(this),i=Pt(a);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==a&&"boolean"!=r||((e=kt(this))&&U.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==a&&U.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+Mt(kt(n))+" ").indexOf(t))return!0;return!1}});var $t=/\r/g;E.fn.extend({val:function(n){var i,e,a,t=this[0];return arguments.length?(a=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=a?n.call(this,e,E(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?"":e+""})),(i=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace($t,""):null==e?"":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:Mt(E.text(e))}},select:{get:function(e){var t,n,i,a=e.options,r=e.selectedIndex,s="select-one"===e.type,o=s?null:[],l=s?r+1:a.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=a[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(t=E(n).val(),s)return t;o.push(t)}return o},set:function(e,t){for(var n,i,a=e.options,r=E.makeArray(t),s=a.length;s--;)((i=a[s]).selected=-1<E.inArray(E.valHooks.option.get(i),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},y.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in C;function Lt(e){e.stopPropagation()}var At=/^(?:focusinfocus|focusoutblur)$/;E.extend(E.event,{trigger:function(e,t,n,i){var a,r,s,o,l,c,d,u,p=[n||S],f=g.call(e,"type")?e.type:e,h=g.call(e,"namespace")?e.namespace.split("."):[];if(r=u=s=n=n||S,3!==n.nodeType&&8!==n.nodeType&&!At.test(f+E.event.triggered)&&(-1<f.indexOf(".")&&(f=(h=f.split(".")).shift(),h.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[E.expando]?e:new E.Event(f,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),d=E.event.special[f]||{},i||!d.trigger||!1!==d.trigger.apply(n,t))){if(!i&&!d.noBubble&&!m(n)){for(o=d.delegateType||f,At.test(o+f)||(r=r.parentNode);r;r=r.parentNode)p.push(r),s=r;s===(n.ownerDocument||S)&&p.push(s.defaultView||s.parentWindow||C)}for(a=0;(r=p[a++])&&!e.isPropagationStopped();)u=r,e.type=1<a?o:d.bindType||f,(c=(U.get(r,"events")||Object.create(null))[e.type]&&U.get(r,"handle"))&&c.apply(r,t),(c=l&&r[l])&&c.apply&&G(r)&&(e.result=c.apply(r,t),!1===e.result&&e.preventDefault());return e.type=f,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),t)||!G(n)||l&&b(n[f])&&!m(n)&&((s=n[l])&&(n[l]=null),E.event.triggered=f,e.isPropagationStopped()&&u.addEventListener(f,Lt),n[f](),e.isPropagationStopped()&&u.removeEventListener(f,Lt),E.event.triggered=void 0,s&&(n[l]=s)),e.result}},simulate:function(e,t,n){var i=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(i,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),y.focusin||E.each({focus:"focusin",blur:"focusout"},function(n,i){function a(e){E.event.simulate(i,e.target,E.event.fix(e))}E.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,i);t||e.addEventListener(n,a,!0),U.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,i)-1;t?U.access(e,i,t):(e.removeEventListener(n,a,!0),U.remove(e,i))}}});var zt=C.location,Dt={guid:Date.now()},It=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var Ot=/\[\]$/,Nt=/\r?\n/g,Ht=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function qt(n,e,i,a){var t;if(Array.isArray(e))E.each(e,function(e,t){i||Ot.test(n)?a(n,t):qt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,i,a)});else if(i||"object"!==w(e))a(n,e);else for(t in e)qt(n+"["+t+"]",e[t],i,a)}E.param=function(e,t){function n(e,t){var n=b(t)?t():t;a[a.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var i,a=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){n(this.name,this.value)});else for(i in e)qt(i,e[i],t,n);return a.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&jt.test(this.nodeName)&&!Ht.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}}):{name:t.name,value:n.replace(Nt,"\r\n")}}).get()}});var Ft=/%20/g,Rt=/#.*$/,Bt=/([?&])_=[^&]*/,Xt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wt=/^(?:GET|HEAD)$/,Yt=/^\/\//,_t={},Gt={},Vt="*/".concat("*"),Ut=S.createElement("a");function Kt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,a=e.toLowerCase().match(O)||[];if(b(t))for(;n=a[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function Qt(t,a,r,s){var o={},l=t===Gt;function c(e){var i;return o[e]=!0,E.each(t[e]||[],function(e,t){var n=t(a,r,s);return"string"!=typeof n||l||o[n]?l?!(i=n):void 0:(a.dataTypes.unshift(n),c(n),!1)}),i}return c(a.dataTypes[0])||!o["*"]&&c("*")}function Zt(e,t){var n,i,a=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:i=i||{})[n]=t[n]);return i&&E.extend(!0,e,i),e}Ut.href=zt.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(zt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,E.ajaxSettings),t):Zt(E.ajaxSettings,e)},ajaxPrefilter:Kt(_t),ajaxTransport:Kt(Gt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var d,u,p,n,f,i,h,m,a,r,v=E.ajaxSetup({},t),g=v.context||v,y=v.context&&(g.nodeType||g.jquery)?E(g):E.event,b=E.Deferred(),x=E.Callbacks("once memory"),w=v.statusCode||{},s={},o={},l="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n)for(n={};t=Xt.exec(p);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=o[e.toLowerCase()]=o[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||l;return d&&d.abort(t),c(0,t),this}};if(b.promise(T),v.url=((e||v.url||zt.href)+"").replace(Yt,zt.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(O)||[""],null==v.crossDomain){i=S.createElement("a");try{i.href=v.url,i.href=i.href,v.crossDomain=Ut.protocol+"//"+Ut.host!=i.protocol+"//"+i.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=E.param(v.data,v.traditional)),Qt(_t,v,t,T),h)return T;for(a in(m=E.event&&v.global)&&0==E.active++&&E.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Wt.test(v.type),u=v.url.replace(Rt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Ft,"+")):(r=v.url.slice(u.length),v.data&&(v.processData||"string"==typeof v.data)&&(u+=(It.test(u)?"&":"?")+v.data,delete v.data),!1===v.cache&&(u=u.replace(Bt,"$1"),r=(It.test(u)?"&":"?")+"_="+Dt.guid+++r),v.url=u+r),v.ifModified&&(E.lastModified[u]&&T.setRequestHeader("If-Modified-Since",E.lastModified[u]),E.etag[u]&&T.setRequestHeader("If-None-Match",E.etag[u])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+Vt+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(a,v.headers[a]);if(v.beforeSend&&(!1===v.beforeSend.call(g,T,v)||h))return T.abort();if(l="abort",x.add(v.complete),T.done(v.success),T.fail(v.error),d=Qt(Gt,v,t,T)){if(T.readyState=1,m&&y.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(f=C.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,d.send(s,c)}catch(e){if(h)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,n,i){var a,r,s,o,l,c=t;h||(h=!0,f&&C.clearTimeout(f),d=void 0,p=i||"",T.readyState=0<e?4:0,a=200<=e&&e<300||304===e,n&&(o=function(e,t,n){for(var i,a,r,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in o)if(o[a]&&o[a].test(i)){l.unshift(a);break}if(l[0]in n)r=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){r=a;break}s=s||a}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(v,T,n)),!a&&-1<E.inArray("script",v.dataTypes)&&(v.converters["text script"]=function(){}),o=function(e,t,n,i){var a,r,s,o,l,c={},d=e.dataTypes.slice();if(d[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=d.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=d.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(a in c)if((o=a.split(" "))[1]===r&&(s=c[l+" "+o[0]]||c["* "+o[0]])){!0===s?s=c[a]:!0!==c[a]&&(r=o[0],d.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(v,o,T,a),a?(v.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(E.lastModified[u]=l),(l=T.getResponseHeader("etag"))&&(E.etag[u]=l)),204===e||"HEAD"===v.type?c="nocontent":304===e?c="notmodified":(c=o.state,r=o.data,a=!(s=o.error))):(s=c,!e&&c||(c="error",e<0&&(e=0))),T.status=e,T.statusText=(t||c)+"",a?b.resolveWith(g,[r,c,T]):b.rejectWith(g,[T,c,s]),T.statusCode(w),w=void 0,m&&y.trigger(a?"ajaxSuccess":"ajaxError",[T,v,a?r:s]),x.fireWith(g,[T,c]),m&&(y.trigger("ajaxComplete",[T,v]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,a){E[a]=function(e,t,n,i){return b(t)&&(i=i||n,n=t,t=void 0),E.ajax(E.extend({url:e,type:a,dataType:i,data:t,success:n},E.isPlainObject(e)&&e))}}),E.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),E._evalUrl=function(e,t,n){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,n)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},en=E.ajaxSettings.xhr();y.cors=!!en&&"withCredentials"in en,y.ajax=en=!!en,E.ajaxTransport(function(a){var r,s;if(y.cors||en&&!a.crossDomain)return{send:function(e,t){var n,i=a.xhr();if(i.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(n in a.xhrFields)i[n]=a.xhrFields[n];for(n in a.mimeType&&i.overrideMimeType&&i.overrideMimeType(a.mimeType),a.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Jt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),s=i.onerror=i.ontimeout=r("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&C.setTimeout(function(){r&&s()})},r=r("abort");try{i.send(a.hasContent&&a.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(n){var i,a;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=E("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",a=function(e){i.remove(),a=null,e&&t("error"===e.type?404:200,e.type)}),S.head.appendChild(i[0])},abort:function(){a&&a()}}});var tn,nn=[],an=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=nn.pop()||E.expando+"_"+Dt.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,n){var i,a,r,s=!1!==e.jsonp&&(an.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&an.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(an,"$1"+i):!1!==e.jsonp&&(e.url+=(It.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return r||E.error(i+" was not called"),r[0]},e.dataTypes[0]="json",a=C[i],C[i]=function(){r=arguments},n.always(function(){void 0===a?E(C).removeProp(i):C[i]=a,e[i]&&(e.jsonpCallback=t.jsonpCallback,nn.push(i)),r&&b(a)&&a(r[0]),r=a=void 0}),"script"}),y.createHTMLDocument=((tn=S.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===tn.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((i=(t=S.implementation.createHTMLDocument("")).createElement("base")).href=S.location.href,t.head.appendChild(i)):t=S),r=!n&&[],(a=P.exec(e))?[t.createElement(a[1])]:(a=be([e],t,r),r&&r.length&&E(r).remove(),E.merge([],a.childNodes)));var i,a,r},E.fn.load=function(e,t,n){var i,a,r,s=this,o=e.indexOf(" ");return-1<o&&(i=Mt(e.slice(o)),e=e.slice(0,o)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),0<s.length&&E.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?E("<div>").append(E.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(e,t,n){var i,a,r,s,o,l,c=E.css(e,"position"),d=E(e),u={};"static"===c&&(e.style.position="relative"),o=d.offset(),r=E.css(e,"top"),l=E.css(e,"left"),a=("absolute"===c||"fixed"===c)&&-1<(r+l).indexOf("auto")?(s=(i=d.position()).top,i.left):(s=parseFloat(r)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,n,E.extend({},o))),null!=t.top&&(u.top=t.top-o.top+s),null!=t.left&&(u.left=t.left-o.left+a),"using"in t?t.using.call(e,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),d.css(u))}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],a={top:0,left:0};if("fixed"===E.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((a=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),a.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-E.css(i,"marginTop",!0),left:t.left-a.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ie})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,a){var r="pageYOffset"===a;E.fn[t]=function(e){return B(this,function(e,t,n){var i;if(m(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n)return i?i[a]:e[t];i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each(["top","left"],function(e,n){E.cssHooks[n]=Ze(y.pixelPosition,function(e,t){if(t)return t=Qe(e,n),_e.test(t)?E(e).position()[n]+"px":t})}),E.each({Height:"height",Width:"width"},function(s,o){E.each({padding:"inner"+s,content:o,"":"outer"+s},function(i,r){E.fn[r]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),a=i||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,n){var i;return m(e)?0===r.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+s],i["scroll"+s],e.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?E.css(e,t,a):E.style(e,t,n,a)},o,n?e:void 0,n)}})}),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var rn=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var n,i,a;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return i=o.call(arguments,2),(a=function(){return e.apply(t||this,i.concat(o.call(arguments)))}).guid=e.guid=e.guid||E.guid++,a},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=k,E.isFunction=b,E.isWindow=m,E.camelCase=_,E.type=w,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(rn,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return E});var sn=C.jQuery,on=C.$;return E.noConflict=function(e){return C.$===E&&(C.$=on),e&&C.jQuery===E&&(C.jQuery=sn),E},void 0===e&&(C.jQuery=C.$=E),E}),function(l,u,m,v){"use strict";if(l.console=l.console||{info:function(e){}},m)if(m.fn.fancybox)console.info("fancyBox already initialized");else{var e,t,n,i,a={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:m.noop,beforeLoad:m.noop,afterLoad:m.noop,beforeShow:m.noop,afterShow:m.noop,beforeClose:m.noop,afterClose:m.noop,onActivate:m.noop,onDeactivate:m.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},r=m(l),s=m(u),o=0,p=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},c=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},d=function(){var e,t=u.createElement("fakeelement"),n={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in n)if(t.style[e]!==v)return n[e];return"transitionend"}(),f=function(e){return e&&e.length&&e[0].offsetHeight},h=function(e,t){var n=m.extend(!0,{},e,t);return m.each(t,function(e,t){m.isArray(t)&&(n[e]=t)}),n},g=function(e,t,n){var i=this;i.opts=h({index:n},m.fancybox.defaults),m.isPlainObject(t)&&(i.opts=h(i.opts,t)),m.fancybox.isMobile&&(i.opts=h(i.opts,i.opts.mobile)),i.id=i.opts.id||++o,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(e),i.group.length&&i.init()};m.extend(g.prototype,{init:function(){var t,n,i=this,a=i.group[i.currIndex].opts;a.closeExisting&&m.fancybox.close(!0),m("body").addClass("fancybox-active"),!m.fancybox.getInstance()&&!1!==a.hideScrollbar&&!m.fancybox.isMobile&&u.body.scrollHeight>l.innerHeight&&(m("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-u.documentElement.clientWidth)+"px;}</style>"),m("body").addClass("compensate-for-scrollbar")),n="",m.each(a.buttons,function(e,t){n+=a.btnTpl[t]||""}),t=m(i.translate(i,a.baseTpl.replace("{{buttons}}",n).replace("{{arrows}}",a.btnTpl.arrowLeft+a.btnTpl.arrowRight))).attr("id","fancybox-container-"+i.id).addClass(a.baseClass).data("FancyBox",i).appendTo(a.parentEl),i.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){i.$refs[e]=t.find(".fancybox-"+e)}),i.trigger("onInit"),i.activate(),i.jumpTo(i.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){return n[t]===v?e:n[t]})},addContent:function(e){var t,c=this,n=m.makeArray(e);m.each(n,function(e,t){var n,i,a,r,s,o={},l={};m.isPlainObject(t)?l=(o=t).opts||t:"object"===m.type(t)&&m(t).length?(l=(n=m(t)).data()||{},(l=m.extend(!0,{},l,l.options)).$orig=n,o.src=c.opts.src||l.src||n.attr("href"),o.type||o.src||(o.type="inline",o.src=t)):o={type:"html",src:t+""},o.opts=m.extend(!0,{},c.opts,l),m.isArray(l.buttons)&&(o.opts.buttons=l.buttons),m.fancybox.isMobile&&o.opts.mobile&&(o.opts=h(o.opts,o.opts.mobile)),i=o.type||o.opts.type,r=o.src||"",!i&&r&&((a=r.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(i="video",o.opts.video.format||(o.opts.video.format="video/"+("ogv"===a[1]?"ogg":a[1]))):r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?i="image":r.match(/\.(pdf)((\?|#).*)?$/i)?(i="iframe",o=m.extend(!0,o,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===r.charAt(0)&&(i="inline")),i?o.type=i:c.trigger("objectNeedsType",o),o.contentType||(o.contentType=-1<m.inArray(o.type,["html","inline","ajax"])?"html":o.type),o.index=c.group.length,"auto"==o.opts.smallBtn&&(o.opts.smallBtn=-1<m.inArray(o.type,["html","inline","ajax"])),"auto"===o.opts.toolbar&&(o.opts.toolbar=!o.opts.smallBtn),o.$thumb=o.opts.$thumb||null,o.opts.$trigger&&o.index===c.opts.index&&(o.$thumb=o.opts.$trigger.find("img:first"),o.$thumb.length&&(o.opts.$orig=o.opts.$trigger)),o.$thumb&&o.$thumb.length||!o.opts.$orig||(o.$thumb=o.opts.$orig.find("img:first")),o.$thumb&&!o.$thumb.length&&(o.$thumb=null),o.thumb=o.opts.thumb||(o.$thumb?o.$thumb[0].src:null),"function"===m.type(o.opts.caption)&&(o.opts.caption=o.opts.caption.apply(t,[c,o])),"function"===m.type(c.opts.caption)&&(o.opts.caption=c.opts.caption.apply(t,[c,o])),o.opts.caption instanceof m||(o.opts.caption=o.opts.caption===v?"":o.opts.caption+""),"ajax"===o.type&&1<(s=r.split(/\s+/,2)).length&&(o.src=s.shift(),o.opts.filter=s.shift()),o.opts.modal&&(o.opts=m.extend(!0,o.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),c.group.push(o)}),Object.keys(c.slides).length&&(c.updateControls(),(t=c.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),r.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(i.requestId&&c(i.requestId),i.requestId=p(function(){i.update(e)})):(i.current&&"iframe"===i.current.type&&i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update(e)},m.fancybox.isMobile?600:250))}),s.on("keydown.fb",function(e){var t=(m.fancybox?m.fancybox.getInstance():null).current,n=e.keyCode||e.which;if(9!=n){if(!(!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||m(e.target).is("input,textarea,video,audio,select")))return 8===n||27===n?(e.preventDefault(),void i.close(e)):37===n||38===n?(e.preventDefault(),void i.previous()):39===n||40===n?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,n)}else t.opts.trapFocus&&i.focus(e)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,s.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=l.setInterval(function(){i.idleSecondsCounter++,i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&!i.isDragging&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){r.off("orientationchange.fb resize.fb"),s.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,i){var t,n,a,r,s,o,l,c,d,u=this,p=u.group.length;if(!(u.isDragging||u.isClosing||u.isAnimating&&u.firstRun)){if(e=parseInt(e,10),!(a=u.current?u.current.opts.loop:u.opts.loop)&&(e<0||p<=e))return!1;if(t=u.firstRun=!Object.keys(u.slides).length,s=u.current,u.prevIndex=u.currIndex,u.prevPos=u.currPos,r=u.createSlide(e),1<p&&((a||r.index<p-1)&&u.createSlide(e+1),(a||0<r.index)&&u.createSlide(e-1)),u.current=r,u.currIndex=r.index,u.currPos=r.pos,u.trigger("beforeShow",t),u.updateControls(),r.forcedDuration=v,m.isNumeric(i)?r.forcedDuration=i:i=r.opts[t?"animationDuration":"transitionDuration"],i=parseInt(i,10),n=u.isMoved(r),r.$slide.addClass("fancybox-slide--current"),t)return r.opts.animationEffect&&i&&u.$refs.container.css("transition-duration",i+"ms"),u.$refs.container.addClass("fancybox-is-open").trigger("focus"),u.loadSlide(r),void u.preload("image");o=m.fancybox.getTranslate(s.$slide),l=m.fancybox.getTranslate(u.$refs.stage),m.each(u.slides,function(e,t){m.fancybox.stop(t.$slide,!0)}),s.pos!==r.pos&&(s.isComplete=!1),s.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),n?(d=o.left-(s.pos*o.width+s.pos*s.opts.gutter),m.each(u.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var n=t.pos*o.width+t.pos*t.opts.gutter;m.fancybox.setTranslate(t.$slide,{top:0,left:n-l.left+d}),t.pos!==r.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>r.pos?"next":"previous")),f(t.$slide),m.fancybox.animate(t.$slide,{top:0,left:(t.pos-r.pos)*o.width+(t.pos-r.pos)*t.opts.gutter},i,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===u.currPos&&u.complete()})})):i&&r.opts.transitionEffect&&(c="fancybox-animated fancybox-fx-"+r.opts.transitionEffect,s.$slide.addClass("fancybox-slide--"+(s.pos>r.pos?"next":"previous")),m.fancybox.animate(s.$slide,c,i,function(){s.$slide.removeClass(c).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),r.isLoaded?u.revealContent(r):u.loadSlide(r),u.preload("image")}},createSlide:function(e){var t,n,i=this;return n=(n=e%i.group.length)<0?i.group.length+n:n,!i.slides[e]&&i.group[n]&&(t=m('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage),i.slides[e]=m.extend(!0,{},i.group[n],{pos:e,$slide:t,isLoaded:!1}),i.updateSlide(i.slides[e])),i.slides[e]},scaleToActual:function(e,t,n){var i,a,r,s,o,l=this,c=l.current,d=c.$content,u=m.fancybox.getTranslate(c.$slide).width,p=m.fancybox.getTranslate(c.$slide).height,f=c.width,h=c.height;l.isAnimating||l.isMoved()||!d||"image"!=c.type||!c.isLoaded||c.hasError||(l.isAnimating=!0,m.fancybox.stop(d),e=e===v?.5*u:e,t=t===v?.5*p:t,(i=m.fancybox.getTranslate(d)).top-=m.fancybox.getTranslate(c.$slide).top,i.left-=m.fancybox.getTranslate(c.$slide).left,s=f/i.width,o=h/i.height,a=.5*u-.5*f,r=.5*p-.5*h,u<f&&(0<(a=i.left*s-(e*s-e))&&(a=0),a<u-f&&(a=u-f)),p<h&&(0<(r=i.top*o-(t*o-t))&&(r=0),r<p-h&&(r=p-h)),l.updateCursor(f,h),m.fancybox.animate(d,{top:r,left:a,scaleX:s,scaleY:o},n||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(e){var t,n=this,i=n.current,a=i.$content;n.isAnimating||n.isMoved()||!a||"image"!=i.type||!i.isLoaded||i.hasError||(n.isAnimating=!0,m.fancybox.stop(a),t=n.getFitPos(i),n.updateCursor(t.width,t.height),m.fancybox.animate(a,{top:t.top,left:t.left,scaleX:t.width/a.width(),scaleY:t.height/a.height()},e||366,function(){n.isAnimating=!1}))},getFitPos:function(e){var t,n,i,a,r=e.$content,s=e.$slide,o=e.width||e.opts.width,l=e.height||e.opts.height,c={};return!!(e.isLoaded&&r&&r.length)&&(t=m.fancybox.getTranslate(this.$refs.stage).width,n=m.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(s.css("paddingLeft"))+parseFloat(s.css("paddingRight"))+parseFloat(r.css("marginLeft"))+parseFloat(r.css("marginRight")),n-=parseFloat(s.css("paddingTop"))+parseFloat(s.css("paddingBottom"))+parseFloat(r.css("marginTop"))+parseFloat(r.css("marginBottom")),o&&l||(o=t,l=n),t-.5<(o*=i=Math.min(1,t/o,n/l))&&(o=t),n-.5<(l*=i)&&(l=n),"image"===e.type?(c.top=Math.floor(.5*(n-l))+parseFloat(s.css("paddingTop")),c.left=Math.floor(.5*(t-o))+parseFloat(s.css("paddingLeft"))):"video"===e.contentType&&(o/(a=e.opts.width&&e.opts.height?o/l:e.opts.ratio||16/9)<l?l=o/a:l*a<o&&(o=l*a)),c.width=o,c.height=l,c)},update:function(n){var i=this;m.each(i.slides,function(e,t){i.updateSlide(t,n)})},updateSlide:function(e,t){var n=this,i=e&&e.$content,a=e.width||e.opts.width,r=e.height||e.opts.height,s=e.$slide;n.adjustCaption(e),i&&(a||r||"video"===e.contentType)&&!e.hasError&&(m.fancybox.stop(i),m.fancybox.setTranslate(i,n.getFitPos(e)),e.pos===n.currPos&&(n.isAnimating=!1,n.updateCursor())),n.adjustLayout(e),s.length&&(s.trigger("refresh"),e.pos===n.currPos&&n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",s.get(0).scrollHeight>s.get(0).clientHeight)),n.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,n=t.current,i=n.$slide;!t.isClosing&&n&&(i.siblings().css({transform:"",opacity:""}),i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),m.fancybox.animate(i,{top:0,left:0,opacity:1},e===v?0:e,function(){i.css({transform:"",opacity:""}),n.isComplete||t.complete()},!1))},isMoved:function(e){var t,n,i=e||this.current;return!!i&&(n=m.fancybox.getTranslate(this.$refs.stage),t=m.fancybox.getTranslate(i.$slide),!i.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(t.top-n.top)||.5<Math.abs(t.left-n.left)))},updateCursor:function(e,t){var n,i,a=this,r=a.current,s=a.$refs.container;r&&!a.isClosing&&a.Guestures&&(s.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),i=!!(n=a.canPan(e,t))||a.isZoomable(),s.toggleClass("fancybox-is-zoomable",i),m("[data-fancybox-zoom]").prop("disabled",!i),n?s.addClass("fancybox-can-pan"):i&&("zoom"===r.opts.clickContent||m.isFunction(r.opts.clickContent)&&"zoom"==r.opts.clickContent(r))?s.addClass("fancybox-can-zoomIn"):r.opts.touch&&(r.opts.touch.vertical||1<a.group.length)&&"video"!==r.contentType&&s.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var n=!1,i=this.current,a=i.$content;return e!==v&&t!==v?n=e<i.width&&t<i.height:a&&(n=(n=m.fancybox.getTranslate(a)).width<i.width&&n.height<i.height),n},canPan:function(e,t){var n=this.current,i=null,a=!1;return"image"===n.type&&(n.isComplete||e&&t)&&!n.hasError&&(a=this.getFitPos(n),e!==v&&t!==v?i={width:e,height:t}:n.isComplete&&(i=m.fancybox.getTranslate(n.$content)),i&&a&&(a=1.5<Math.abs(i.width-a.width)||1.5<Math.abs(i.height-a.height))),a},loadSlide:function(n){var e,t,i,a=this;if(!n.isLoading&&!n.isLoaded){if(!(n.isLoading=!0)===a.trigger("beforeLoad",n))return n.isLoading=!1;switch(e=n.type,(t=n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass),e){case"image":a.setImage(n);break;case"iframe":a.setIframe(n);break;case"html":a.setContent(n,n.src||n.content);break;case"video":a.setContent(n,n.opts.video.tpl.replace(/\{\{src\}\}/gi,n.src).replace("{{format}}",n.opts.videoFormat||n.opts.video.format||"").replace("{{poster}}",n.thumb||""));break;case"inline":m(n.src).length?a.setContent(n,m(n.src)):a.setError(n);break;case"ajax":a.showLoading(n),i=m.ajax(m.extend({},n.opts.ajax.settings,{url:n.src,success:function(e,t){"success"===t&&a.setContent(n,e)},error:function(e,t){e&&"abort"!==t&&a.setError(n)}})),t.one("onReset",function(){i.abort()});break;default:a.setError(n)}return!0}},setImage:function(t){var e,n=this;setTimeout(function(){var e=t.$image;n.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||n.showLoading(t)},50),n.checkSrcset(t),t.$content=m('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=u.createElement("img")).onerror=function(){m(this).remove(),t.$ghost=null},e.onload=function(){n.afterLoad(t)},t.$ghost=m(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),n.setBigImage(t)},checkSrcset:function(e){var t,n,i,a,r=e.opts.srcset||e.opts.image.srcset;if(r){i=l.devicePixelRatio||1,a=l.innerWidth*i,(n=r.split(",").map(function(e){var i={};return e.trim().split(/\s+/).forEach(function(e,t){var n=parseInt(e.substring(0,e.length-1),10);if(0===t)return i.url=e;n&&(i.value=n,i.postfix=e[e.length-1])}),i})).sort(function(e,t){return e.value-t.value});for(var s=0;s<n.length;s++){var o=n[s];if("w"===o.postfix&&o.value>=a||"x"===o.postfix&&o.value>=i){t=o;break}}!t&&n.length&&(t=n[n.length-1]),t&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=r)}},setBigImage:function(t){var n=this,e=u.createElement("img"),i=m(e);t.$image=i.one("error",function(){n.setError(t)}).one("load",function(){var e;t.$ghost||(n.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),n.afterLoad(t)),n.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<r.width()/r.height()?"100":Math.round(t.width/t.height*100))+"vw"),i.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!n.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),n.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&i.naturalWidth&&i.naturalHeight?i.trigger("load"):e.error&&i.trigger("error")},resolveImageSlideSize:function(e,t,n){var i=parseInt(e.opts.width,10),a=parseInt(e.opts.height,10);e.width=t,e.height=n,0<i&&(e.width=i,e.height=Math.floor(i*n/t)),0<a&&(e.width=Math.floor(a*t/n),e.height=a)},setIframe:function(a){var r,t=this,s=a.opts.iframe,o=a.$slide;a.$content=m('<div class="fancybox-content'+(s.preload?" fancybox-is-hidden":"")+'"></div>').css(s.css).appendTo(o),o.addClass("fancybox-slide--"+a.contentType),a.$iframe=r=m(s.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(s.attr).appendTo(a.$content),s.preload?(t.showLoading(a),r.on("load.fb error.fb",function(e){this.isReady=1,a.$slide.trigger("refresh"),t.afterLoad(a)}),o.on("refresh.fb",function(){var e,t=a.$content,n=s.css.width,i=s.css.height;if(1===r[0].isReady){try{e=r.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(o.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),n===v&&(n=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",n||"").css("max-width",""),i===v&&(i=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",i||""),o.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(a),r.attr("src",a.src),o.one("onReset",function(){try{m(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}m(this).off("refresh.fb").empty(),a.isLoaded=!1,a.isRevealed=!1})},setContent:function(e,t){var n;this.isClosing||(this.hideLoading(e),e.$content&&m.fancybox.stop(e.$content),e.$slide.empty(),(n=t)&&n.hasOwnProperty&&n instanceof m&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=m("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===m.type(t)&&(t=m("<div>").append(m.trim(t)).contents()),e.opts.filter&&(t=m("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){m(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(m(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),m(t).appendTo(e.$slide),m(t).is("video,audio")&&(m(t).addClass("fancybox-video"),m(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||m(t).attr("width"),e.opts.height=e.opts.height||m(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=m(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=m(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&m('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.adjustCaption(e),t.adjustLayout(e),e.pos===t.currPos&&t.updateCursor(),t.revealContent(e))},adjustCaption:function(e){var t,n=this,i=e||n.current,a=i.opts.caption,r=i.opts.preventCaptionOverlap,s=n.$refs.caption,o=!1;s.toggleClass("fancybox-caption--separate",r),r&&a&&a.length&&(i.pos!==n.currPos?((t=s.clone().appendTo(s.parent())).children().eq(0).empty().html(a),o=t.outerHeight(!0),t.empty().remove()):n.$caption&&(o=n.$caption.outerHeight(!0)),i.$slide.css("padding-bottom",o||""))},adjustLayout:function(e){var t,n,i,a,r=e||this.current;r.isLoaded&&!0!==r.opts.disableLayoutFix&&(r.$content.css("margin-bottom",""),r.$content.outerHeight()>r.$slide.height()+.5&&(i=r.$slide[0].style["padding-bottom"],a=r.$slide.css("padding-bottom"),0<parseFloat(a)&&(t=r.$slide[0].scrollHeight,r.$slide.css("padding-bottom",0),Math.abs(t-r.$slide[0].scrollHeight)<1&&(n=a),r.$slide.css("padding-bottom",i))),r.$content.css("margin-bottom",n))},revealContent:function(e){var t,n,i,a,r=this,s=e.$slide,o=!1,l=!1,c=r.isMoved(e),d=e.isRevealed;return e.isRevealed=!0,t=e.opts[r.firstRun?"animationEffect":"transitionEffect"],i=e.opts[r.firstRun?"animationDuration":"transitionDuration"],i=parseInt(e.forcedDuration===v?i:e.forcedDuration,10),!c&&e.pos===r.currPos&&i||(t=!1),"zoom"===t&&(e.pos===r.currPos&&i&&"image"===e.type&&!e.hasError&&(l=r.getThumbPos(e))?o=r.getFitPos(e):t="fade"),"zoom"===t?(r.isAnimating=!0,o.scaleX=o.width/l.width,o.scaleY=o.height/l.height,"auto"==(a=e.opts.zoomOpacity)&&(a=.1<Math.abs(e.width/e.height-l.width/l.height)),a&&(l.opacity=.1,o.opacity=1),m.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),f(e.$content),void m.fancybox.animate(e.$content,o,i,function(){r.isAnimating=!1,r.complete()})):(r.updateSlide(e),t?(m.fancybox.stop(s),n="fancybox-slide--"+(e.pos>=r.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,s.addClass(n).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),f(s),"image"!==e.type&&e.$content.hide().show(0),void m.fancybox.animate(s,"fancybox-slide--current",i,function(){s.removeClass(n).css({transform:"",opacity:""}),e.pos===r.currPos&&r.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),d||!c||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),void(e.pos===r.currPos&&r.complete())))},getThumbPos:function(e){var t,n,i,a,r,s,o,l,c,d=e.$thumb;return!!(d&&(o=d[0])&&o.ownerDocument===u&&(m(".fancybox-container").css("pointer-events","none"),l={x:o.getBoundingClientRect().left+o.offsetWidth/2,y:o.getBoundingClientRect().top+o.offsetHeight/2},c=u.elementFromPoint(l.x,l.y)===o,m(".fancybox-container").css("pointer-events",""),c))&&(n=m.fancybox.getTranslate(d),i=parseFloat(d.css("border-top-width")||0),a=parseFloat(d.css("border-right-width")||0),r=parseFloat(d.css("border-bottom-width")||0),s=parseFloat(d.css("border-left-width")||0),t={top:n.top+i,left:n.left+s,width:n.width-a-s,height:n.height-i-r,scaleX:1,scaleY:1},0<n.width&&0<n.height&&t)},complete:function(){var e,n=this,t=n.current,i={};!n.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),n.preload("inline"),f(t.$slide),t.$slide.addClass("fancybox-slide--complete"),m.each(n.slides,function(e,t){t.pos>=n.currPos-1&&t.pos<=n.currPos+1?i[t.pos]=t:t&&(m.fancybox.stop(t.$slide),t.$slide.off().remove())}),n.slides=i),n.isAnimating=!1,n.updateCursor(),n.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),n.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):n.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,n,i=this;i.group.length<2||(n=i.slides[i.currPos+1],(t=i.slides[i.currPos-1])&&t.type===e&&i.loadSlide(t),n&&n.type===e&&i.loadSlide(n))},focus:function(e,t){var n,i,a=this,r=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");a.isClosing||((n=(n=!e&&a.current&&a.current.isComplete?a.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):a.$refs.container.find("*:visible")).filter(r).filter(function(){return"hidden"!==m(this).css("visibility")&&!m(this).hasClass("disabled")})).length?(i=n.index(u.activeElement),e&&e.shiftKey?(i<0||0==i)&&(e.preventDefault(),n.eq(n.length-1).trigger("focus")):(i<0||i==n.length-1)&&(e&&e.preventDefault(),n.eq(0).trigger("focus"))):a.$refs.container.trigger("focus"))},activate:function(){var t=this;m(".fancybox-container").each(function(){var e=m(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function n(){d.cleanUp(e)}var i,a,r,s,o,l,c,d=this,u=d.current;return!d.isClosing&&(!(d.isClosing=!0)===d.trigger("beforeClose",e)?(d.isClosing=!1,p(function(){d.update()}),!1):(d.removeEvents(),r=u.$content,i=u.opts.animationEffect,a=m.isNumeric(t)?t:i?u.opts.animationDuration:0,u.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?m.fancybox.stop(u.$slide):i=!1,u.$slide.siblings().trigger("onReset").remove(),a&&d.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",a+"ms"),d.hideLoading(u),d.hideControls(!0),d.updateCursor(),"zoom"!==i||r&&a&&"image"===u.type&&!d.isMoved()&&!u.hasError&&(c=d.getThumbPos(u))||(i="fade"),"zoom"===i?(m.fancybox.stop(r),l={top:(s=m.fancybox.getTranslate(r)).top,left:s.left,scaleX:s.width/c.width,scaleY:s.height/c.height,width:c.width,height:c.height},"auto"==(o=u.opts.zoomOpacity)&&(o=.1<Math.abs(u.width/u.height-c.width/c.height)),o&&(c.opacity=0),m.fancybox.setTranslate(r,l),f(r),m.fancybox.animate(r,c,a,n)):i&&a?m.fancybox.animate(u.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,a,n):!0===e?setTimeout(n,a):n(),!0))},cleanUp:function(e){var t,n,i,a=this,r=a.current.opts.$orig;a.current.$slide.trigger("onReset"),a.$refs.container.empty().remove(),a.trigger("afterClose",e),a.current.opts.backFocus&&(r&&r.length&&r.is(":visible")||(r=a.$trigger),r&&r.length&&(n=l.scrollX,i=l.scrollY,r.trigger("focus"),m("html, body").scrollTop(i).scrollLeft(n))),a.current=null,(t=m.fancybox.getInstance())?t.activate():(m("body").removeClass("fancybox-active compensate-for-scrollbar"),m("#fancybox-style-noscroll").remove())},trigger:function(e,t){var n,i=Array.prototype.slice.call(arguments,1),a=this,r=t&&t.opts?t:a.current;if(r?i.unshift(r):r=a,i.unshift(a),m.isFunction(r.opts[e])&&(n=r.opts[e].apply(r,i)),!1===n)return n;"afterClose"!==e&&a.$refs?a.$refs.container.trigger(e+".fb",i):s.trigger(e+".fb",i)},updateControls:function(){var e=this,t=e.current,n=t.index,i=e.$refs.container,a=e.$refs.caption,r=t.opts.caption;t.$slide.trigger("refresh"),r&&r.length?(e.$caption=a).children().eq(0).html(r):e.$caption=null,e.hasHiddenControls||e.isIdle||e.showControls(),i.find("[data-fancybox-count]").html(e.group.length),i.find("[data-fancybox-index]").html(n+1),i.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&n<=0),i.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&n>=e.group.length-1),"image"===t.type?i.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&i.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),m(u.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.hasHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<e.group.length)).toggleClass("fancybox-show-caption",!!e.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<e.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),m.fancybox={version:"3.5.7",defaults:a,getInstance:function(e){var t=m('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),n=Array.prototype.slice.call(arguments,1);return t instanceof g&&("string"===m.type(e)?t[e].apply(t,n):"function"===m.type(e)&&e.apply(t,n),t)},open:function(e,t,n){return new g(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),s.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(e=u.createElement("div"),l.getComputedStyle&&l.getComputedStyle(e)&&l.getComputedStyle(e).getPropertyValue("transform")&&!(u.documentMode&&u.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var n="",i={};if(e&&t)return t.left===v&&t.top===v||(n=(t.left===v?e.position().left:t.left)+"px, "+(t.top===v?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==v&&t.scaleY!==v?n+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==v&&(n+=" scaleX("+t.scaleX+")"),n.length&&(i.transform=n),t.opacity!==v&&(i.opacity=t.opacity),t.width!==v&&(i.width=t.width),t.height!==v&&(i.height=t.height),e.css(i)},animate:function(t,n,i,a,r){var s,o=this;m.isFunction(i)&&(a=i,i=null),o.stop(t),s=o.getTranslate(t),t.on(d,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(o.stop(t),m.isNumeric(i)&&t.css("transition-duration",""),m.isPlainObject(n)?n.scaleX!==v&&n.scaleY!==v&&o.setTranslate(t,{top:n.top,left:n.left,width:s.width*n.scaleX,height:s.height*n.scaleY,scaleX:1,scaleY:1}):!0!==r&&t.removeClass(n),m.isFunction(a)&&a(e))}),m.isNumeric(i)&&t.css("transition-duration",i+"ms"),m.isPlainObject(n)?(n.scaleX!==v&&n.scaleY!==v&&(delete n.width,delete n.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),m.fancybox.setTranslate(t,n)):t.addClass(n),t.data("timer",setTimeout(function(){t.trigger(d)},i+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(d),e.off(d).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},m.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?m("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},y):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},y),this},s.on("click.fb-start","[data-fancybox]",y),s.on("click.fb-start","[data-fancybox-trigger]",function(e){m('[data-fancybox="'+m(this).attr("data-fancybox-trigger")+'"]').eq(m(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:m(this)})}),t=".fancybox-button",n="fancybox-focus",i=null,s.on("mousedown mouseup focus blur",t,function(e){switch(e.type){case"mousedown":i=m(this);break;case"mouseup":i=null;break;case"focusin":m(t).removeClass(n),m(this).is(i)||m(this).is("[disabled]")||m(this).addClass(n);break;case"focusout":m(t).removeClass(n)}})}function y(e,t){var n,i,a,r=[],s=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},e&&e.data&&(t=h(e.data.options,t)),n=t.$target||m(e.currentTarget).trigger("blur"),(a=m.fancybox.getInstance())&&a.$trigger&&a.$trigger.is(n)||(r=t.selector?m(t.selector):(i=n.attr("data-fancybox")||"")?(r=e.data?e.data.items:[]).length?r.filter('[data-fancybox="'+i+'"]'):m('[data-fancybox="'+i+'"]'):[n],(s=m(r).index(n))<0&&(s=0),(a=m.fancybox.open(r,t,s)).$trigger=n))}}(window,document,jQuery),function(f){"use strict";function h(n,e,t){if(n)return t=t||"","object"===f.type(t)&&(t=f.param(t,!0)),f.each(e,function(e,t){n=n.replace("$"+e,t||"")}),t.length&&(n+=(0<n.indexOf("?")?"&":"?")+t),n}var i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};f(document).on("objectNeedsType.fb",function(e,t,a){var n,r,s,o,l,c,d,u=a.src||"",p=!1;n=f.extend(!0,{},i,a.opts.media),f.each(n,function(e,t){if(s=u.match(t.matcher)){if(p=t.type,d=e,c={},t.paramPlace&&s[t.paramPlace]){"?"==(l=s[t.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var n=0;n<l.length;++n){var i=l[n].split("=",2);2==i.length&&(c[i[0]]=decodeURIComponent(i[1].replace(/\+/g," ")))}}return o=f.extend(!0,{},t.params,a.opts[e],c),u="function"===f.type(t.url)?t.url.call(this,s,o,a):h(t.url,s,o),r="function"===f.type(t.thumb)?t.thumb.call(this,s,o,a):h(t.thumb,s),"youtube"===e?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,n,i){return"&start="+((n?60*parseInt(n,10):0)+parseInt(i,10))}):"vimeo"===e&&(u=u.replace("&%23","#")),!1}}),p?(a.opts.thumb||a.opts.$thumb&&a.opts.$thumb.length||(a.opts.thumb=r),"iframe"===p&&(a.opts=f.extend(!0,a.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),f.extend(a,{type:p,src:u,origSrc:a.src,contentSource:d,contentType:"image"===p?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):u&&(a.type=a.opts.defaultType)});var a={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,n=this;this[e].loaded?setTimeout(function(){n.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){n[e].loaded=!0,n.done(e)}:t.onload=function(){n[e].loaded=!0,n.done(e)},document.body.appendChild(t))},done:function(e){var t,n;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=f.fancybox.getInstance())&&(n=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(n.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(n).on("ended",function(){t.next()}))}};f(document).on({"afterShow.fb":function(e,t,n){1<t.group.length&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&a.load(n.contentSource)}})}(jQuery),function(m,l,v){"use strict";function d(e){var t=[];for(var n in e=(e=e.originalEvent||e||m.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[n].pageX?t.push({x:e[n].pageX,y:e[n].pageY}):e[n].clientX&&t.push({x:e[n].clientX,y:e[n].clientY});return t}function g(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function c(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||v.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,n=e[0].attributes,i=n.length;t<i;t++)if("data-fancybox-"===n[t].nodeName.substr(0,14))return 1}function u(e){for(var t,n,i,a,r,s=!1;t=e.get(0),0,n=m.getComputedStyle(t)["overflow-y"],i=m.getComputedStyle(t)["overflow-x"],a=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,r=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth,!(s=a||r)&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return s}function n(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",v.proxy(t,"ontouchstart"))}var y=m.requestAnimationFrame||m.webkitRequestAnimationFrame||m.mozRequestAnimationFrame||m.oRequestAnimationFrame||function(e){return m.setTimeout(e,1e3/60)},b=m.cancelAnimationFrame||m.webkitCancelAnimationFrame||m.mozCancelAnimationFrame||m.oCancelAnimationFrame||function(e){m.clearTimeout(e)};n.prototype.destroy=function(){var e=this;e.$container.off(".fb.touch"),v(l).off(".fb.touch"),e.requestId&&(b(e.requestId),e.requestId=null),e.tapped&&(clearTimeout(e.tapped),e.tapped=null)},n.prototype.ontouchstart=function(e){var t=this,n=v(e.target),i=t.instance,a=i.current,r=a.$slide,s=a.$content,o="touchstart"==e.type;if(o&&t.$container.off("mousedown.fb.touch"),(!e.originalEvent||2!=e.originalEvent.button)&&r.length&&n.length&&!c(n)&&!c(n.parent())&&(n.is("img")||!(e.originalEvent.clientX>n[0].clientWidth+n.offset().left))){if(!a||i.isAnimating||a.$slide.hasClass("fancybox-animated"))return e.stopPropagation(),void e.preventDefault();t.realPoints=t.startPoints=d(e),t.startPoints.length&&(a.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=n,t.$content=s,t.opts=a.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=i.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(r[0].clientWidth),t.canvasHeight=Math.round(r[0].clientHeight),t.contentLastPos=null,t.contentStartPos=v.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=v.fancybox.getTranslate(r),t.stagePos=v.fancybox.getTranslate(i.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,v(l).off(".fb.touch").on(o?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",v.proxy(t,"ontouchend")).on(o?"touchmove.fb.touch":"mousemove.fb.touch",v.proxy(t,"ontouchmove")),v.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(n.is(t.$stage)||t.$stage.find(n).length)||(n.is(".fancybox-image")&&e.preventDefault(),v.fancybox.isMobile&&n.parents(".fancybox-caption").length))&&(t.isScrollable=u(n)||u(n.parent()),v.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!a.hasError||(t.canPan?(v.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===a.type&&(a.isLoaded||a.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,v.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-v(m).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-v(m).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=g(t.startPoints[0],t.startPoints[1]))))}},n.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},n.prototype.ontouchmove=function(e){var t=this;void 0===e.originalEvent.buttons||0!==e.originalEvent.buttons?t.isScrolling?t.canTap=!1:(t.newPoints=d(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=g(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=g(t.newPoints[0],t.startPoints[0],"y"),t.distance=g(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))):t.ontouchend(e)},n.prototype.onSwipe=function(e){var t,a=this,r=a.instance,n=a.isSwiping,i=a.sliderStartPos.left||0;if(!0!==n)"x"==n&&(0<a.distanceX&&(a.instance.group.length<2||0===a.instance.current.index&&!a.instance.current.opts.loop)?i+=Math.pow(a.distanceX,.8):a.distanceX<0&&(a.instance.group.length<2||a.instance.current.index===a.instance.group.length-1&&!a.instance.current.opts.loop)?i-=Math.pow(-a.distanceX,.8):i+=a.distanceX),a.sliderLastPos={top:"x"==n?0:a.sliderStartPos.top+a.distanceY,left:i},a.requestId&&(b(a.requestId),a.requestId=null),a.requestId=y(function(){a.sliderLastPos&&(v.each(a.instance.slides,function(e,t){var n=t.pos-a.instance.currPos;v.fancybox.setTranslate(t.$slide,{top:a.sliderLastPos.top,left:a.sliderLastPos.left+n*a.canvasWidth+n*t.opts.gutter})}),a.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(a.distance)){if(a.canTap=!1,r.group.length<2&&a.opts.vertical?a.isSwiping="y":r.isDragging||!1===a.opts.vertical||"auto"===a.opts.vertical&&800<v(m).width()?a.isSwiping="x":(t=Math.abs(180*Math.atan2(a.distanceY,a.distanceX)/Math.PI),a.isSwiping=45<t&&t<135?"y":"x"),"y"===a.isSwiping&&v.fancybox.isMobile&&a.isScrollable)return void(a.isScrolling=!0);r.isDragging=a.isSwiping,a.startPoints=a.newPoints,v.each(r.slides,function(e,t){var n,i;v.fancybox.stop(t.$slide),n=v.fancybox.getTranslate(t.$slide),i=v.fancybox.getTranslate(r.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===r.current.pos&&(a.sliderStartPos.top=n.top-i.top,a.sliderStartPos.left=n.left-i.left),v.fancybox.setTranslate(t.$slide,{top:n.top-i.top,left:n.left-i.left})}),r.SlideShow&&r.SlideShow.isActive&&r.SlideShow.stop()}},n.prototype.onPan=function(){var e=this;g(e.newPoints[0],e.realPoints[0])<(v.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&b(e.requestId),e.requestId=y(function(){v.fancybox.setTranslate(e.$content,e.contentLastPos)}))},n.prototype.limitMovement=function(){var e,t,n,i,a,r,s=this,o=s.canvasWidth,l=s.canvasHeight,c=s.distanceX,d=s.distanceY,u=s.contentStartPos,p=u.left,f=u.top,h=u.width,m=u.height;return a=o<h?p+c:p,r=f+d,e=Math.max(0,.5*o-.5*h),t=Math.max(0,.5*l-.5*m),n=Math.min(o-h,.5*o-.5*h),i=Math.min(l-m,.5*l-.5*m),0<c&&e<a&&(a=e-1+Math.pow(-e+p+c,.8)||0),c<0&&a<n&&(a=n+1-Math.pow(n-p-c,.8)||0),0<d&&t<r&&(r=t-1+Math.pow(-t+f+d,.8)||0),d<0&&r<i&&(r=i+1-Math.pow(i-f-d,.8)||0),{top:r,left:a}},n.prototype.limitPosition=function(e,t,n,i){var a=this.canvasWidth,r=this.canvasHeight;return e=a<n?(e=0<e?0:e)<a-n?a-n:e:Math.max(0,a/2-n/2),{top:t=r<i?(t=0<t?0:t)<r-i?r-i:t:Math.max(0,r/2-i/2),left:e}},n.prototype.onZoom=function(){var e=this,t=e.contentStartPos,n=t.width,i=t.height,a=t.left,r=t.top,s=g(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,o=Math.floor(n*s),l=Math.floor(i*s),c=(n-o)*e.percentageOfImageAtPinchPointX,d=(i-l)*e.percentageOfImageAtPinchPointY,u=(e.newPoints[0].x+e.newPoints[1].x)/2-v(m).scrollLeft(),p=(e.newPoints[0].y+e.newPoints[1].y)/2-v(m).scrollTop(),f=u-e.centerPointStartX,h={top:r+(d+(p-e.centerPointStartY)),left:a+(c+f),scaleX:s,scaleY:s};e.canTap=!1,e.newWidth=o,e.newHeight=l,e.contentLastPos=h,e.requestId&&b(e.requestId),e.requestId=y(function(){v.fancybox.setTranslate(e.$content,e.contentLastPos)})},n.prototype.ontouchend=function(e){var t=this,n=t.isSwiping,i=t.isPanning,a=t.isZooming,r=t.isScrolling;if(t.endPoints=d(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),v(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(b(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,i?t.endPanning():a?t.endZooming():t.endSwiping(n,r)},n.prototype.endSwiping=function(e,t){var n=this,i=!1,a=n.instance.group.length,r=Math.abs(n.distanceX),s="x"==e&&1<a&&(130<n.dMs&&10<r||50<r);n.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(n.distanceY)?(v.fancybox.animate(n.instance.current.$slide,{top:n.sliderStartPos.top+n.distanceY+150*n.velocityY,opacity:0},200),i=n.instance.close(!0,250)):s&&0<n.distanceX?i=n.instance.previous(300):s&&n.distanceX<0&&(i=n.instance.next(300)),!1!==i||"x"!=e&&"y"!=e||n.instance.centerSlide(200),n.$container.removeClass("fancybox-is-sliding")},n.prototype.endPanning=function(){var e,t,n,i=this;i.contentLastPos&&(t=!1===i.opts.momentum||350<i.dMs?(e=i.contentLastPos.left,i.contentLastPos.top):(e=i.contentLastPos.left+500*i.velocityX,i.contentLastPos.top+500*i.velocityY),(n=i.limitPosition(e,t,i.contentStartPos.width,i.contentStartPos.height)).width=i.contentStartPos.width,n.height=i.contentStartPos.height,v.fancybox.animate(i.$content,n,366))},n.prototype.endZooming=function(){var e,t,n,i,a=this,r=a.instance.current,s=a.newWidth,o=a.newHeight;a.contentLastPos&&(e=a.contentLastPos.left,i={top:t=a.contentLastPos.top,left:e,width:s,height:o,scaleX:1,scaleY:1},v.fancybox.setTranslate(a.$content,i),s<a.canvasWidth&&o<a.canvasHeight?a.instance.scaleToFit(150):s>r.width||o>r.height?a.instance.scaleToActual(a.centerPointStartX,a.centerPointStartY,150):(n=a.limitPosition(e,t,s,o),v.fancybox.animate(a.$content,n,150)))},n.prototype.onTap=function(n){function e(e){var t=s.opts[e];if(v.isFunction(t)&&(t=t.apply(r,[s,n])),t)switch(t){case"close":r.close(i.startEvent);break;case"toggleControls":r.toggleControls();break;case"next":r.next();break;case"nextOrClose":1<r.group.length?r.next():r.close(i.startEvent);break;case"zoom":"image"==s.type&&(s.isLoaded||s.$ghost)&&(r.canPan()?r.scaleToFit():r.isScaledDown()?r.scaleToActual(l,c):r.group.length<2&&r.close(i.startEvent))}}var t,i=this,a=v(n.target),r=i.instance,s=r.current,o=n&&d(n)||i.startPoints,l=o[0]?o[0].x-v(m).scrollLeft()-i.stagePos.left:0,c=o[0]?o[0].y-v(m).scrollTop()-i.stagePos.top:0;if((!n.originalEvent||2!=n.originalEvent.button)&&(a.is("img")||!(l>a[0].clientWidth+a.offset().left))){if(a.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(a.is(".fancybox-slide"))t="Slide";else{if(!r.current.$content||!r.current.$content.find(a).addBack().filter(a).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,50<Math.abs(l-i.tapX)||50<Math.abs(c-i.tapY))return this;e("dblclick"+t)}else i.tapX=l,i.tapY=c,s.opts["dblclick"+t]&&s.opts["dblclick"+t]!==s.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,r.isAnimating||e("click"+t)},500):e("click"+t);return this}},v(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new n(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(s,o){"use strict";o.extend(!0,o.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function n(e){this.instance=e,this.init()}o.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,n=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!n?e.$button.hide():n.progress&&(e.$progress=o('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this,n=t.instance,i=n.current;i&&(!0===e||i.opts.loop||n.currIndex<n.group.length-1)?t.isActive&&"video"!==i.contentType&&(t.$progress&&o.fancybox.animate(t.$progress.show(),{scaleX:1},i.opts.slideShow.speed),t.timer=setTimeout(function(){n.current.opts.loop||n.current.index!=n.group.length-1?n.next():n.jumpTo(0)},i.opts.slideShow.speed)):(t.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this,t=e.instance.current;t&&(e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.isActive=!0,t.isComplete&&e.set(!0),e.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1,e.instance.trigger("onSlideShowChange",!1),e.$progress&&e.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),o(s).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var a=t&&t.SlideShow;i?a&&n.opts.slideShow.autoStart&&a.start():a&&a.isActive&&a.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(e,t,n,i,a){var r=t&&t.SlideShow;!r||!n.opts.slideShow||80!==a&&32!==a||o(s.activeElement).is("button,a,input")||(i.preventDefault(),r.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),o(s).on("visibilitychange",function(){var e=o.fancybox.getInstance(),t=e&&e.SlideShow;t&&t.isActive&&(s.hidden?t.clear():t.set())})}(document,jQuery),function(r,n){"use strict";var i=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},n=0;n<e.length;n++){var i=e[n];if(i&&i[1]in r){for(var a=0;a<i.length;a++)t[e[0][a]]=i[a];return t}}return!1}();if(i){var a={request:function(e){(e=e||r.documentElement)[i.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){r[i.exitFullscreen]()},toggle:function(e){e=e||r.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(r[i.fullscreenElement])},enabled:function(){return Boolean(r[i.fullscreenEnabled])}};n.extend(!0,n.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),n(r).on(i.fullscreenchange,function(){var e=a.isFullscreen(),t=n.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.isAnimating=!1,t.update(!0,!0,0),t.isComplete||t.complete()),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})}n(r).on({"onInit.fb":function(e,t){i?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),a.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&a.request(),t.FullScreen=a):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,n,i,a){t&&t.FullScreen&&70===a&&(i.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&a.exit()}})}(document,jQuery),function(e,r){"use strict";var s="fancybox-thumbs",o=s+"-active";r.fancybox.defaults=r.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},r.fancybox.defaults);function i(e){this.init(e)}r.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,n=e.group,i=0;t.instance=e,t.opts=n[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var a=0,r=n.length;a<r&&(n[a].thumb&&i++,!(1<i));a++);1<i&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var n,e=this,t=e.instance,i=e.opts.parentEl,a=[];e.$grid||(e.$grid=r('<div class="'+s+" "+s+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(i).addBack().filter(i)),e.$grid.on("click","a",function(){t.jumpTo(r(this).attr("data-index"))})),e.$list||(e.$list=r('<div class="'+s+'__list">').appendTo(e.$grid)),r.each(t.group,function(e,t){(n=t.thumb)||"image"!==t.type||(n=t.src),a.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(n&&n.length?' style="background-image:url('+n+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=a.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,n,i=this,a=i.$list,r=i.$grid;i.instance.current&&(n=(t=a.children().removeClass(o).filter('[data-index="'+i.instance.current.index+'"]').addClass(o)).position(),"y"===i.opts.axis&&(n.top<0||n.top>a.height()-t.outerHeight())?a.stop().animate({scrollTop:a.scrollTop()+n.top},e):"x"===i.opts.axis&&(n.left<r.scrollLeft()||n.left>r.scrollLeft()+(r.width()-t.outerWidth()))&&a.parent().stop().animate({scrollLeft:n.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),r(e).on({"onInit.fb":function(e,t){var n;t&&!t.Thumbs&&(n=new i(t)).isActive&&!0===n.opts.autoStart&&n.show()},"beforeShow.fb":function(e,t,n,i){var a=t&&t.Thumbs;a&&a.isVisible&&a.focus(i?0:250)},"afterKeydown.fb":function(e,t,n,i,a){var r=t&&t.Thumbs;r&&r.isActive&&71===a&&(i.preventDefault(),r.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,jQuery),function(e,r){"use strict";r.extend(!0,r.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),r(e).on("click","[data-fancybox-share]",function(){var e,t,n,i=r.fancybox.getInstance(),a=i.current||null;a&&("function"===r.type(a.opts.share.url)&&(e=a.opts.share.url.apply(a,[i,a])),t=a.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===a.type?encodeURIComponent(a.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return n[e]}))).replace(/\{\{descr\}\}/g,i.$caption?encodeURIComponent(i.$caption.text()):""),r.fancybox.open({src:i.translate(i,t),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){i.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(r,s,a){"use strict";function o(){var e=r.location.hash.substr(1),t=e.split("-"),n=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:n<1?1:n,gallery:t.join("-")}}function t(e){""!==e.gallery&&a("[data-fancybox='"+a.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function l(e){var t,n;return!!e&&(""!==(n=(t=e.current?e.current.opts:e.opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&n)}a.escapeSelector||(a.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),a(function(){!1!==a.fancybox.defaults.hash&&(a(s).on({"onInit.fb":function(e,t){var n,i;!1!==t.group[t.currIndex].opts.hash&&(n=o(),(i=l(t))&&n.gallery&&i==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(e,t,n,i){var a;n&&!1!==n.opts.hash&&(a=l(t))&&(t.currentHash=a+(1<t.group.length?"-"+(n.index+1):""),r.location.hash!=="#"+t.currentHash&&(i&&!t.origHash&&(t.origHash=r.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in r.history?(r.history[i?"pushState":"replaceState"]({},s.title,r.location.pathname+r.location.search+"#"+t.currentHash),i&&(t.hasCreatedHistory=!0)):r.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,n){n&&!1!==n.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?r.history.back():t.currentHash&&("replaceState"in r.history?r.history.replaceState({},s.title,r.location.pathname+r.location.search+(t.origHash||"")):r.location.hash=t.origHash),t.currentHash=null)}}),a(r).on("hashchange.fb",function(){var e=o(),i=null;a.each(a(".fancybox-container").get().reverse(),function(e,t){var n=a(t).data("FancyBox");if(n&&n.currentHash)return i=n,!1}),i?i.currentHash===e.gallery+"-"+e.index||1===e.index&&i.currentHash==e.gallery||(i.currentHash=null,i.close()):""!==e.gallery&&t(e)}),setTimeout(function(){a.fancybox.getInstance()||t(o())},50))})}(window,document,jQuery),function(e,t){"use strict";var a=(new Date).getTime();t(e).on({"onInit.fb":function(e,i,t){i.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=i.current,n=(new Date).getTime();i.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,n-a<250||(a=n,i[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AOS=t():e.AOS=t()}(this,function(){return a={},n.m=i=[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function a(){if(0<arguments.length&&void 0!==arguments[0]&&arguments[0]&&(v=!0),v)return m=(0,f.default)(m,g),(0,p.default)(m,g.once),m}function r(){m=(0,h.default)(),a()}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},o=(i(n(1)),n(6)),l=i(o),c=i(n(7)),d=i(n(8)),u=i(n(9)),p=i(n(10)),f=i(n(11)),h=i(n(14)),m=[],v=!1,g={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1};e.exports={init:function(e){g=s(g,e),m=(0,h.default)();var t,n=document.all&&!window.atob;return!0===(t=g.disable)||"mobile"===t&&u.default.mobile()||"phone"===t&&u.default.phone()||"tablet"===t&&u.default.tablet()||"function"==typeof t&&!0===t()||n?void m.forEach(function(e,t){e.node.removeAttribute("data-aos"),e.node.removeAttribute("data-aos-easing"),e.node.removeAttribute("data-aos-duration"),e.node.removeAttribute("data-aos-delay")}):(g.disableMutationObserver||d.default.isSupported()||(console.info('\n      aos: MutationObserver is not supported on this browser,\n      code mutations observing has been disabled.\n      You may have to call "refreshHard()" by yourself.\n    '),g.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",g.easing),document.querySelector("body").setAttribute("data-aos-duration",g.duration),document.querySelector("body").setAttribute("data-aos-delay",g.delay),"DOMContentLoaded"===g.startEvent&&-1<["complete","interactive"].indexOf(document.readyState)?a(!0):"load"===g.startEvent?window.addEventListener(g.startEvent,function(){a(!0)}):document.addEventListener(g.startEvent,function(){a(!0)}),window.addEventListener("resize",(0,c.default)(a,g.debounceDelay,!0)),window.addEventListener("orientationchange",(0,c.default)(a,g.debounceDelay,!0)),window.addEventListener("scroll",(0,l.default)(function(){(0,p.default)(m,g.once)},g.throttleDelay)),g.disableMutationObserver||d.default.ready("[data-aos]",r),m)},refresh:a,refreshHard:r}},function(e,t){},,,,,function(m,e){(function(e){"use strict";function r(i,a,e){function r(e){var t=c,n=d;return c=d=void 0,m=e,p=i.apply(n,t)}function s(e){var t=e-h;return void 0===h||a<=t||t<0||g&&u<=e-m}function o(){var e,t,n=C();return s(n)?l(n):void(f=setTimeout(o,(t=a-((e=n)-h),g?T(t,u-(e-m)):t)))}function l(e){return f=void 0,n&&c?r(e):(c=d=void 0,p)}function t(){var e,t=C(),n=s(t);if(c=arguments,d=this,h=t,n){if(void 0===f)return m=e=h,f=setTimeout(o,a),v?r(e):p;if(g)return f=setTimeout(o,a),r(h)}return void 0===f&&(f=setTimeout(o,a)),p}var c,d,u,p,f,h,m=0,v=!1,g=!1,n=!0;if("function"!=typeof i)throw new TypeError(x);return a=b(a)||0,y(e)&&(v=!!e.leading,u=(g="maxWait"in e)?w(b(e.maxWait)||0,a):u,n="trailing"in e?!!e.trailing:n),t.cancel=function(){void 0!==f&&clearTimeout(f),c=h=d=f=void(m=0)},t.flush=function(){return void 0===f?p:l(C())},t}function y(e){var t=void 0===e?"undefined":n(e);return e&&("object"==t||"function"==t)}function i(e){return"symbol"==(void 0===e?"undefined":n(e))||(t=e)&&"object"==(void 0===t?"undefined":n(t))&&h.call(e)==s;var t}function b(e){if("number"==typeof e)return e;if(i(e))return a;if(y(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=y(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=c.test(e);return n||d.test(e)?u(e.slice(2),n?2:8):l.test(e)?a:+e}var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},x="Expected a function",a=NaN,s="[object Symbol]",o=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,d=/^0o[0-7]+$/i,u=parseInt,t="object"==(void 0===e?"undefined":n(e))&&e&&e.Object===Object&&e,p="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,f=t||p||Function("return this")(),h=Object.prototype.toString,w=Math.max,T=Math.min,C=function(){return f.Date.now()};m.exports=function(e,t,n){var i=!0,a=!0;if("function"!=typeof e)throw new TypeError(x);return y(n)&&(i="leading"in n?!!n.leading:i,a="trailing"in n?!!n.trailing:a),r(e,t,{leading:i,maxWait:t,trailing:a})}}).call(e,function(){return this}())},function(h,e){(function(e){"use strict";function y(e){var t=void 0===e?"undefined":n(e);return e&&("object"==t||"function"==t)}function i(e){return"symbol"==(void 0===e?"undefined":n(e))||(t=e)&&"object"==(void 0===t?"undefined":n(t))&&f.call(e)==r;var t}function b(e){if("number"==typeof e)return e;if(i(e))return a;if(y(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=y(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(s,"");var n=l.test(e);return n||c.test(e)?d(e.slice(2),n?2:8):o.test(e)?a:+e}function x(){return p.Date.now()}var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=NaN,r="[object Symbol]",s=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,c=/^0o[0-7]+$/i,d=parseInt,t="object"==(void 0===e?"undefined":n(e))&&e&&e.Object===Object&&e,u="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,p=t||u||Function("return this")(),f=Object.prototype.toString,w=Math.max,T=Math.min;h.exports=function(i,a,e){function r(e){var t=c,n=d;return c=d=void 0,m=e,p=i.apply(n,t)}function s(e){var t=e-h;return void 0===h||a<=t||t<0||g&&u<=e-m}function o(){var e,t,n=x();return s(n)?l(n):void(f=setTimeout(o,(t=a-((e=n)-h),g?T(t,u-(e-m)):t)))}function l(e){return f=void 0,n&&c?r(e):(c=d=void 0,p)}function t(){var e,t=x(),n=s(t);if(c=arguments,d=this,h=t,n){if(void 0===f)return m=e=h,f=setTimeout(o,a),v?r(e):p;if(g)return f=setTimeout(o,a),r(h)}return void 0===f&&(f=setTimeout(o,a)),p}var c,d,u,p,f,h,m=0,v=!1,g=!1,n=!0;if("function"!=typeof i)throw new TypeError("Expected a function");return a=b(a)||0,y(e)&&(v=!!e.leading,u=(g="maxWait"in e)?w(b(e.maxWait)||0,a):u,n="trailing"in e?!!e.trailing:n),t.cancel=function(){void 0!==f&&clearTimeout(f),c=h=d=f=void(m=0)},t.flush=function(){return void 0===f?p:l(x())},t}}).call(e,function(){return this}())},function(e,t){"use strict";function a(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function r(e){e&&e.forEach(function(e){var t=Array.prototype.slice.call(e.addedNodes),n=Array.prototype.slice.call(e.removedNodes);if(function e(t){var n=void 0,i=void 0;for(n=0;n<t.length;n+=1){if((i=t[n]).dataset&&i.dataset.aos)return!0;if(i.children&&e(i.children))return!0}return!1}(t.concat(n)))return s()})}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){};t.default={isSupported:function(){return!!a()},ready:function(e,t){var n=window.document,i=new(a())(r);s=t,i.observe(n.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}}},function(e,t){"use strict";function n(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(t,"__esModule",{value:!0});var i=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,a=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,r=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,s=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,o=(function(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}(l,[{key:"phone",value:function(){var e=n();return!(!i.test(e)&&!a.test(e.substr(0,4)))}},{key:"mobile",value:function(){var e=n();return!(!r.test(e)&&!s.test(e.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),l);function l(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l)}function c(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}t.default=new o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,s){var o=window.pageYOffset,l=window.innerHeight;e.forEach(function(e,t){var n,i,a,r;i=l+o,a=s,r=(n=e).node.getAttribute("data-aos-once"),i>n.position?n.node.classList.add("aos-animate"):void 0===r||"false"!==r&&(a||"true"===r)||n.node.classList.remove("aos-animate")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(12),r=(i=a)&&i.__esModule?i:{default:i};t.default=function(e,n){return e.forEach(function(e,t){e.node.classList.add("aos-init"),e.position=(0,r.default)(e.node,n.offset)}),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(13),s=(i=a)&&i.__esModule?i:{default:i};t.default=function(e,t){var n=0,i=0,a=window.innerHeight,r={offset:e.getAttribute("data-aos-offset"),anchor:e.getAttribute("data-aos-anchor"),anchorPlacement:e.getAttribute("data-aos-anchor-placement")};switch(r.offset&&!isNaN(r.offset)&&(i=parseInt(r.offset)),r.anchor&&document.querySelectorAll(r.anchor)&&(e=document.querySelectorAll(r.anchor)[0]),n=(0,s.default)(e).top,r.anchorPlacement){case"top-bottom":break;case"center-bottom":n+=e.offsetHeight/2;break;case"bottom-bottom":n+=e.offsetHeight;break;case"top-center":n+=a/2;break;case"bottom-center":n+=a/2+e.offsetHeight;break;case"center-center":n+=a/2+e.offsetHeight/2;break;case"top-top":n+=a;break;case"bottom-top":n+=e.offsetHeight+a;break;case"center-top":n+=e.offsetHeight/2+a}return r.anchorPlacement||r.offset||isNaN(t)||(i=t),n+i}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){for(var t=0,n=0;e&&!isNaN(e.offsetLeft)&&!isNaN(e.offsetTop);)t+=e.offsetLeft-("BODY"!=e.tagName?e.scrollLeft:0),n+=e.offsetTop-("BODY"!=e.tagName?e.scrollTop:0),e=e.offsetParent;return{top:n,left:t}}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){return e=e||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(e,function(e){return{node:e}})}}],n.c=a,n.p="dist/",n(0);function n(e){if(a[e])return a[e].exports;var t=a[e]={exports:{},id:e,loaded:!1};return i[e].call(t.exports,t,t.exports,n),t.loaded=!0,t.exports}var i,a}),window.Element&&!Element.prototype.closest&&(Element.prototype.closest=function(e){var t,n=(this.document||this.ownerDocument).querySelectorAll(e),i=this;do{for(t=n.length;0<=--t&&n.item(t)!==i;);}while(t<0&&(i=i.parentElement));return i}),function(){function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}"function"!=typeof window.CustomEvent&&(e.prototype=window.Event.prototype,window.CustomEvent=e)}(),function(){for(var r=0,e=["ms","moz","webkit","o"],t=0;t<e.length&&!window.requestAnimationFrame;++t)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(e,t){var n=(new Date).getTime(),i=Math.max(0,16-(n-r)),a=window.setTimeout(function(){e(n+i)},i);return r=n+i,a}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})}(),function(e,t){"function"==typeof define&&define.amd?define([],function(){return t(e)}):"object"==typeof exports?module.exports=t(e):e.SmoothScroll=t(e)}("undefined"!=typeof global?global:"undefined"!=typeof window?window:this,function(E){"use strict";function M(){var n={};return Array.prototype.forEach.call(arguments,function(e){for(var t in e){if(!e.hasOwnProperty(t))return;n[t]=e[t]}}),n}function r(e){"#"===e.charAt(0)&&(e=e.substr(1));for(var t,n=String(e),i=n.length,a=-1,r="",s=n.charCodeAt(0);++a<i;){if(0===(t=n.charCodeAt(a)))throw new InvalidCharacterError("Invalid character: the input contains U+0000.");r+=1<=t&&t<=31||127==t||0===a&&48<=t&&t<=57||1===a&&48<=t&&t<=57&&45===s?"\\"+t.toString(16)+" ":128<=t||45===t||95===t||48<=t&&t<=57||65<=t&&t<=90||97<=t&&t<=122?n.charAt(a):"\\"+n.charAt(a)}return"#"+r}function k(){return Math.max(document.body.scrollHeight,document.documentElement.scrollHeight,document.body.offsetHeight,document.documentElement.offsetHeight,document.body.clientHeight,document.documentElement.clientHeight)}function P(e,t,n){0===e&&document.body.focus(),n||(e.focus(),document.activeElement!==e&&(e.setAttribute("tabindex","-1"),e.focus(),e.style.outline="none"),E.scrollTo(0,t))}function $(e,t,n,i){if(t.emitEvents&&"function"==typeof E.CustomEvent){var a=new CustomEvent(e,{bubbles:!0,detail:{anchor:n,toggle:i}});document.dispatchEvent(a)}}var L={ignore:"[data-scroll-ignore]",header:null,topOnEmptyHash:!0,speed:500,speedAsDuration:!1,durationMax:null,durationMin:null,clip:!0,offset:0,easing:"easeInOutCubic",customEasing:null,updateURL:!0,popstate:!0,emitEvents:!0};return function(i,e){var w,a,T,C,S={cancelScroll:function(e){cancelAnimationFrame(C),C=null,e||$("scrollCancel",w)}};S.animateScroll=function(s,o,e){S.cancelScroll();var t,l=M(w||L,e||{}),c="[object Number]"===Object.prototype.toString.call(s),n=c||!s.tagName?null:s;if(c||n){var d=E.pageYOffset;l.header&&!T&&(T=document.querySelector(l.header));var i,a,u,p,f,r,h=(t=T)?parseInt(E.getComputedStyle(t).height,10)+t.offsetTop:0,m=c?s:function(e,t,n,i){var a=0;if(e.offsetParent)for(;a+=e.offsetTop,e=e.offsetParent;);return a=Math.max(a-t-n,0),i&&(a=Math.min(a,k()-E.innerHeight)),a}(n,h,parseInt("function"==typeof l.offset?l.offset(s,o):l.offset,10),l.clip),v=m-d,g=k(),y=0,b=(a=(i=l).speedAsDuration?i.speed:Math.abs(v/1e3*i.speed),i.durationMax&&a>i.durationMax?i.durationMax:i.durationMin&&a<i.durationMin?i.durationMin:parseInt(a,10)),x=function(e){var t,n,i,a,r;y+=e-(u=u||e),f=d+v*(t=p=1<(p=0===b?0:y/b)?1:p,"easeInQuad"===l.easing&&(n=t*t),"easeOutQuad"===l.easing&&(n=t*(2-t)),"easeInOutQuad"===l.easing&&(n=t<.5?2*t*t:(4-2*t)*t-1),"easeInCubic"===l.easing&&(n=t*t*t),"easeOutCubic"===l.easing&&(n=--t*t*t+1),"easeInOutCubic"===l.easing&&(n=t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1),"easeInQuart"===l.easing&&(n=t*t*t*t),"easeOutQuart"===l.easing&&(n=1- --t*t*t*t),"easeInOutQuart"===l.easing&&(n=t<.5?8*t*t*t*t:1-8*--t*t*t*t),"easeInQuint"===l.easing&&(n=t*t*t*t*t),"easeOutQuint"===l.easing&&(n=1+--t*t*t*t*t),"easeInOutQuint"===l.easing&&(n=t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t),l.customEasing&&(n=l.customEasing(t)),n||t),E.scrollTo(0,Math.floor(f)),i=f,a=m,r=E.pageYOffset,i==a||r==a||(d<a&&E.innerHeight+r)>=g?(S.cancelScroll(!0),P(s,a,c),$("scrollStop",l,s,o),C=u=null):(C=E.requestAnimationFrame(x),u=e)};0===E.pageYOffset&&E.scrollTo(0,0),r=s,c||history.pushState&&l.updateURL&&history.pushState({smoothScroll:JSON.stringify(l),anchor:r.id},document.title,r===document.documentElement?"#top":"#"+r.id),"matchMedia"in E&&E.matchMedia("(prefers-reduced-motion)").matches?P(s,Math.floor(m),!1):($("scrollStart",l,s,o),S.cancelScroll(!0),E.requestAnimationFrame(x))}};function t(e){if(!e.defaultPrevented&&!(0!==e.button||e.metaKey||e.ctrlKey||e.shiftKey)&&"closest"in e.target&&(a=e.target.closest(i))&&"a"===a.tagName.toLowerCase()&&!e.target.closest(w.ignore)&&a.hostname===E.location.hostname&&a.pathname===E.location.pathname&&/#/.test(a.href)){var t,n;try{t=r(decodeURIComponent(a.hash))}catch(e){t=r(a.hash)}if("#"===t){if(!w.topOnEmptyHash)return;n=document.documentElement}else n=document.querySelector(t);(n=n||"#top"!==t?n:document.documentElement)&&(e.preventDefault(),function(){if(history.replaceState&&w.updateURL&&!history.state){var e=E.location.hash;e=e||"",history.replaceState({smoothScroll:JSON.stringify(w),anchor:e||E.pageYOffset},document.title,e||E.location.href)}}(),S.animateScroll(n,a))}}function n(e){if(null!==history.state&&history.state.smoothScroll&&history.state.smoothScroll===JSON.stringify(w)){var t=history.state.anchor;"string"==typeof t&&t&&!(t=document.querySelector(r(history.state.anchor)))||S.animateScroll(t,null,{updateURL:!1})}}return S.destroy=function(){w&&(document.removeEventListener("click",t,!1),E.removeEventListener("popstate",n,!1),S.cancelScroll(),C=T=a=w=null)},function(){if(!("querySelector"in document&&"addEventListener"in E&&"requestAnimationFrame"in E&&"closest"in E.Element.prototype))throw"Smooth Scroll: This browser does not support the required JavaScript methods and browser APIs.";S.destroy(),w=M(L,e||{}),T=w.header?document.querySelector(w.header):null,document.addEventListener("click",t,!1),w.updateURL&&w.popstate&&E.addEventListener("popstate",n,!1)}(),S}}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).Swiper=t()}(this,function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function t(){return(t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}function i(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function a(t,n){void 0===t&&(t={}),void 0===n&&(n={}),Object.keys(n).forEach(function(e){void 0===t[e]?t[e]=n[e]:i(n[e])&&i(t[e])&&0<Object.keys(n[e]).length&&a(t[e],n[e])})}var n={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function w(){var e="undefined"!=typeof document?document:{};return a(e,n),e}var r={document:n,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function de(){var e="undefined"!=typeof window?window:{};return a(e,r),e}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t,n){return(l=function(){if("undefined"!=typeof Reflect&&Reflect.construct&&!Reflect.construct.sham){if("function"==typeof Proxy)return 1;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),1}catch(e){return}}}()?Reflect.construct:function(e,t,n){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return n&&o(a,n.prototype),a}).apply(null,arguments)}function c(e){var n="function"==typeof Map?new Map:void 0;return(c=function(e){if(null===e||-1===Function.toString.call(e).indexOf("[native code]"))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,t)}function t(){return l(e,arguments,s(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),o(t,e)})(e)}var d,u,p,f=(d=c(Array),p=d,(u=h).prototype=Object.create(p.prototype),(u.prototype.constructor=u).__proto__=p,h);function h(e){var t,n,i;return n=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t=d.call.apply(d,[this].concat(e))||this),i=n.__proto__,Object.defineProperty(n,"__proto__",{get:function(){return i},set:function(e){i.__proto__=e}}),t}function m(e){void 0===e&&(e=[]);var t=[];return e.forEach(function(e){Array.isArray(e)?t.push.apply(t,m(e)):t.push(e)}),t}function v(e,t){return Array.prototype.filter.call(e,t)}function z(e,a){var t=de(),r=w(),n=[];if(!a&&e instanceof f)return e;if(!e)return new f(n);if("string"==typeof e){var i=e.trim();if(0<=i.indexOf("<")&&0<=i.indexOf(">")){var s="div";0===i.indexOf("<li")&&(s="ul"),0===i.indexOf("<tr")&&(s="tbody"),0!==i.indexOf("<td")&&0!==i.indexOf("<th")||(s="tr"),0===i.indexOf("<tbody")&&(s="table"),0===i.indexOf("<option")&&(s="select");var o=r.createElement(s);o.innerHTML=i;for(var l=0;l<o.childNodes.length;l+=1)n.push(o.childNodes[l])}else n=function(e){if("string"!=typeof e)return[e];for(var t=[],n=(a||r).querySelectorAll(e),i=0;i<n.length;i+=1)t.push(n[i]);return t}(e.trim())}else if(e.nodeType||e===t||e===r)n.push(e);else if(Array.isArray(e)){if(e instanceof f)return e;n=e}return new f(function(e){for(var t=[],n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n))}z.fn=f.prototype;var g,k,P,y={addClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=m(t.map(function(e){return e.split(" ")}));return this.forEach(function(e){var t;(t=e.classList).add.apply(t,i)}),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=m(t.map(function(e){return e.split(" ")}));return this.forEach(function(e){var t;(t=e.classList).remove.apply(t,i)}),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=m(t.map(function(e){return e.split(" ")}));return 0<v(this,function(t){return 0<i.filter(function(e){return t.classList.contains(e)}).length}).length},toggleClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=m(t.map(function(e){return e.split(" ")}));this.forEach(function(t){i.forEach(function(e){t.classList.toggle(e)})})},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(var i in e)this[n][i]=e[i],this[n].setAttribute(i,e[i]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?e+"ms":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],r=t[1],s=t[2],a=t[3];function o(e){var t=e.target;if(t){var n=e.target.dom7EventData||[];if(n.indexOf(e)<0&&n.unshift(e),z(t).is(r))s.apply(t,n);else for(var i=z(t).parents(),a=0;a<i.length;a+=1)z(i[a]).is(r)&&s.apply(i[a],n)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),s.apply(this,t)}"function"==typeof t[1]&&(i=t[0],s=t[1],a=t[2],r=void 0),a=a||!1;for(var c,d=i.split(" "),u=0;u<this.length;u+=1){var p=this[u];if(r)for(c=0;c<d.length;c+=1){var f=d[c];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[f]||(p.dom7LiveListeners[f]=[]),p.dom7LiveListeners[f].push({listener:s,proxyListener:o}),p.addEventListener(f,o,a)}else for(c=0;c<d.length;c+=1){var h=d[c];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[h]||(p.dom7Listeners[h]=[]),p.dom7Listeners[h].push({listener:s,proxyListener:l}),p.addEventListener(h,l,a)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],a=t[1],r=t[2],s=t[3];"function"==typeof t[1]&&(i=t[0],r=t[1],s=t[2],a=void 0),s=s||!1;for(var o=i.split(" "),l=0;l<o.length;l+=1)for(var c=o[l],d=0;d<this.length;d+=1){var u=this[d],p=void 0;if(!a&&u.dom7Listeners?p=u.dom7Listeners[c]:a&&u.dom7LiveListeners&&(p=u.dom7LiveListeners[c]),p&&p.length)for(var f=p.length-1;0<=f;--f){var h=p[f];!(r&&h.listener===r||r&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===r)&&r||(u.removeEventListener(c,h.proxyListener,s),p.splice(f,1))}}return this},trigger:function(){for(var e=de(),t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];for(var a=n[0].split(" "),r=n[1],s=0;s<a.length;s+=1)for(var o=a[s],l=0;l<this.length;l+=1){var c=this[l];if(e.CustomEvent){var d=new e.CustomEvent(o,{detail:r,bubbles:!0,cancelable:!0});c.dom7EventData=n.filter(function(e,t){return 0<t}),c.dispatchEvent(d),c.dom7EventData=[],delete c.dom7EventData}}return this},transitionEnd:function(n){var i=this;return n&&i.on("transitionend",function e(t){t.target===this&&(n.call(this,t),i.off("transitionend",e))}),this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=de();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(0<this.length){var e=de(),t=w(),n=this[0],i=n.getBoundingClientRect(),a=t.body,r=n.clientTop||a.clientTop||0,s=n.clientLeft||a.clientLeft||0,o=n===e?e.scrollY:n.scrollTop,l=n===e?e.scrollX:n.scrollLeft;return{top:i.top+o-r,left:i.left+l-s}}return null},css:function(e,t){var n,i=de();if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(var a in e)this[n].style[a]=e[a];return this}if(this[0])return i.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this},each:function(n){return n&&this.forEach(function(e,t){n.apply(e,[e,t])}),this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,n,i=de(),a=w(),r=this[0];if(!r||void 0===e)return!1;if("string"==typeof e){if(r.matches)return r.matches(e);if(r.webkitMatchesSelector)return r.webkitMatchesSelector(e);if(r.msMatchesSelector)return r.msMatchesSelector(e);for(t=z(e),n=0;n<t.length;n+=1)if(t[n]===r)return!0;return!1}if(e===a)return r===a;if(e===i)return r===i;if(e.nodeType||e instanceof f){for(t=e.nodeType?[e]:e,n=0;n<t.length;n+=1)if(t[n]===r)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(t-1<e)return z([]);if(e<0){var n=t+e;return z(n<0?[]:[this[n]])}return z([this[e]])},append:function(){for(var e,t=w(),n=0;n<arguments.length;n+=1){e=n<0||arguments.length<=n?void 0:arguments[n];for(var i=0;i<this.length;i+=1)if("string"==typeof e){var a=t.createElement("div");for(a.innerHTML=e;a.firstChild;)this[i].appendChild(a.firstChild)}else if(e instanceof f)for(var r=0;r<e.length;r+=1)this[i].appendChild(e[r]);else this[i].appendChild(e)}return this},prepend:function(e){var t,n,i=w();for(t=0;t<this.length;t+=1)if("string"==typeof e){var a=i.createElement("div");for(a.innerHTML=e,n=a.childNodes.length-1;0<=n;--n)this[t].insertBefore(a.childNodes[n],this[t].childNodes[0])}else if(e instanceof f)for(n=0;n<e.length;n+=1)this[t].insertBefore(e[n],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&z(this[0].nextElementSibling).is(e)?z([this[0].nextElementSibling]):z([]):this[0].nextElementSibling?z([this[0].nextElementSibling]):z([]):z([])},nextAll:function(e){var t=[],n=this[0];if(!n)return z([]);for(;n.nextElementSibling;){var i=n.nextElementSibling;e&&!z(i).is(e)||t.push(i),n=i}return z(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&z(t.previousElementSibling).is(e)?z([t.previousElementSibling]):z([]):t.previousElementSibling?z([t.previousElementSibling]):z([])}return z([])},prevAll:function(e){var t=[],n=this[0];if(!n)return z([]);for(;n.previousElementSibling;){var i=n.previousElementSibling;e&&!z(i).is(e)||t.push(i),n=i}return z(t)},parent:function(e){for(var t=[],n=0;n<this.length;n+=1)null===this[n].parentNode||e&&!z(this[n].parentNode).is(e)||t.push(this[n].parentNode);return z(t)},parents:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].parentNode;i;)e&&!z(i).is(e)||t.push(i),i=i.parentNode;return z(t)},closest:function(e){var t=this;return void 0===e?z([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].querySelectorAll(e),a=0;a<i.length;a+=1)t.push(i[a]);return z(t)},children:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].children,a=0;a<i.length;a+=1)e&&!z(i[a]).is(e)||t.push(i[a]);return z(t)},filter:function(e){return z(v(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function I(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function O(){return Date.now()}function b(e,t){void 0===t&&(t="x");var n,i,a,r=de(),s=r.getComputedStyle(e,null);return r.WebKitCSSMatrix?(6<(i=s.transform||s.webkitTransform).split(",").length&&(i=i.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),a=new r.WebKitCSSMatrix("none"===i?"":i)):n=(a=s.MozTransform||s.OTransform||s.MsTransform||s.msTransform||s.transform||s.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=r.WebKitCSSMatrix?a.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=r.WebKitCSSMatrix?a.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),i||0}function x(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object}function ue(e){for(var t=Object(arguments.length<=0?void 0:e),n=1;n<arguments.length;n+=1){var i=n<0||arguments.length<=n?void 0:arguments[n];if(null!=i)for(var a=Object.keys(Object(i)),r=0,s=a.length;r<s;r+=1){var o=a[r],l=Object.getOwnPropertyDescriptor(i,o);void 0!==l&&l.enumerable&&(x(t[o])&&x(i[o])?ue(t[o],i[o]):!x(t[o])&&x(i[o])?(t[o]={},ue(t[o],i[o])):t[o]=i[o])}}return t}function T(n,i){Object.keys(i).forEach(function(t){x(i[t])&&Object.keys(i[t]).forEach(function(e){"function"==typeof i[t][e]&&(i[t][e]=i[t][e].bind(n))}),n[t]=i[t]})}function $(){return g||(n=de(),e=w(),g={touch:!!("ontouchstart"in n||n.DocumentTouch&&e instanceof n.DocumentTouch),pointerEvents:!!n.PointerEvent&&"maxTouchPoints"in n.navigator&&0<=n.navigator.maxTouchPoints,observer:"MutationObserver"in n||"WebkitMutationObserver"in n,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});n.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in n}),g;var n,e}Object.keys(y).forEach(function(e){z.fn[e]=y[e]});var C={name:"resize",create:function(){var e=this;ue(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=de();t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(e){var t=de();t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}},S={attach:function(e,t){void 0===t&&(t={});var n=de(),i=this,a=new(n.MutationObserver||n.WebkitMutationObserver)(function(e){if(1!==e.length){var t=function(){i.emit("observerUpdate",e[0])};n.requestAnimationFrame?n.requestAnimationFrame(t):n.setTimeout(t,0)}else i.emit("observerUpdate",e[0])});a.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(a)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),n=0;n<t.length;n+=1)e.observer.attach(t[n]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},E={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){T(this,{observer:t({},S,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function M(){var e=this,t=e.params,n=e.el;if(!n||0!==n.offsetWidth){t.breakpoints&&e.setBreakpoint();var i=e.allowSlideNext,a=e.allowSlidePrev,r=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||1<t.slidesPerView)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=a,e.allowSlideNext=i,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}}var L=!1;function A(){}var D,N={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,nested:!1,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1},H={modular:{useParams:function(n){var i=this;i.modules&&Object.keys(i.modules).forEach(function(e){var t=i.modules[e];t.params&&ue(n,t.params)})},useModules:function(i){void 0===i&&(i={});var a=this;a.modules&&Object.keys(a.modules).forEach(function(e){var t=a.modules[e],n=i[e]||{};t.on&&a.on&&Object.keys(t.on).forEach(function(e){a.on(e,t.on[e])}),t.create&&t.create.bind(a)(n)})}},eventsEmitter:{on:function(e,t,n){var i=this;if("function"!=typeof t)return i;var a=n?"unshift":"push";return e.split(" ").forEach(function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][a](t)}),i},once:function(i,a,e){var r=this;if("function"!=typeof a)return r;function s(){r.off(i,s),s.__emitterProxy&&delete s.__emitterProxy;for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];a.apply(r,t)}return s.__emitterProxy=a,r.on(i,s,e)},onAny:function(e,t){if("function"!=typeof e)return this;var n=t?"unshift":"push";return this.eventsAnyListeners.indexOf(e)<0&&this.eventsAnyListeners[n](e),this},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var n=t.eventsAnyListeners.indexOf(e);return 0<=n&&t.eventsAnyListeners.splice(n,1),t},off:function(e,i){var a=this;return a.eventsListeners&&e.split(" ").forEach(function(n){void 0===i?a.eventsListeners[n]=[]:a.eventsListeners[n]&&a.eventsListeners[n].forEach(function(e,t){(e===i||e.__emitterProxy&&e.__emitterProxy===i)&&a.eventsListeners[n].splice(t,1)})}),a},emit:function(){var e,n,i,a=this;if(!a.eventsListeners)return a;for(var t=arguments.length,r=new Array(t),s=0;s<t;s++)r[s]=arguments[s];return i="string"==typeof r[0]||Array.isArray(r[0])?(e=r[0],n=r.slice(1,r.length),a):(e=r[0].events,n=r[0].data,r[0].context||a),n.unshift(i),(Array.isArray(e)?e:e.split(" ")).forEach(function(t){a.eventsAnyListeners&&a.eventsAnyListeners.length&&a.eventsAnyListeners.forEach(function(e){e.apply(i,[t].concat(n))}),a.eventsListeners&&a.eventsListeners[t]&&a.eventsListeners[t].forEach(function(e){e.apply(i,n)})}),a}},update:{updateSize:function(){var e,t,n=this,i=n.$el;e=void 0!==n.params.width&&null!==n.params.width?n.params.width:i[0].clientWidth,t=void 0!==n.params.height&&null!==n.params.height?n.params.height:i[0].clientHeight,0===e&&n.isHorizontal()||0===t&&n.isVertical()||(e=e-parseInt(i.css("padding-left")||0,10)-parseInt(i.css("padding-right")||0,10),t=t-parseInt(i.css("padding-top")||0,10)-parseInt(i.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),ue(n,{width:e,height:t,size:n.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=de(),n=e.params,i=e.$wrapperEl,a=e.size,r=e.rtlTranslate,s=e.wrongRTL,o=e.virtual&&n.virtual.enabled,l=o?e.virtual.slides.length:e.slides.length,c=i.children("."+e.params.slideClass),d=o?e.virtual.slides.length:c.length,u=[],p=[],f=[];function h(e,t){return!n.cssMode||t!==c.length-1}var m=n.slidesOffsetBefore;"function"==typeof m&&(m=n.slidesOffsetBefore.call(e));var v=n.slidesOffsetAfter;"function"==typeof v&&(v=n.slidesOffsetAfter.call(e));var g=e.snapGrid.length,y=e.slidesGrid.length,b=n.spaceBetween,x=-m,w=0,T=0;if(void 0!==a){var C,S;"string"==typeof b&&0<=b.indexOf("%")&&(b=parseFloat(b.replace("%",""))/100*a),e.virtualSize=-b,r?c.css({marginLeft:"",marginTop:""}):c.css({marginRight:"",marginBottom:""}),1<n.slidesPerColumn&&(C=Math.floor(d/n.slidesPerColumn)===d/e.params.slidesPerColumn?d:Math.ceil(d/n.slidesPerColumn)*n.slidesPerColumn,"auto"!==n.slidesPerView&&"row"===n.slidesPerColumnFill&&(C=Math.max(C,n.slidesPerView*n.slidesPerColumn)));for(var E,M=n.slidesPerColumn,k=C/M,P=Math.floor(d/n.slidesPerColumn),$=0;$<d;$+=1){S=0;var L=c.eq($);if(1<n.slidesPerColumn){var A=void 0,z=void 0,D=void 0;if("row"===n.slidesPerColumnFill&&1<n.slidesPerGroup){var I=Math.floor($/(n.slidesPerGroup*n.slidesPerColumn)),O=$-n.slidesPerColumn*n.slidesPerGroup*I,N=0===I?n.slidesPerGroup:Math.min(Math.ceil((d-I*M*n.slidesPerGroup)/M),n.slidesPerGroup);A=(z=O-(D=Math.floor(O/N))*N+I*n.slidesPerGroup)+D*C/M,L.css({"-webkit-box-ordinal-group":A,"-moz-box-ordinal-group":A,"-ms-flex-order":A,"-webkit-order":A,order:A})}else"column"===n.slidesPerColumnFill?(D=$-(z=Math.floor($/M))*M,(P<z||z===P&&D===M-1)&&(D+=1)>=M&&(D=0,z+=1)):z=$-(D=Math.floor($/k))*k;L.css("margin-"+(e.isHorizontal()?"top":"left"),0!==D&&n.spaceBetween&&n.spaceBetween+"px")}if("none"!==L.css("display")){if("auto"===n.slidesPerView){var H=t.getComputedStyle(L[0],null),j=L[0].style.transform,q=L[0].style.webkitTransform;if(j&&(L[0].style.transform="none"),q&&(L[0].style.webkitTransform="none"),n.roundLengths)S=e.isHorizontal()?L.outerWidth(!0):L.outerHeight(!0);else if(e.isHorizontal()){var F=parseFloat(H.getPropertyValue("width")||0),R=parseFloat(H.getPropertyValue("padding-left")||0),B=parseFloat(H.getPropertyValue("padding-right")||0),X=parseFloat(H.getPropertyValue("margin-left")||0),W=parseFloat(H.getPropertyValue("margin-right")||0),Y=H.getPropertyValue("box-sizing");if(Y&&"border-box"===Y)S=F+X+W;else{var _=L[0],G=_.clientWidth;S=F+R+B+X+W+(_.offsetWidth-G)}}else{var V=parseFloat(H.getPropertyValue("height")||0),U=parseFloat(H.getPropertyValue("padding-top")||0),K=parseFloat(H.getPropertyValue("padding-bottom")||0),Q=parseFloat(H.getPropertyValue("margin-top")||0),Z=parseFloat(H.getPropertyValue("margin-bottom")||0),J=H.getPropertyValue("box-sizing");if(J&&"border-box"===J)S=V+Q+Z;else{var ee=L[0],te=ee.clientHeight;S=V+U+K+Q+Z+(ee.offsetHeight-te)}}j&&(L[0].style.transform=j),q&&(L[0].style.webkitTransform=q),n.roundLengths&&(S=Math.floor(S))}else S=(a-(n.slidesPerView-1)*b)/n.slidesPerView,n.roundLengths&&(S=Math.floor(S)),c[$]&&(e.isHorizontal()?c[$].style.width=S+"px":c[$].style.height=S+"px");c[$]&&(c[$].swiperSlideSize=S),f.push(S),n.centeredSlides?(x=x+S/2+w/2+b,0===w&&0!==$&&(x=x-a/2-b),0===$&&(x=x-a/2-b),Math.abs(x)<.001&&(x=0),n.roundLengths&&(x=Math.floor(x)),T%n.slidesPerGroup==0&&u.push(x),p.push(x)):(n.roundLengths&&(x=Math.floor(x)),(T-Math.min(e.params.slidesPerGroupSkip,T))%e.params.slidesPerGroup==0&&u.push(x),p.push(x),x=x+S+b),e.virtualSize+=S+b,w=S,T+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+v,r&&s&&("slide"===n.effect||"coverflow"===n.effect)&&i.css({width:e.virtualSize+n.spaceBetween+"px"}),n.setWrapperSize&&(e.isHorizontal()?i.css({width:e.virtualSize+n.spaceBetween+"px"}):i.css({height:e.virtualSize+n.spaceBetween+"px"})),1<n.slidesPerColumn&&(e.virtualSize=(S+n.spaceBetween)*C,e.virtualSize=Math.ceil(e.virtualSize/n.slidesPerColumn)-n.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+n.spaceBetween+"px"}):i.css({height:e.virtualSize+n.spaceBetween+"px"}),n.centeredSlides)){E=[];for(var ne=0;ne<u.length;ne+=1){var ie=u[ne];n.roundLengths&&(ie=Math.floor(ie)),u[ne]<e.virtualSize+u[0]&&E.push(ie)}u=E}if(!n.centeredSlides){E=[];for(var ae=0;ae<u.length;ae+=1){var re=u[ae];n.roundLengths&&(re=Math.floor(re)),u[ae]<=e.virtualSize-a&&E.push(re)}u=E,1<Math.floor(e.virtualSize-a)-Math.floor(u[u.length-1])&&u.push(e.virtualSize-a)}if(0===u.length&&(u=[0]),0!==n.spaceBetween&&(e.isHorizontal()?r?c.filter(h).css({marginLeft:b+"px"}):c.filter(h).css({marginRight:b+"px"}):c.filter(h).css({marginBottom:b+"px"})),n.centeredSlides&&n.centeredSlidesBounds){var se=0;f.forEach(function(e){se+=e+(n.spaceBetween?n.spaceBetween:0)});var oe=(se-=n.spaceBetween)-a;u=u.map(function(e){return e<0?-m:oe<e?oe+v:e})}if(n.centerInsufficientSlides){var le=0;if(f.forEach(function(e){le+=e+(n.spaceBetween?n.spaceBetween:0)}),(le-=n.spaceBetween)<a){var ce=(a-le)/2;u.forEach(function(e,t){u[t]=e-ce}),p.forEach(function(e,t){p[t]=e+ce})}}ue(e,{slides:c,snapGrid:u,slidesGrid:p,slidesSizesGrid:f}),d!==l&&e.emit("slidesLengthChange"),u.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),p.length!==y&&e.emit("slidesGridLengthChange"),(n.watchSlidesProgress||n.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,n=this,i=[],a=0;if("number"==typeof e?n.setTransition(e):!0===e&&n.setTransition(n.params.speed),"auto"!==n.params.slidesPerView&&1<n.params.slidesPerView)if(n.params.centeredSlides)n.visibleSlides.each(function(e){i.push(e)});else for(t=0;t<Math.ceil(n.params.slidesPerView);t+=1){var r=n.activeIndex+t;if(r>n.slides.length)break;i.push(n.slides.eq(r)[0])}else i.push(n.slides.eq(n.activeIndex)[0]);for(t=0;t<i.length;t+=1)if(void 0!==i[t]){var s=i[t].offsetHeight;a=a<s?s:a}a&&n.$wrapperEl.css("height",a+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,n=t.params,i=t.slides,a=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var r=-e;a&&(r=e),i.removeClass(n.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var s=0;s<i.length;s+=1){var o=i[s],l=(r+(n.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+n.spaceBetween);if(n.watchSlidesVisibility||n.centeredSlides&&n.autoHeight){var c=-(r-o.swiperSlideOffset),d=c+t.slidesSizesGrid[s];(0<=c&&c<t.size-1||1<d&&d<=t.size||c<=0&&d>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(s),i.eq(s).addClass(n.slideVisibleClass))}o.progress=a?-l:l}t.visibleSlides=z(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var n=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*n||0}var i=t.params,a=t.maxTranslate()-t.minTranslate(),r=t.progress,s=t.isBeginning,o=t.isEnd,l=s,c=o;o=0==a?s=!(r=0):(s=(r=(e-t.minTranslate())/a)<=0,1<=r),ue(t,{progress:r,isBeginning:s,isEnd:o}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),s&&!l&&t.emit("reachBeginning toEdge"),o&&!c&&t.emit("reachEnd toEdge"),(l&&!s||c&&!o)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){var e,t=this.slides,n=this.params,i=this.$wrapperEl,a=this.activeIndex,r=this.realIndex,s=this.virtual&&n.virtual.enabled;t.removeClass(n.slideActiveClass+" "+n.slideNextClass+" "+n.slidePrevClass+" "+n.slideDuplicateActiveClass+" "+n.slideDuplicateNextClass+" "+n.slideDuplicatePrevClass),(e=s?this.$wrapperEl.find("."+n.slideClass+'[data-swiper-slide-index="'+a+'"]'):t.eq(a)).addClass(n.slideActiveClass),n.loop&&(e.hasClass(n.slideDuplicateClass)?i.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+r+'"]').addClass(n.slideDuplicateActiveClass):i.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+r+'"]').addClass(n.slideDuplicateActiveClass));var o=e.nextAll("."+n.slideClass).eq(0).addClass(n.slideNextClass);n.loop&&0===o.length&&(o=t.eq(0)).addClass(n.slideNextClass);var l=e.prevAll("."+n.slideClass).eq(0).addClass(n.slidePrevClass);n.loop&&0===l.length&&(l=t.eq(-1)).addClass(n.slidePrevClass),n.loop&&(o.hasClass(n.slideDuplicateClass)?i.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass):i.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass),l.hasClass(n.slideDuplicateClass)?i.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass):i.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass)),this.emitSlidesClasses()},updateActiveIndex:function(e){var t,n=this,i=n.rtlTranslate?n.translate:-n.translate,a=n.slidesGrid,r=n.snapGrid,s=n.params,o=n.activeIndex,l=n.realIndex,c=n.snapIndex,d=e;if(void 0===d){for(var u=0;u<a.length;u+=1)void 0!==a[u+1]?i>=a[u]&&i<a[u+1]-(a[u+1]-a[u])/2?d=u:i>=a[u]&&i<a[u+1]&&(d=u+1):i>=a[u]&&(d=u);s.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}if(0<=r.indexOf(i))t=r.indexOf(i);else{var p=Math.min(s.slidesPerGroupSkip,d);t=p+Math.floor((d-p)/s.slidesPerGroup)}if(t>=r.length&&(t=r.length-1),d!==o){var f=parseInt(n.slides.eq(d).attr("data-swiper-slide-index")||d,10);ue(n,{snapIndex:t,realIndex:f,previousIndex:o,activeIndex:d}),n.emit("activeIndexChange"),n.emit("snapIndexChange"),l!==f&&n.emit("realIndexChange"),(n.initialized||n.params.runCallbacksOnInit)&&n.emit("slideChange")}else t!==c&&(n.snapIndex=t,n.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,n=t.params,i=z(e.target).closest("."+n.slideClass)[0],a=!1;if(i)for(var r=0;r<t.slides.length;r+=1)t.slides[r]===i&&(a=!0);if(!i||!a)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(z(i).attr("data-swiper-slide-index"),10):t.clickedIndex=z(i).index(),n.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,n=this.rtlTranslate,i=this.translate,a=this.$wrapperEl;if(t.virtualTranslate)return n?-i:i;if(t.cssMode)return i;var r=b(a[0],e);return n&&(r=-r),r||0},setTranslate:function(e,t){var n=this,i=n.rtlTranslate,a=n.params,r=n.$wrapperEl,s=n.wrapperEl,o=n.progress,l=0,c=0;n.isHorizontal()?l=i?-e:e:c=e,a.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),a.cssMode?s[n.isHorizontal()?"scrollLeft":"scrollTop"]=n.isHorizontal()?-l:-c:a.virtualTranslate||r.transform("translate3d("+l+"px, "+c+"px, 0px)"),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?l:c;var d=n.maxTranslate()-n.minTranslate();(0==d?0:(e-n.minTranslate())/d)!==o&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,n,i,a){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0),void 0===i&&(i=!0);var r=this,s=r.params,o=r.wrapperEl;if(r.animating&&s.preventInteractionOnTransition)return!1;var l,c=r.minTranslate(),d=r.maxTranslate();if(l=i&&c<e?c:i&&e<d?d:e,r.updateProgress(l),s.cssMode){var u,p=r.isHorizontal();return 0!==t&&o.scrollTo?o.scrollTo(((u={})[p?"left":"top"]=-l,u.behavior="smooth",u)):o[p?"scrollLeft":"scrollTop"]=-l,!0}return 0===t?(r.setTransition(0),r.setTranslate(l),n&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(l),n&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,n&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var n=this.activeIndex,i=this.params,a=this.previousIndex;if(!i.cssMode){i.autoHeight&&this.updateAutoHeight();var r=t;if(r=r||(a<n?"next":n<a?"prev":"reset"),this.emit("transitionStart"),e&&n!==a){if("reset"===r)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===r?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var n=this,i=n.activeIndex,a=n.previousIndex,r=n.params;if(n.animating=!1,!r.cssMode){n.setTransition(0);var s=t;if(s=s||(a<i?"next":i<a?"prev":"reset"),n.emit("transitionEnd"),e&&i!==a){if("reset"===s)return void n.emit("slideResetTransitionEnd");n.emit("slideChangeTransitionEnd"),"next"===s?n.emit("slideNextTransitionEnd"):n.emit("slidePrevTransitionEnd")}}}},slide:{slideTo:function(e,t,n,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0),"number"!=typeof e&&"string"!=typeof e)throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. ["+typeof e+"] given.");if("string"==typeof e){var a=parseInt(e,10);if(!isFinite(a))throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. ["+e+"] given.");e=a}var r=this,s=e;s<0&&(s=0);var o=r.params,l=r.snapGrid,c=r.slidesGrid,d=r.previousIndex,u=r.activeIndex,p=r.rtlTranslate,f=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var h=Math.min(r.params.slidesPerGroupSkip,s),m=h+Math.floor((s-h)/r.params.slidesPerGroup);m>=l.length&&(m=l.length-1),(u||o.initialSlide||0)===(d||0)&&n&&r.emit("beforeSlideChangeStart");var v,g=-l[m];if(r.updateProgress(g),o.normalizeSlideIndex)for(var y=0;y<c.length;y+=1){var b=-Math.floor(100*g),x=Math.floor(100*c[y]),w=Math.floor(100*c[y+1]);void 0!==c[y+1]?x<=b&&b<w-(w-x)/2?s=y:x<=b&&b<w&&(s=y+1):x<=b&&(s=y)}if(r.initialized&&s!==u){if(!r.allowSlideNext&&g<r.translate&&g<r.minTranslate())return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(u||0)!==s)return!1}if(v=u<s?"next":s<u?"prev":"reset",p&&-g===r.translate||!p&&g===r.translate)return r.updateActiveIndex(s),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==o.effect&&r.setTranslate(g),"reset"!=v&&(r.transitionStart(n,v),r.transitionEnd(n,v)),!1;if(o.cssMode){var T,C=r.isHorizontal(),S=-g;return p&&(S=f.scrollWidth-f.offsetWidth-S),0!==t&&f.scrollTo?f.scrollTo(((T={})[C?"left":"top"]=S,T.behavior="smooth",T)):f[C?"scrollLeft":"scrollTop"]=S,!0}return 0===t?(r.setTransition(0),r.setTranslate(g),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,i),r.transitionStart(n,v),r.transitionEnd(n,v)):(r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,i),r.transitionStart(n,v),r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(n,v))}),r.$wrapperEl[0].addEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,n,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0);var a=e;return this.params.loop&&(a+=this.loopedSlides),this.slideTo(a,t,n,i)},slideNext:function(e,t,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this.params,a=this.animating,r=this.activeIndex<i.slidesPerGroupSkip?1:i.slidesPerGroup;if(i.loop){if(a&&i.loopPreventsSlide)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}return this.slideTo(this.activeIndex+r,e,t,n)},slidePrev:function(e,t,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,a=i.params,r=i.animating,s=i.snapGrid,o=i.slidesGrid,l=i.rtlTranslate;if(a.loop){if(r&&a.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function c(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var d=c(l?i.translate:-i.translate),u=s.map(function(e){return c(e)});s[u.indexOf(d)];var p,f=s[u.indexOf(d)-1];return void 0===f&&a.cssMode&&s.forEach(function(e){!f&&e<=d&&(f=e)}),void 0!==f&&(p=o.indexOf(f))<0&&(p=i.activeIndex-1),i.slideTo(p,e,t,n)},slideReset:function(e,t,n){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,n)},slideToClosest:function(e,t,n,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);var a=this,r=a.activeIndex,s=Math.min(a.params.slidesPerGroupSkip,r),o=s+Math.floor((r-s)/a.params.slidesPerGroup),l=a.rtlTranslate?a.translate:-a.translate;if(l>=a.snapGrid[o]){var c=a.snapGrid[o];l-c>(a.snapGrid[o+1]-c)*i&&(r+=a.params.slidesPerGroup)}else{var d=a.snapGrid[o-1];l-d<=(a.snapGrid[o]-d)*i&&(r-=a.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,a.slidesGrid.length-1),a.slideTo(r,e,t,n)},slideToClickedSlide:function(){var e,t=this,n=t.params,i=t.$wrapperEl,a="auto"===n.slidesPerView?t.slidesPerViewDynamic():n.slidesPerView,r=t.clickedIndex;if(n.loop){if(t.animating)return;e=parseInt(z(t.clickedSlide).attr("data-swiper-slide-index"),10),n.centeredSlides?r<t.loopedSlides-a/2||r>t.slides.length-t.loopedSlides+a/2?(t.loopFix(),r=i.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),I(function(){t.slideTo(r)})):t.slideTo(r):r>t.slides.length-a?(t.loopFix(),r=i.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),I(function(){t.slideTo(r)})):t.slideTo(r)}else t.slideTo(r)}},loop:{loopCreate:function(){var i=this,e=w(),t=i.params,n=i.$wrapperEl;n.children("."+t.slideClass+"."+t.slideDuplicateClass).remove();var a=n.children("."+t.slideClass);if(t.loopFillGroupWithBlank){var r=t.slidesPerGroup-a.length%t.slidesPerGroup;if(r!==t.slidesPerGroup){for(var s=0;s<r;s+=1){var o=z(e.createElement("div")).addClass(t.slideClass+" "+t.slideBlankClass);n.append(o)}a=n.children("."+t.slideClass)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=a.length),i.loopedSlides=Math.ceil(parseFloat(t.loopedSlides||t.slidesPerView,10)),i.loopedSlides+=t.loopAdditionalSlides,i.loopedSlides>a.length&&(i.loopedSlides=a.length);var l=[],c=[];a.each(function(e,t){var n=z(e);t<i.loopedSlides&&c.push(e),t<a.length&&t>=a.length-i.loopedSlides&&l.push(e),n.attr("data-swiper-slide-index",t)});for(var d=0;d<c.length;d+=1)n.append(z(c[d].cloneNode(!0)).addClass(t.slideDuplicateClass));for(var u=l.length-1;0<=u;--u)n.prepend(z(l[u].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){var e=this;e.emit("beforeLoopFix");var t,n=e.activeIndex,i=e.slides,a=e.loopedSlides,r=e.allowSlidePrev,s=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var c=-o[n]-e.getTranslate();n<a?(t=i.length-3*a+n,t+=a,e.slideTo(t,0,!1,!0)&&0!=c&&e.setTranslate((l?-e.translate:e.translate)-c)):n>=i.length-a&&(t=-i.length+n+a,t+=a,e.slideTo(t,0,!1,!0)&&0!=c&&e.setTranslate((l?-e.translate:e.translate)-c)),e.allowSlidePrev=r,e.allowSlideNext=s,e.emit("loopFix")},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,n=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),n.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){if(!(this.support.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)){var t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){this.support.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}},manipulation:{appendSlide:function(e){var t=this.$wrapperEl,n=this.params;if(n.loop&&this.loopDestroy(),"object"==typeof e&&"length"in e)for(var i=0;i<e.length;i+=1)e[i]&&t.append(e[i]);else t.append(e);n.loop&&this.loopCreate(),n.observer&&this.support.observer||this.update()},prependSlide:function(e){var t=this.params,n=this.$wrapperEl,i=this.activeIndex;t.loop&&this.loopDestroy();var a=i+1;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)e[r]&&n.prepend(e[r]);a=i+e.length}else n.prepend(e);t.loop&&this.loopCreate(),t.observer&&this.support.observer||this.update(),this.slideTo(a,0,!1)},addSlide:function(e,t){var n=this,i=n.$wrapperEl,a=n.params,r=n.activeIndex;a.loop&&(r-=n.loopedSlides,n.loopDestroy(),n.slides=i.children("."+a.slideClass));var s=n.slides.length;if(e<=0)n.prependSlide(t);else if(s<=e)n.appendSlide(t);else{for(var o=e<r?r+1:r,l=[],c=s-1;e<=c;--c){var d=n.slides.eq(c);d.remove(),l.unshift(d)}if("object"==typeof t&&"length"in t){for(var u=0;u<t.length;u+=1)t[u]&&i.append(t[u]);o=e<r?r+t.length:r}else i.append(t);for(var p=0;p<l.length;p+=1)i.append(l[p]);a.loop&&n.loopCreate(),a.observer&&n.support.observer||n.update(),a.loop?n.slideTo(o+n.loopedSlides,0,!1):n.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,n=t.params,i=t.$wrapperEl,a=t.activeIndex;n.loop&&(a-=t.loopedSlides,t.loopDestroy(),t.slides=i.children("."+n.slideClass));var r,s=a;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)r=e[o],t.slides[r]&&t.slides.eq(r).remove(),r<s&&--s;s=Math.max(s,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<s&&--s,s=Math.max(s,0);n.loop&&t.loopCreate(),n.observer&&t.support.observer||t.update(),n.loop?t.slideTo(s+t.loopedSlides,0,!1):t.slideTo(s,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=w(),n=e.params,i=e.touchEvents,a=e.el,r=e.wrapperEl,s=e.device,o=e.support;e.onTouchStart=function(e){var t=this,n=w(),i=de(),a=t.touchEventsData,r=t.params,s=t.touches;if(!t.animating||!r.preventInteractionOnTransition){var o=e;o.originalEvent&&(o=o.originalEvent);var l=z(o.target);if(("wrapper"!==r.touchEventsTarget||l.closest(t.wrapperEl).length)&&(a.isTouchEvent="touchstart"===o.type,(a.isTouchEvent||!("which"in o)||3!==o.which)&&!(!a.isTouchEvent&&"button"in o&&0<o.button||a.isTouched&&a.isMoved)))if(r.noSwipingClass&&""!==r.noSwipingClass&&o.target&&o.target.shadowRoot&&e.path&&e.path[0]&&(l=z(e.path[0])),r.noSwiping&&l.closest(r.noSwipingSelector?r.noSwipingSelector:"."+r.noSwipingClass)[0])t.allowClick=!0;else if(!r.swipeHandler||l.closest(r.swipeHandler)[0]){s.currentX="touchstart"===o.type?o.targetTouches[0].pageX:o.pageX,s.currentY="touchstart"===o.type?o.targetTouches[0].pageY:o.pageY;var c=s.currentX,d=s.currentY,u=r.edgeSwipeDetection||r.iOSEdgeSwipeDetection,p=r.edgeSwipeThreshold||r.iOSEdgeSwipeThreshold;if(u&&(c<=p||c>=i.innerWidth-p)){if("prevent"!==u)return;e.preventDefault()}if(ue(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),s.startX=c,s.startY=d,a.touchStartTime=O(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,0<r.threshold&&(a.allowThresholdMove=!1),"touchstart"!==o.type){var f=!0;l.is(a.formElements)&&(f=!1),n.activeElement&&z(n.activeElement).is(a.formElements)&&n.activeElement!==l[0]&&n.activeElement.blur();var h=f&&t.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!h||l[0].isContentEditable||o.preventDefault()}t.emit("touchStart",o)}}}.bind(e),e.onTouchMove=function(e){var t=w(),n=this,i=n.touchEventsData,a=n.params,r=n.touches,s=n.rtlTranslate,o=e;if(o.originalEvent&&(o=o.originalEvent),i.isTouched){if(!i.isTouchEvent||"touchmove"===o.type){var l="touchmove"===o.type&&o.targetTouches&&(o.targetTouches[0]||o.changedTouches[0]),c="touchmove"===o.type?l.pageX:o.pageX,d="touchmove"===o.type?l.pageY:o.pageY;if(o.preventedByNestedSwiper)return r.startX=c,void(r.startY=d);if(!n.allowTouchMove)return n.allowClick=!1,void(i.isTouched&&(ue(r,{startX:c,startY:d,currentX:c,currentY:d}),i.touchStartTime=O()));if(i.isTouchEvent&&a.touchReleaseOnEdges&&!a.loop)if(n.isVertical()){if(d<r.startY&&n.translate<=n.maxTranslate()||d>r.startY&&n.translate>=n.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(c<r.startX&&n.translate<=n.maxTranslate()||c>r.startX&&n.translate>=n.minTranslate())return;if(i.isTouchEvent&&t.activeElement&&o.target===t.activeElement&&z(o.target).is(i.formElements))return i.isMoved=!0,void(n.allowClick=!1);if(i.allowTouchCallbacks&&n.emit("touchMove",o),!(o.targetTouches&&1<o.targetTouches.length)){r.currentX=c,r.currentY=d;var u,p=r.currentX-r.startX,f=r.currentY-r.startY;if(!(n.params.threshold&&Math.sqrt(Math.pow(p,2)+Math.pow(f,2))<n.params.threshold))if(void 0===i.isScrolling&&(n.isHorizontal()&&r.currentY===r.startY||n.isVertical()&&r.currentX===r.startX?i.isScrolling=!1:25<=p*p+f*f&&(u=180*Math.atan2(Math.abs(f),Math.abs(p))/Math.PI,i.isScrolling=n.isHorizontal()?u>a.touchAngle:90-u>a.touchAngle)),i.isScrolling&&n.emit("touchMoveOpposite",o),void 0===i.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){n.allowClick=!1,!a.cssMode&&o.cancelable&&o.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&o.stopPropagation(),i.isMoved||(a.loop&&n.loopFix(),i.startTranslate=n.getTranslate(),n.setTransition(0),n.animating&&n.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!a.grabCursor||!0!==n.allowSlideNext&&!0!==n.allowSlidePrev||n.setGrabCursor(!0),n.emit("sliderFirstMove",o)),n.emit("sliderMove",o),i.isMoved=!0;var h=n.isHorizontal()?p:f;r.diff=h,h*=a.touchRatio,s&&(h=-h),n.swipeDirection=0<h?"prev":"next",i.currentTranslate=h+i.startTranslate;var m=!0,v=a.resistanceRatio;if(a.touchReleaseOnEdges&&(v=0),0<h&&i.currentTranslate>n.minTranslate()?(m=!1,a.resistance&&(i.currentTranslate=n.minTranslate()-1+Math.pow(-n.minTranslate()+i.startTranslate+h,v))):h<0&&i.currentTranslate<n.maxTranslate()&&(m=!1,a.resistance&&(i.currentTranslate=n.maxTranslate()+1-Math.pow(n.maxTranslate()-i.startTranslate-h,v))),m&&(o.preventedByNestedSwiper=!0),!n.allowSlideNext&&"next"===n.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!n.allowSlidePrev&&"prev"===n.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),0<a.threshold){if(!(Math.abs(h)>a.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,i.currentTranslate=i.startTranslate,void(r.diff=n.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}a.followFinger&&!a.cssMode&&((a.freeMode||a.watchSlidesProgress||a.watchSlidesVisibility)&&(n.updateActiveIndex(),n.updateSlidesClasses()),a.freeMode&&(0===i.velocities.length&&i.velocities.push({position:r[n.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:r[n.isHorizontal()?"currentX":"currentY"],time:O()})),n.updateProgress(i.currentTranslate),n.setTranslate(i.currentTranslate))}}}}else i.startMoving&&i.isScrolling&&n.emit("touchMoveOpposite",o)}.bind(e),e.onTouchEnd=function(e){var t=this,n=t.touchEventsData,i=t.params,a=t.touches,r=t.rtlTranslate,s=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,c=e;if(c.originalEvent&&(c=c.originalEvent),n.allowTouchCallbacks&&t.emit("touchEnd",c),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&i.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);i.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var d,u=O(),p=u-n.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap click",c),p<300&&u-n.lastClickTime<300&&t.emit("doubleTap doubleClick",c)),n.lastClickTime=O(),I(function(){t.destroyed||(t.allowClick=!0)}),!n.isTouched||!n.isMoved||!t.swipeDirection||0===a.diff||n.currentTranslate===n.startTranslate)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,d=i.followFinger?r?t.translate:-t.translate:-n.currentTranslate,!i.cssMode)if(i.freeMode){if(d<-t.minTranslate())return void t.slideTo(t.activeIndex);if(d>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){if(1<n.velocities.length){var f=n.velocities.pop(),h=n.velocities.pop(),m=f.position-h.position,v=f.time-h.time;t.velocity=m/v,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(150<v||300<O()-f.time)&&(t.velocity=0)}else t.velocity=0;t.velocity*=i.freeModeMomentumVelocityRatio,n.velocities.length=0;var g=1e3*i.freeModeMomentumRatio,y=t.velocity*g,b=t.translate+y;r&&(b=-b);var x,w,T=!1,C=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;if(b<t.maxTranslate())i.freeModeMomentumBounce?(b+t.maxTranslate()<-C&&(b=t.maxTranslate()-C),x=t.maxTranslate(),T=!0,n.allowMomentumBounce=!0):b=t.maxTranslate(),i.loop&&i.centeredSlides&&(w=!0);else if(b>t.minTranslate())i.freeModeMomentumBounce?(b-t.minTranslate()>C&&(b=t.minTranslate()+C),x=t.minTranslate(),T=!0,n.allowMomentumBounce=!0):b=t.minTranslate(),i.loop&&i.centeredSlides&&(w=!0);else if(i.freeModeSticky){for(var S,E=0;E<l.length;E+=1)if(l[E]>-b){S=E;break}b=-(Math.abs(l[S]-b)<Math.abs(l[S-1]-b)||"next"===t.swipeDirection?l[S]:l[S-1])}if(w&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity){if(g=r?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity),i.freeModeSticky){var M=Math.abs((r?-b:b)-t.translate),k=t.slidesSizesGrid[t.activeIndex];g=M<k?i.speed:M<2*k?1.5*i.speed:2.5*i.speed}}else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&T?(t.updateProgress(x),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&n.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(i.speed),setTimeout(function(){t.setTranslate(x),s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(b),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(i.freeModeSticky)return void t.slideToClosest();(!i.freeModeMomentum||p>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var P=0,$=t.slidesSizesGrid[0],L=0;L<o.length;L+=L<i.slidesPerGroupSkip?1:i.slidesPerGroup){var A=L<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==o[L+A]?d>=o[L]&&d<o[L+A]&&($=o[(P=L)+A]-o[L]):d>=o[L]&&(P=L,$=o[o.length-1]-o[o.length-2])}var z=(d-o[P])/$,D=P<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(p>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(z>=i.longSwipesRatio?t.slideTo(P+D):t.slideTo(P)),"prev"===t.swipeDirection&&(z>1-i.longSwipesRatio?t.slideTo(P+D):t.slideTo(P))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||c.target!==t.navigation.nextEl&&c.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(P+D),"prev"===t.swipeDirection&&t.slideTo(P)):c.target===t.navigation.nextEl?t.slideTo(P+D):t.slideTo(P)}}}.bind(e),n.cssMode&&(e.onScroll=function(){var e=this,t=e.wrapperEl,n=e.rtlTranslate;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=n?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var i=e.maxTranslate()-e.minTranslate();(0==i?0:(e.translate-e.minTranslate())/i)!==e.progress&&e.updateProgress(n?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}.bind(e)),e.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);var l=!!n.nested;if(!o.touch&&o.pointerEvents)a.addEventListener(i.start,e.onTouchStart,!1),t.addEventListener(i.move,e.onTouchMove,l),t.addEventListener(i.end,e.onTouchEnd,!1);else{if(o.touch){var c=!("touchstart"!==i.start||!o.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};a.addEventListener(i.start,e.onTouchStart,c),a.addEventListener(i.move,e.onTouchMove,o.passiveListener?{passive:!1,capture:l}:l),a.addEventListener(i.end,e.onTouchEnd,c),i.cancel&&a.addEventListener(i.cancel,e.onTouchEnd,c),L||(t.addEventListener("touchstart",A),L=!0)}(n.simulateTouch&&!s.ios&&!s.android||n.simulateTouch&&!o.touch&&s.ios)&&(a.addEventListener("mousedown",e.onTouchStart,!1),t.addEventListener("mousemove",e.onTouchMove,l),t.addEventListener("mouseup",e.onTouchEnd,!1))}(n.preventClicks||n.preventClicksPropagation)&&a.addEventListener("click",e.onClick,!0),n.cssMode&&r.addEventListener("scroll",e.onScroll),n.updateOnWindowResize?e.on(s.ios||s.android?"resize orientationchange observerUpdate":"resize observerUpdate",M,!0):e.on("observerUpdate",M,!0)},detachEvents:function(){var e=this,t=w(),n=e.params,i=e.touchEvents,a=e.el,r=e.wrapperEl,s=e.device,o=e.support,l=!!n.nested;if(!o.touch&&o.pointerEvents)a.removeEventListener(i.start,e.onTouchStart,!1),t.removeEventListener(i.move,e.onTouchMove,l),t.removeEventListener(i.end,e.onTouchEnd,!1);else{if(o.touch){var c=!("onTouchStart"!==i.start||!o.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};a.removeEventListener(i.start,e.onTouchStart,c),a.removeEventListener(i.move,e.onTouchMove,l),a.removeEventListener(i.end,e.onTouchEnd,c),i.cancel&&a.removeEventListener(i.cancel,e.onTouchEnd,c)}(n.simulateTouch&&!s.ios&&!s.android||n.simulateTouch&&!o.touch&&s.ios)&&(a.removeEventListener("mousedown",e.onTouchStart,!1),t.removeEventListener("mousemove",e.onTouchMove,l),t.removeEventListener("mouseup",e.onTouchEnd,!1))}(n.preventClicks||n.preventClicksPropagation)&&a.removeEventListener("click",e.onClick,!0),n.cssMode&&r.removeEventListener("scroll",e.onScroll),e.off(s.ios||s.android?"resize orientationchange observerUpdate":"resize observerUpdate",M)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,n=e.initialized,i=e.loopedSlides,a=void 0===i?0:i,r=e.params,s=e.$el,o=r.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o);if(l&&e.currentBreakpoint!==l){var c=l in o?o[l]:void 0;c&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(function(e){var t=c[e];void 0!==t&&(c[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")});var d=c||e.originalParams,u=1<r.slidesPerColumn,p=1<d.slidesPerColumn;u&&!p?(s.removeClass(r.containerModifierClass+"multirow "+r.containerModifierClass+"multirow-column"),e.emitContainerClasses()):!u&&p&&(s.addClass(r.containerModifierClass+"multirow"),"column"===d.slidesPerColumnFill&&s.addClass(r.containerModifierClass+"multirow-column"),e.emitContainerClasses());var f=d.direction&&d.direction!==r.direction,h=r.loop&&(d.slidesPerView!==r.slidesPerView||f);f&&n&&e.changeDirection(),ue(e.params,d),ue(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",d),h&&n&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-a+e.loopedSlides,0,!1)),e.emit("breakpoint",d)}}},getBreakpoint:function(e){var n=de();if(e){var t=!1,i=Object.keys(e).map(function(e){if("string"!=typeof e||0!==e.indexOf("@"))return{value:e,point:e};var t=parseFloat(e.substr(1));return{value:n.innerHeight*t,point:e}});i.sort(function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)});for(var a=0;a<i.length;a+=1){var r=i[a],s=r.point;r.value<=n.innerWidth&&(t=s)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,n=e.isLocked,i=0<e.slides.length&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&i?e.isLocked=i<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,n!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),n&&n!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,n=this.params,e=this.rtl,i=this.$el,a=this.device,r=this.support,s=[];s.push("initialized"),s.push(n.direction),r.pointerEvents&&!r.touch&&s.push("pointer-events"),n.freeMode&&s.push("free-mode"),n.autoHeight&&s.push("autoheight"),e&&s.push("rtl"),1<n.slidesPerColumn&&(s.push("multirow"),"column"===n.slidesPerColumnFill&&s.push("multirow-column")),a.android&&s.push("android"),a.ios&&s.push("ios"),n.cssMode&&s.push("css-mode"),s.forEach(function(e){t.push(n.containerModifierClass+e)}),i.addClass(t.join(" ")),this.emitContainerClasses()},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" ")),this.emitContainerClasses()}},images:{loadImage:function(e,t,n,i,a,r){var s,o=de();function l(){r&&r()}!(z(e).parent("picture")[0]||e.complete&&a)&&t?((s=new o.Image).onload=l,s.onerror=l,i&&(s.sizes=i),n&&(s.srcset=n),t&&(s.src=t)):l()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var n=0;n<e.imagesToLoad.length;n+=1){var i=e.imagesToLoad[n];e.loadImage(i,i.currentSrc||i.getAttribute("src"),i.srcset||i.getAttribute("srcset"),i.sizes||i.getAttribute("sizes"),!0,t)}}}},j={},q=((D=F.prototype).emitContainerClasses=function(){var t=this;if(t.params._emitClasses&&t.el){var e=t.el.className.split(" ").filter(function(e){return 0===e.indexOf("swiper-container")||0===e.indexOf(t.params.containerModifierClass)});t.emit("_containerClasses",e.join(" "))}},D.getSlideClasses=function(e){var t=this;return e.className.split(" ").filter(function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)}).join(" ")},D.emitSlidesClasses=function(){var n=this;if(n.params._emitClasses&&n.el){var i=[];n.slides.each(function(e){var t=n.getSlideClasses(e);i.push({slideEl:e,classNames:t}),n.emit("_slideClass",e,t)}),n.emit("_slideClasses",i)}},D.slidesPerViewDynamic=function(){var e=this.params,t=this.slides,n=this.slidesGrid,i=this.size,a=this.activeIndex,r=1;if(e.centeredSlides){for(var s,o=t[a].swiperSlideSize,l=a+1;l<t.length;l+=1)t[l]&&!s&&(r+=1,(o+=t[l].swiperSlideSize)>i&&(s=!0));for(var c=a-1;0<=c;--c)t[c]&&!s&&(r+=1,(o+=t[c].swiperSlideSize)>i&&(s=!0))}else for(var d=a+1;d<t.length;d+=1)n[d]-n[a]<i&&(r+=1);return r},D.update=function(){var n=this;if(n&&!n.destroyed){var e=n.snapGrid,t=n.params;t.breakpoints&&n.setBreakpoint(),n.updateSize(),n.updateSlides(),n.updateProgress(),n.updateSlidesClasses(),n.params.freeMode?(i(),n.params.autoHeight&&n.updateAutoHeight()):(("auto"===n.params.slidesPerView||1<n.params.slidesPerView)&&n.isEnd&&!n.params.centeredSlides?n.slideTo(n.slides.length-1,0,!1,!0):n.slideTo(n.activeIndex,0,!1,!0))||i(),t.watchOverflow&&e!==n.snapGrid&&n.checkOverflow(),n.emit("update")}function i(){var e=n.rtlTranslate?-1*n.translate:n.translate,t=Math.min(Math.max(e,n.maxTranslate()),n.minTranslate());n.setTranslate(t),n.updateActiveIndex(),n.updateSlidesClasses()}},D.changeDirection=function(t,e){void 0===e&&(e=!0);var n=this,i=n.params.direction;return(t=t||("horizontal"===i?"vertical":"horizontal"))===i||"horizontal"!==t&&"vertical"!==t||(n.$el.removeClass(""+n.params.containerModifierClass+i).addClass(""+n.params.containerModifierClass+t),n.emitContainerClasses(),n.params.direction=t,n.slides.each(function(e){"vertical"===t?e.style.width="":e.style.height=""}),n.emit("changeDirection"),e&&n.update()),n},D.mount=function(e){if(this.mounted)return!0;var t,n=z(e||this.params.el);return!!(e=n[0])&&(e.swiper=this,e&&e.shadowRoot&&e.shadowRoot.querySelector?(t=z(e.shadowRoot.querySelector("."+this.params.wrapperClass))).children=function(e){return n.children(e)}:t=n.children("."+this.params.wrapperClass),ue(this,{$el:n,el:e,$wrapperEl:t,wrapperEl:t[0],mounted:!0,rtl:"rtl"===e.dir.toLowerCase()||"rtl"===n.css("direction"),rtlTranslate:"horizontal"===this.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===n.css("direction")),wrongRTL:"-webkit-box"===t.css("display")}),!0)},D.init=function(e){var t=this;return t.initialized||!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit),t.attachEvents(),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t},D.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var n,i=this,a=i.params,r=i.$el,s=i.$wrapperEl,o=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),a.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttr("style"),s.removeAttr("style"),o&&o.length&&o.removeClass([a.slideVisibleClass,a.slideActiveClass,a.slideNextClass,a.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,n=i,Object.keys(n).forEach(function(e){try{n[e]=null}catch(e){}try{delete n[e]}catch(e){}})),i.destroyed=!0),null},F.extendDefaults=function(e){ue(j,e)},F.installModule=function(e){F.prototype.modules||(F.prototype.modules={});var t=e.name||Object.keys(F.prototype.modules).length+"_"+O();F.prototype.modules[t]=e},F.use=function(e){return Array.isArray(e)?e.forEach(function(e){return F.installModule(e)}):F.installModule(e),F},e(F,[{key:"extendedDefaults",get:function(){return j}},{key:"defaults",get:function(){return N}}]),F);function F(){for(var e,a,t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];if(a=ue({},a=(a=1===n.length&&n[0].constructor&&n[0].constructor===Object?n[0]:(e=n[0],n[1]))||{}),e&&!a.el&&(a.el=e),a.el&&1<z(a.el).length){var r=[];return z(a.el).each(function(e){var t=ue({},a,{el:e});r.push(new F(t))}),r}var s,o,l,c,d,u,p,f,h,m,v,g,y,b,x,w,T,C=this;C.support=$(),C.device=(void 0===(l={userAgent:a.userAgent})&&(l={}),k||(c=(void 0===l?{}:l).userAgent,d=$(),u=de(),p=u.navigator.platform,f=c||u.navigator.userAgent,h={ios:!1,android:!1},m=u.screen.width,v=u.screen.height,g=f.match(/(Android);?[\s\/]+([\d.]+)?/),y=f.match(/(iPad).*OS\s([\d_]+)/),b=f.match(/(iPod)(.*OS\s([\d_]+))?/),x=!y&&f.match(/(iPhone\sOS|iOS)\s([\d_]+)/),w="Win32"===p,T="MacIntel"===p,!y&&T&&d.touch&&0<=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(m+"x"+v)&&((y=f.match(/(Version)\/([\d.]+)/))||(y=[0,1,"13_0_0"]),T=!1),g&&!w&&(h.os="android",h.android=!0),(y||x||b)&&(h.os="ios",h.ios=!0),k=h),k),C.browser=(P||(o=de(),P={isEdge:!!o.navigator.userAgent.match(/Edge/g),isSafari:0<=(s=o.navigator.userAgent.toLowerCase()).indexOf("safari")&&s.indexOf("chrome")<0&&s.indexOf("android")<0,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(o.navigator.userAgent)}),P),C.eventsListeners={},C.eventsAnyListeners=[],void 0===C.modules&&(C.modules={}),Object.keys(C.modules).forEach(function(e){var t=C.modules[e];if(t.params){var n=Object.keys(t.params)[0],i=t.params[n];if("object"!=typeof i||null===i)return;if(!(n in a&&"enabled"in i))return;!0===a[n]&&(a[n]={enabled:!0}),"object"!=typeof a[n]||"enabled"in a[n]||(a[n].enabled=!0),a[n]||(a[n]={enabled:!1})}});var S,E,M=ue({},N);return C.useParams(M),C.params=ue({},M,j,a),C.originalParams=ue({},C.params),C.passedParams=ue({},a),C.params&&C.params.on&&Object.keys(C.params.on).forEach(function(e){C.on(e,C.params.on[e])}),C.params&&C.params.onAny&&C.onAny(C.params.onAny),C.$=z,ue(C,{el:e,classNames:[],slides:z(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===C.params.direction},isVertical:function(){return"vertical"===C.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:C.params.allowSlideNext,allowSlidePrev:C.params.allowSlidePrev,touchEvents:(S=["touchstart","touchmove","touchend","touchcancel"],E=["mousedown","mousemove","mouseup"],C.support.pointerEvents&&(E=["pointerdown","pointermove","pointerup"]),C.touchEventsTouch={start:S[0],move:S[1],end:S[2],cancel:S[3]},C.touchEventsDesktop={start:E[0],move:E[1],end:E[2]},C.support.touch||!C.params.simulateTouch?C.touchEventsTouch:C.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:O(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:C.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),C.useModules(),C.emit("_swiper"),C.params.init&&C.init(),C}Object.keys(H).forEach(function(t){Object.keys(H[t]).forEach(function(e){q.prototype[e]=H[t][e]})}),q.use([C,E]);var R={update:function(e){var t=this,n=t.params,i=n.slidesPerView,a=n.slidesPerGroup,r=n.centeredSlides,s=t.params.virtual,o=s.addSlidesBefore,l=s.addSlidesAfter,c=t.virtual,d=c.from,u=c.to,p=c.slides,f=c.slidesGrid,h=c.renderSlide,m=c.offset;t.updateActiveIndex();var v,g,y,b=t.activeIndex||0;v=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",y=r?(g=Math.floor(i/2)+a+l,Math.floor(i/2)+a+o):(g=i+(a-1)+l,a+o);var x=Math.max((b||0)-y,0),w=Math.min((b||0)+g,p.length-1),T=(t.slidesGrid[x]||0)-(t.slidesGrid[0]||0);function C(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(ue(t.virtual,{from:x,to:w,offset:T,slidesGrid:t.slidesGrid}),d===x&&u===w&&!e)return t.slidesGrid!==f&&T!==m&&t.slides.css(v,T+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:T,from:x,to:w,slides:function(){for(var e=[],t=x;t<=w;t+=1)e.push(p[t]);return e}()}),void(t.params.virtual.renderExternalUpdate&&C());var S=[],E=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var M=d;M<=u;M+=1)(M<x||w<M)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+M+'"]').remove();for(var k=0;k<p.length;k+=1)x<=k&&k<=w&&(void 0===u||e?E.push(k):(u<k&&E.push(k),k<d&&S.push(k)));E.forEach(function(e){t.$wrapperEl.append(h(p[e],e))}),S.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(h(p[e],e))}),t.$wrapperEl.children(".swiper-slide").css(v,T+"px"),C()},renderSlide:function(e,t){var n=this.params.virtual;if(n.cache&&this.virtual.cache[t])return this.virtual.cache[t];var i=n.renderSlide?z(n.renderSlide.call(this,e,t)):z('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return i.attr("data-swiper-slide-index")||i.attr("data-swiper-slide-index",t),n.cache&&(this.virtual.cache[t]=i),i},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var t=this.activeIndex,n=t+1,i=1;if(Array.isArray(e)){for(var a=0;a<e.length;a+=1)e[a]&&this.virtual.slides.unshift(e[a]);n=t+e.length,i=e.length}else this.virtual.slides.unshift(e);if(this.params.virtual.cache){var r=this.virtual.cache,s={};Object.keys(r).forEach(function(e){var t=r[e],n=t.attr("data-swiper-slide-index");n&&t.attr("data-swiper-slide-index",parseInt(n,10)+1),s[parseInt(e,10)+i]=t}),this.virtual.cache=s}this.virtual.update(!0),this.slideTo(n,0)},removeSlide:function(e){if(null!=e){var t=this.activeIndex;if(Array.isArray(e))for(var n=e.length-1;0<=n;--n)this.virtual.slides.splice(e[n],1),this.params.virtual.cache&&delete this.virtual.cache[e[n]],e[n]<t&&--t,t=Math.max(t,0);else this.virtual.slides.splice(e,1),this.params.virtual.cache&&delete this.virtual.cache[e],e<t&&--t,t=Math.max(t,0);this.virtual.update(!0),this.slideTo(t,0)}},removeAllSlides:function(){this.virtual.slides=[],this.params.virtual.cache&&(this.virtual.cache={}),this.virtual.update(!0),this.slideTo(0,0)}},B={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){T(this,{virtual:t({},R,{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(e){if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};ue(e.params,t),ue(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(e){e.params.virtual.enabled&&e.virtual.update()}}},X={handle:function(e){var t=this,n=de(),i=w(),a=t.rtlTranslate,r=e;r.originalEvent&&(r=r.originalEvent);var s=r.keyCode||r.charCode,o=t.params.keyboard.pageUpDown,l=o&&33===s,c=o&&34===s,d=37===s,u=39===s,p=38===s,f=40===s;if(!t.allowSlideNext&&(t.isHorizontal()&&u||t.isVertical()&&f||c))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&d||t.isVertical()&&p||l))return!1;if(!(r.shiftKey||r.altKey||r.ctrlKey||r.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(l||c||d||u||p||f)){var h=!1;if(0<t.$el.parents("."+t.params.slideClass).length&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var m=n.innerWidth,v=n.innerHeight,g=t.$el.offset();a&&(g.left-=t.$el[0].scrollLeft);for(var y=[[g.left,g.top],[g.left+t.width,g.top],[g.left,g.top+t.height],[g.left+t.width,g.top+t.height]],b=0;b<y.length;b+=1){var x=y[b];if(0<=x[0]&&x[0]<=m&&0<=x[1]&&x[1]<=v){if(0===x[0]&&0===x[1])continue;h=!0}}if(!h)return}t.isHorizontal()?((l||c||d||u)&&(r.preventDefault?r.preventDefault():r.returnValue=!1),((c||u)&&!a||(l||d)&&a)&&t.slideNext(),((l||d)&&!a||(c||u)&&a)&&t.slidePrev()):((l||c||p||f)&&(r.preventDefault?r.preventDefault():r.returnValue=!1),(c||f)&&t.slideNext(),(l||p)&&t.slidePrev()),t.emit("keyPress",s)}},enable:function(){var e=w();this.keyboard.enabled||(z(e).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){var e=w();this.keyboard.enabled&&(z(e).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},W={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){T(this,{keyboard:t({enabled:!1},X)})},on:{init:function(e){e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(e){e.keyboard.enabled&&e.keyboard.disable()}}},Y={lastScrollTime:O(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return-1<de().navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":function(){var e=w(),t="onwheel"in e;if(!t){var n=e.createElement("div");n.setAttribute("onwheel","return;"),t="function"==typeof n.onwheel}return!t&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature("","")&&(t=e.implementation.hasFeature("Events.wheel","3.0")),t}()?"wheel":"mousewheel"},normalize:function(e){var t=0,n=0,i=0,a=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),i=10*t,a=10*n,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(i=e.deltaX),e.shiftKey&&!i&&(i=a,a=0),(i||a)&&e.deltaMode&&(1===e.deltaMode?(i*=40,a*=40):(i*=800,a*=800)),i&&!t&&(t=i<1?-1:1),a&&!n&&(n=a<1?-1:1),{spinX:t,spinY:n,pixelX:i,pixelY:a}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,n=this,i=n.params.mousewheel;n.params.cssMode&&t.preventDefault();var a=n.$el;if("container"!==n.params.mousewheel.eventsTarget&&(a=z(n.params.mousewheel.eventsTarget)),!n.mouseEntered&&!a[0].contains(t.target)&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var r=0,s=n.rtlTranslate?-1:1,o=Y.normalize(t);if(i.forceToAxis)if(n.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;r=-o.pixelX*s}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;r=-o.pixelY}else r=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*s:-o.pixelY;if(0===r)return!0;i.invert&&(r=-r);var l=n.getTranslate()+r*i.sensitivity;if(l>=n.minTranslate()&&(l=n.minTranslate()),l<=n.maxTranslate()&&(l=n.maxTranslate()),(n.params.loop||l!==n.minTranslate()&&l!==n.maxTranslate())&&n.params.nested&&t.stopPropagation(),n.params.freeMode){var c={time:O(),delta:Math.abs(r),direction:Math.sign(r)},d=n.mousewheel.lastEventBeforeSnap,u=d&&c.time<d.time+500&&c.delta<=d.delta&&c.direction===d.direction;if(!u){n.mousewheel.lastEventBeforeSnap=void 0,n.params.loop&&n.loopFix();var p=n.getTranslate()+r*i.sensitivity,f=n.isBeginning,h=n.isEnd;if(p>=n.minTranslate()&&(p=n.minTranslate()),p<=n.maxTranslate()&&(p=n.maxTranslate()),n.setTransition(0),n.setTranslate(p),n.updateProgress(),n.updateActiveIndex(),n.updateSlidesClasses(),(!f&&n.isBeginning||!h&&n.isEnd)&&n.updateSlidesClasses(),n.params.freeModeSticky){clearTimeout(n.mousewheel.timeout),n.mousewheel.timeout=void 0;var m=n.mousewheel.recentWheelEvents;15<=m.length&&m.shift();var v=m.length?m[m.length-1]:void 0,g=m[0];if(m.push(c),v&&(c.delta>v.delta||c.direction!==v.direction))m.splice(0);else if(15<=m.length&&c.time-g.time<500&&1<=g.delta-c.delta&&c.delta<=6){var y=0<r?.8:.2;n.mousewheel.lastEventBeforeSnap=c,m.splice(0),n.mousewheel.timeout=I(function(){n.slideToClosest(n.params.speed,!0,void 0,y)},0)}n.mousewheel.timeout||(n.mousewheel.timeout=I(function(){n.mousewheel.lastEventBeforeSnap=c,m.splice(0),n.slideToClosest(n.params.speed,!0,void 0,.5)},500))}if(u||n.emit("scroll",t),n.params.autoplay&&n.params.autoplayDisableOnInteraction&&n.autoplay.stop(),p===n.minTranslate()||p===n.maxTranslate())return!0}}else{var b={time:O(),delta:Math.abs(r),direction:Math.sign(r),raw:e},x=n.mousewheel.recentWheelEvents;2<=x.length&&x.shift();var w=x.length?x[x.length-1]:void 0;if(x.push(b),(!w||b.direction!==w.direction||b.delta>w.delta||b.time>w.time+150)&&n.mousewheel.animateSlider(b),n.mousewheel.releaseScroll(b))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){var t=this,n=de();return!(this.params.mousewheel.thresholdDelta&&e.delta<this.params.mousewheel.thresholdDelta||this.params.mousewheel.thresholdTime&&O()-t.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime||!(6<=e.delta&&O()-t.mousewheel.lastScrollTime<60)&&(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new n.Date).getTime(),1))},releaseScroll:function(e){var t=this.params.mousewheel;if(e.direction<0){if(this.isEnd&&!this.params.loop&&t.releaseOnEdges)return!0}else if(this.isBeginning&&!this.params.loop&&t.releaseOnEdges)return!0;return!1},enable:function(){var e=this,t=Y.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;var n=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(n=z(e.params.mousewheel.eventsTarget)),n.on("mouseenter",e.mousewheel.handleMouseEnter),n.on("mouseleave",e.mousewheel.handleMouseLeave),n.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0},disable:function(){var e=Y.event();if(this.params.cssMode)return this.wrapperEl.addEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(!this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarget&&(t=z(this.params.mousewheel.eventsTarget)),t.off(e,this.mousewheel.handle),!(this.mousewheel.enabled=!1)}},_={update:function(){var e=this.params.navigation;if(!this.params.loop){var t=this.navigation,n=t.$nextEl,i=t.$prevEl;i&&0<i.length&&(this.isBeginning?i.addClass(e.disabledClass):i.removeClass(e.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass)),n&&0<n.length&&(this.isEnd?n.addClass(e.disabledClass):n.removeClass(e.disabledClass),n[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass))}},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,n=this,i=n.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=z(i.nextEl),n.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<e.length&&1===n.$el.find(i.nextEl).length&&(e=n.$el.find(i.nextEl))),i.prevEl&&(t=z(i.prevEl),n.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<t.length&&1===n.$el.find(i.prevEl).length&&(t=n.$el.find(i.prevEl))),e&&0<e.length&&e.on("click",n.navigation.onNextClick),t&&0<t.length&&t.on("click",n.navigation.onPrevClick),ue(n.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this.navigation,t=e.$nextEl,n=e.$prevEl;t&&t.length&&(t.off("click",this.navigation.onNextClick),t.removeClass(this.params.navigation.disabledClass)),n&&n.length&&(n.off("click",this.navigation.onPrevClick),n.removeClass(this.params.navigation.disabledClass))}},G={update:function(){var e=this,t=e.rtl,i=e.params.pagination;if(i.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a,n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el,s=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((a=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>n-1-2*e.loopedSlides&&(a-=n-2*e.loopedSlides),s-1<a&&(a-=s),a<0&&"bullets"!==e.params.paginationType&&(a=s+a)):a=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&0<e.pagination.bullets.length){var o,l,c,d=e.pagination.bullets;if(i.dynamicBullets&&(e.pagination.bulletSize=d.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),r.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),1<i.dynamicMainBullets&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=a-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=a-e.pagination.dynamicBulletIndex,c=((l=o+(Math.min(d.length,i.dynamicMainBullets)-1))+o)/2),d.removeClass(i.bulletActiveClass+" "+i.bulletActiveClass+"-next "+i.bulletActiveClass+"-next-next "+i.bulletActiveClass+"-prev "+i.bulletActiveClass+"-prev-prev "+i.bulletActiveClass+"-main"),1<r.length)d.each(function(e){var t=z(e),n=t.index();n===a&&t.addClass(i.bulletActiveClass),i.dynamicBullets&&(o<=n&&n<=l&&t.addClass(i.bulletActiveClass+"-main"),n===o&&t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),n===l&&t.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))});else{var u=d.eq(a),p=u.index();if(u.addClass(i.bulletActiveClass),i.dynamicBullets){for(var f=d.eq(o),h=d.eq(l),m=o;m<=l;m+=1)d.eq(m).addClass(i.bulletActiveClass+"-main");if(e.params.loop)if(p>=d.length-i.dynamicMainBullets){for(var v=i.dynamicMainBullets;0<=v;--v)d.eq(d.length-v).addClass(i.bulletActiveClass+"-main");d.eq(d.length-i.dynamicMainBullets-1).addClass(i.bulletActiveClass+"-prev")}else f.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),h.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next");else f.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),h.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}}if(i.dynamicBullets){var g=Math.min(d.length,i.dynamicMainBullets+4),y=(e.pagination.bulletSize*g-e.pagination.bulletSize)/2-c*e.pagination.bulletSize,b=t?"right":"left";d.css(e.isHorizontal()?b:"top",y+"px")}}if("fraction"===i.type&&(r.find("."+i.currentClass).text(i.formatFractionCurrent(a+1)),r.find("."+i.totalClass).text(i.formatFractionTotal(s))),"progressbar"===i.type){var x;x=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var w=(a+1)/s,T=1,C=1;"horizontal"==x?T=w:C=w,r.find("."+i.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+T+") scaleY("+C+")").transition(e.params.speed)}"custom"===i.type&&i.renderCustom?(r.html(i.renderCustom(e,a+1,s)),e.emit("paginationRender",r[0])):e.emit("paginationUpdate",r[0]),r[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](i.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,a="";if("bullets"===t.type){var r=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&!e.params.loop&&n<r&&(r=n);for(var s=0;s<r;s+=1)t.renderBullet?a+=t.renderBullet.call(e,s,t.bulletClass):a+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";i.html(a),e.pagination.bullets=i.find("."+t.bulletClass.replace(/ /g,"."))}"fraction"===t.type&&(a=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',i.html(a)),"progressbar"===t.type&&(a=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',i.html(a)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var n=this,e=n.params.pagination;if(e.el){var t=z(e.el);0!==t.length&&(n.params.uniqueNavElements&&"string"==typeof e.el&&1<t.length&&(t=n.$el.find(e.el)),"bullets"===e.type&&e.clickable&&t.addClass(e.clickableClass),t.addClass(e.modifierClass+e.type),"bullets"===e.type&&e.dynamicBullets&&(t.addClass(""+e.modifierClass+e.type+"-dynamic"),n.pagination.dynamicBulletIndex=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&t.addClass(e.progressbarOppositeClass),e.clickable&&t.on("click","."+e.bulletClass.replace(/ /g,"."),function(e){e.preventDefault();var t=z(this).index()*n.params.slidesPerGroup;n.params.loop&&(t+=n.loopedSlides),n.slideTo(t)}),ue(n.pagination,{$el:t,el:t[0]}))}},destroy:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass.replace(/ /g,"."))}}},V={setTranslate:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var e=this.scrollbar,t=this.rtlTranslate,n=this.progress,i=e.dragSize,a=e.trackSize,r=e.$dragEl,s=e.$el,o=this.params.scrollbar,l=i,c=(a-i)*n;t?0<(c=-c)?(l=i-c,c=0):a<-c+i&&(l=a+c):c<0?(l=i+c,c=0):a<c+i&&(l=a-c),this.isHorizontal()?(r.transform("translate3d("+c+"px, 0, 0)"),r[0].style.width=l+"px"):(r.transform("translate3d(0px, "+c+"px, 0)"),r[0].style.height=l+"px"),o.hide&&(clearTimeout(this.scrollbar.timeout),s[0].style.opacity=1,this.scrollbar.timeout=setTimeout(function(){s[0].style.opacity=0,s.transition(400)},1e3))}},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,n=t.$dragEl,i=t.$el;n[0].style.width="",n[0].style.height="";var a,r=e.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,s=e.size/e.virtualSize,o=s*(r/e.size);a="auto"===e.params.scrollbar.dragSize?r*s:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?n[0].style.width=a+"px":n[0].style.height=a+"px",i[0].style.display=1<=s?"none":"",e.params.scrollbar.hide&&(i[0].style.opacity=0),ue(t,{trackSize:r,divider:s,moveDivider:o,dragSize:a}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,n=this,i=n.scrollbar,a=n.rtlTranslate,r=i.$el,s=i.dragSize,o=i.trackSize,l=i.dragStartPos;t=(i.getPointerPosition(e)-r.offset()[n.isHorizontal()?"left":"top"]-(null!==l?l:s/2))/(o-s),t=Math.max(Math.min(t,1),0),a&&(t=1-t);var c=n.minTranslate()+(n.maxTranslate()-n.minTranslate())*t;n.updateProgress(c),n.setTranslate(c),n.updateActiveIndex(),n.updateSlidesClasses()},onDragStart:function(e){var t=this,n=t.params.scrollbar,i=t.scrollbar,a=t.$wrapperEl,r=i.$el,s=i.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===s[0]||e.target===s?i.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),a.transition(100),s.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),r.transition(0),n.hide&&r.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,n=this.$wrapperEl,i=t.$el,a=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),n.transition(0),i.transition(0),a.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,n=t.params.scrollbar,i=t.scrollbar,a=t.$wrapperEl,r=i.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),a.transition("")),n.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=I(function(){r.css("opacity",0),r.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),n.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=w(),n=e.scrollbar,i=e.touchEventsTouch,a=e.touchEventsDesktop,r=e.params,s=e.support,o=n.$el[0],l=!(!s.passiveListener||!r.passiveListeners)&&{passive:!1,capture:!1},c=!(!s.passiveListener||!r.passiveListeners)&&{passive:!0,capture:!1};o&&(s.touch?(o.addEventListener(i.start,e.scrollbar.onDragStart,l),o.addEventListener(i.move,e.scrollbar.onDragMove,l),o.addEventListener(i.end,e.scrollbar.onDragEnd,c)):(o.addEventListener(a.start,e.scrollbar.onDragStart,l),t.addEventListener(a.move,e.scrollbar.onDragMove,l),t.addEventListener(a.end,e.scrollbar.onDragEnd,c)))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=w(),n=e.scrollbar,i=e.touchEventsTouch,a=e.touchEventsDesktop,r=e.params,s=e.support,o=n.$el[0],l=!(!s.passiveListener||!r.passiveListeners)&&{passive:!1,capture:!1},c=!(!s.passiveListener||!r.passiveListeners)&&{passive:!0,capture:!1};o&&(s.touch?(o.removeEventListener(i.start,e.scrollbar.onDragStart,l),o.removeEventListener(i.move,e.scrollbar.onDragMove,l),o.removeEventListener(i.end,e.scrollbar.onDragEnd,c)):(o.removeEventListener(a.start,e.scrollbar.onDragStart,l),t.removeEventListener(a.move,e.scrollbar.onDragMove,l),t.removeEventListener(a.end,e.scrollbar.onDragEnd,c)))}},init:function(){if(this.params.scrollbar.el){var e=this.scrollbar,t=this.$el,n=this.params.scrollbar,i=z(n.el);this.params.uniqueNavElements&&"string"==typeof n.el&&1<i.length&&1===t.find(n.el).length&&(i=t.find(n.el));var a=i.find("."+this.params.scrollbar.dragClass);0===a.length&&(a=z('<div class="'+this.params.scrollbar.dragClass+'"></div>'),i.append(a)),ue(e,{$el:i,el:i[0],$dragEl:a,dragEl:a[0]}),n.draggable&&e.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},U={setTransform:function(e,t){var n=this.rtl,i=z(e),a=n?-1:1,r=i.attr("data-swiper-parallax")||"0",s=i.attr("data-swiper-parallax-x"),o=i.attr("data-swiper-parallax-y"),l=i.attr("data-swiper-parallax-scale"),c=i.attr("data-swiper-parallax-opacity");if(s||o?(s=s||"0",o=o||"0"):this.isHorizontal()?(s=r,o="0"):(o=r,s="0"),s=0<=s.indexOf("%")?parseInt(s,10)*t*a+"%":s*t*a+"px",o=0<=o.indexOf("%")?parseInt(o,10)*t+"%":o*t+"px",null!=c){var d=c-(c-1)*(1-Math.abs(t));i[0].style.opacity=d}if(null==l)i.transform("translate3d("+s+", "+o+", 0px)");else{var u=l-(l-1)*(1-Math.abs(t));i.transform("translate3d("+s+", "+o+", 0px) scale("+u+")")}},setTranslate:function(){var i=this,e=i.$el,t=i.slides,a=i.progress,r=i.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e){i.parallax.setTransform(e,a)}),t.each(function(e,t){var n=e.progress;1<i.params.slidesPerGroup&&"auto"!==i.params.slidesPerView&&(n+=Math.ceil(t/2)-a*(r.length-1)),n=Math.min(Math.max(n,-1),1),z(e).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e){i.parallax.setTransform(e,n)})})},setTransition:function(i){void 0===i&&(i=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e){var t=z(e),n=parseInt(t.attr("data-swiper-parallax-duration"),10)||i;0===i&&(n=0),t.transition(n)})}},K={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(a-n,2))},onGestureStart:function(e){var t=this.support,n=this.params.zoom,i=this.zoom,a=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!t.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,a.scaleStart=K.getDistanceBetweenTouches(e)}a.$slideEl&&a.$slideEl.length||(a.$slideEl=z(e.target).closest("."+this.params.slideClass),0===a.$slideEl.length&&(a.$slideEl=this.slides.eq(this.activeIndex)),a.$imageEl=a.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),a.$imageWrapEl=a.$imageEl.parent("."+n.containerClass),a.maxRatio=a.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,0!==a.$imageWrapEl.length)?(a.$imageEl&&a.$imageEl.transition(0),this.zoom.isScaling=!0):a.$imageEl=void 0},onGestureChange:function(e){var t=this.support,n=this.params.zoom,i=this.zoom,a=i.gesture;if(!t.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,a.scaleMove=K.getDistanceBetweenTouches(e)}a.$imageEl&&0!==a.$imageEl.length?(t.gestures?i.scale=e.scale*i.currentScale:i.scale=a.scaleMove/a.scaleStart*i.currentScale,i.scale>a.maxRatio&&(i.scale=a.maxRatio-1+Math.pow(i.scale-a.maxRatio+1,.5)),i.scale<n.minRatio&&(i.scale=n.minRatio+1-Math.pow(n.minRatio-i.scale+1,.5)),a.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")")):"gesturechange"===e.type&&i.onGestureStart(e)},onGestureEnd:function(e){var t=this.device,n=this.support,i=this.params.zoom,a=this.zoom,r=a.gesture;if(!n.gestures){if(!a.fakeGestureTouched||!a.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!t.android)return;a.fakeGestureTouched=!1,a.fakeGestureMoved=!1}r.$imageEl&&0!==r.$imageEl.length&&(a.scale=Math.max(Math.min(a.scale,r.maxRatio),i.minRatio),r.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+a.scale+")"),a.currentScale=a.scale,a.isScaling=!1,1===a.scale&&(r.$slideEl=void 0))},onTouchStart:function(e){var t=this.device,n=this.zoom,i=n.gesture,a=n.image;i.$imageEl&&0!==i.$imageEl.length&&(a.isTouched||(t.android&&e.cancelable&&e.preventDefault(),a.isTouched=!0,a.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,a.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this.zoom,n=t.gesture,i=t.image,a=t.velocity;if(n.$imageEl&&0!==n.$imageEl.length&&(this.allowClick=!1,i.isTouched&&n.$slideEl)){i.isMoved||(i.width=n.$imageEl[0].offsetWidth,i.height=n.$imageEl[0].offsetHeight,i.startX=b(n.$imageWrapEl[0],"x")||0,i.startY=b(n.$imageWrapEl[0],"y")||0,n.slideWidth=n.$slideEl[0].offsetWidth,n.slideHeight=n.$slideEl[0].offsetHeight,n.$imageWrapEl.transition(0),this.rtl&&(i.startX=-i.startX,i.startY=-i.startY));var r=i.width*t.scale,s=i.height*t.scale;if(!(r<n.slideWidth&&s<n.slideHeight)){if(i.minX=Math.min(n.slideWidth/2-r/2,0),i.maxX=-i.minX,i.minY=Math.min(n.slideHeight/2-s/2,0),i.maxY=-i.minY,i.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,i.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!i.isMoved&&!t.isScaling){if(this.isHorizontal()&&(Math.floor(i.minX)===Math.floor(i.startX)&&i.touchesCurrent.x<i.touchesStart.x||Math.floor(i.maxX)===Math.floor(i.startX)&&i.touchesCurrent.x>i.touchesStart.x))return void(i.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(i.minY)===Math.floor(i.startY)&&i.touchesCurrent.y<i.touchesStart.y||Math.floor(i.maxY)===Math.floor(i.startY)&&i.touchesCurrent.y>i.touchesStart.y))return void(i.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),i.isMoved=!0,i.currentX=i.touchesCurrent.x-i.touchesStart.x+i.startX,i.currentY=i.touchesCurrent.y-i.touchesStart.y+i.startY,i.currentX<i.minX&&(i.currentX=i.minX+1-Math.pow(i.minX-i.currentX+1,.8)),i.currentX>i.maxX&&(i.currentX=i.maxX-1+Math.pow(i.currentX-i.maxX+1,.8)),i.currentY<i.minY&&(i.currentY=i.minY+1-Math.pow(i.minY-i.currentY+1,.8)),i.currentY>i.maxY&&(i.currentY=i.maxY-1+Math.pow(i.currentY-i.maxY+1,.8)),a.prevPositionX||(a.prevPositionX=i.touchesCurrent.x),a.prevPositionY||(a.prevPositionY=i.touchesCurrent.y),a.prevTime||(a.prevTime=Date.now()),a.x=(i.touchesCurrent.x-a.prevPositionX)/(Date.now()-a.prevTime)/2,a.y=(i.touchesCurrent.y-a.prevPositionY)/(Date.now()-a.prevTime)/2,Math.abs(i.touchesCurrent.x-a.prevPositionX)<2&&(a.x=0),Math.abs(i.touchesCurrent.y-a.prevPositionY)<2&&(a.y=0),a.prevPositionX=i.touchesCurrent.x,a.prevPositionY=i.touchesCurrent.y,a.prevTime=Date.now(),n.$imageWrapEl.transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,n=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!n.isTouched||!n.isMoved)return n.isTouched=!1,void(n.isMoved=!1);n.isTouched=!1,n.isMoved=!1;var a=300,r=300,s=i.x*a,o=n.currentX+s,l=i.y*r,c=n.currentY+l;0!==i.x&&(a=Math.abs((o-n.currentX)/i.x)),0!==i.y&&(r=Math.abs((c-n.currentY)/i.y));var d=Math.max(a,r);n.currentX=o,n.currentY=c;var u=n.width*e.scale,p=n.height*e.scale;n.minX=Math.min(t.slideWidth/2-u/2,0),n.maxX=-n.minX,n.minY=Math.min(t.slideHeight/2-p/2,0),n.maxY=-n.minY,n.currentX=Math.max(Math.min(n.currentX,n.maxX),n.minX),n.currentY=Math.max(Math.min(n.currentY,n.maxY),n.minY),t.$imageWrapEl.transition(d).transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,n,i,a,r,s,o,l,c,d,u,p,f,h,m,v,g=de(),y=this.zoom,b=this.params.zoom,x=y.gesture,w=y.image;x.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?x.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):x.$slideEl=this.slides.eq(this.activeIndex),x.$imageEl=x.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),x.$imageWrapEl=x.$imageEl.parent("."+b.containerClass)),x.$imageEl&&0!==x.$imageEl.length&&(x.$slideEl.addClass(""+b.zoomedSlideClass),n=void 0===w.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=w.touchesStart.x,w.touchesStart.y),y.scale=x.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,y.currentScale=x.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,e?(m=x.$slideEl[0].offsetWidth,v=x.$slideEl[0].offsetHeight,i=x.$slideEl.offset().left+g.scrollX+m/2-t,a=x.$slideEl.offset().top+g.scrollY+v/2-n,o=x.$imageEl[0].offsetWidth,l=x.$imageEl[0].offsetHeight,c=o*y.scale,d=l*y.scale,f=-(u=Math.min(m/2-c/2,0)),h=-(p=Math.min(v/2-d/2,0)),(r=i*y.scale)<u&&(r=u),f<r&&(r=f),(s=a*y.scale)<p&&(s=p),h<s&&(s=h)):s=r=0,x.$imageWrapEl.transition(300).transform("translate3d("+r+"px, "+s+"px,0)"),x.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+y.scale+")"))},out:function(){var e=this.zoom,t=this.params.zoom,n=e.gesture;n.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?n.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):n.$slideEl=this.slides.eq(this.activeIndex),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+t.containerClass)),n.$imageEl&&0!==n.$imageEl.length&&(e.scale=1,e.currentScale=1,n.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),n.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),n.$slideEl.removeClass(""+t.zoomedSlideClass),n.$slideEl=void 0)},toggleGestures:function(e){var t=this.zoom,n=t.slideSelector,i=t.passiveListener;this.$wrapperEl[e]("gesturestart",n,t.onGestureStart,i),this.$wrapperEl[e]("gesturechange",n,t.onGestureChange,i),this.$wrapperEl[e]("gestureend",n,t.onGestureEnd,i)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures("on"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures("off"))},enable:function(){var e=this,t=e.support,n=e.zoom;if(!n.enabled){n.enabled=!0;var i=!("touchstart"!==e.touchEvents.start||!t.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},a=!t.passiveListener||{passive:!1,capture:!0},r="."+e.params.slideClass;e.zoom.passiveListener=i,e.zoom.slideSelector=r,t.gestures?(e.$wrapperEl.on(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.on(e.touchEvents.end,e.zoom.disableGestures,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,r,n.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,r,n.onGestureChange,a),e.$wrapperEl.on(e.touchEvents.end,r,n.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,r,n.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,n.onTouchMove,a)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){var n=e.support;e.zoom.enabled=!1;var i=!("touchstart"!==e.touchEvents.start||!n.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},a=!n.passiveListener||{passive:!1,capture:!0},r="."+e.params.slideClass;n.gestures?(e.$wrapperEl.off(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.off(e.touchEvents.end,e.zoom.disableGestures,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,r,t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,r,t.onGestureChange,a),e.$wrapperEl.off(e.touchEvents.end,r,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,r,t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,a)}}},Q={loadInSlide:function(e,c){void 0===c&&(c=!0);var d=this,u=d.params.lazy;if(void 0!==e&&0!==d.slides.length){var p=d.virtual&&d.params.virtual.enabled?d.$wrapperEl.children("."+d.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):d.slides.eq(e),t=p.find("."+u.elementClass+":not(."+u.loadedClass+"):not(."+u.loadingClass+")");!p.hasClass(u.elementClass)||p.hasClass(u.loadedClass)||p.hasClass(u.loadingClass)||t.push(p[0]),0!==t.length&&t.each(function(e){var i=z(e);i.addClass(u.loadingClass);var a=i.attr("data-background"),r=i.attr("data-src"),s=i.attr("data-srcset"),o=i.attr("data-sizes"),l=i.parent("picture");d.loadImage(i[0],r||a,s,o,!1,function(){if(null!=d&&d&&(!d||d.params)&&!d.destroyed){if(a?(i.css("background-image",'url("'+a+'")'),i.removeAttr("data-background")):(s&&(i.attr("srcset",s),i.removeAttr("data-srcset")),o&&(i.attr("sizes",o),i.removeAttr("data-sizes")),l.length&&l.children("source").each(function(e){var t=z(e);t.attr("data-srcset")&&(t.attr("srcset",t.attr("data-srcset")),t.removeAttr("data-srcset"))}),r&&(i.attr("src",r),i.removeAttr("data-src"))),i.addClass(u.loadedClass).removeClass(u.loadingClass),p.find("."+u.preloaderClass).remove(),d.params.loop&&c){var e=p.attr("data-swiper-slide-index");if(p.hasClass(d.params.slideDuplicateClass)){var t=d.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+d.params.slideDuplicateClass+")");d.lazy.loadInSlide(t.index(),!1)}else{var n=d.$wrapperEl.children("."+d.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');d.lazy.loadInSlide(n.index(),!1)}}d.emit("lazyImageReady",p[0],i[0]),d.params.autoHeight&&d.updateAutoHeight()}}),d.emit("lazyImageLoad",p[0],i[0])})}},load:function(){var n=this,t=n.$wrapperEl,i=n.params,a=n.slides,e=n.activeIndex,r=n.virtual&&i.virtual.enabled,s=i.lazy,o=i.slidesPerView;function l(e){if(r){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(a[e])return 1}function c(e){return r?z(e).attr("data-swiper-slide-index"):z(e).index()}if("auto"===o&&(o=0),n.lazy.initialImageLoaded||(n.lazy.initialImageLoaded=!0),n.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(e){var t=r?z(e).attr("data-swiper-slide-index"):z(e).index();n.lazy.loadInSlide(t)});else if(1<o)for(var d=e;d<e+o;d+=1)l(d)&&n.lazy.loadInSlide(d);else n.lazy.loadInSlide(e);if(s.loadPrevNext)if(1<o||s.loadPrevNextAmount&&1<s.loadPrevNextAmount){for(var u=s.loadPrevNextAmount,p=o,f=Math.min(e+p+Math.max(u,p),a.length),h=Math.max(e-Math.max(p,u),0),m=e+o;m<f;m+=1)l(m)&&n.lazy.loadInSlide(m);for(var v=h;v<e;v+=1)l(v)&&n.lazy.loadInSlide(v)}else{var g=t.children("."+i.slideNextClass);0<g.length&&n.lazy.loadInSlide(c(g));var y=t.children("."+i.slidePrevClass);0<y.length&&n.lazy.loadInSlide(c(y))}},checkInViewOnLoad:function(){var e=de(),t=this;if(t&&!t.destroyed){var n=t.params.lazy.scrollingElement?z(t.params.lazy.scrollingElement):z(e),i=n[0]===e,a=i?e.innerWidth:n[0].offsetWidth,r=i?e.innerHeight:n[0].offsetHeight,s=t.$el.offset(),o=!1;t.rtlTranslate&&(s.left-=t.$el[0].scrollLeft);for(var l=[[s.left,s.top],[s.left+t.width,s.top],[s.left,s.top+t.height],[s.left+t.width,s.top+t.height]],c=0;c<l.length;c+=1){var d=l[c];if(0<=d[0]&&d[0]<=a&&0<=d[1]&&d[1]<=r){if(0===d[0]&&0===d[1])continue;o=!0}}o?(t.lazy.load(),n.off("scroll",t.lazy.checkInViewOnLoad)):t.lazy.scrollHandlerAttached||(t.lazy.scrollHandlerAttached=!0,n.on("scroll",t.lazy.checkInViewOnLoad))}}},Z={LinearSpline:function(e,t){var n,i,a,r,s;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(s=function(e,t){for(i=-1,n=e.length;1<n-i;)e[a=n+i>>1]<=t?i=a:n=a;return n}(this.x,e),r=s-1,(e-this.x[r])*(this.y[s]-this.y[r])/(this.x[s]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){this.controller.spline||(this.controller.spline=this.params.loop?new Z.LinearSpline(this.slidesGrid,e.slidesGrid):new Z.LinearSpline(this.snapGrid,e.snapGrid))},setTranslate:function(e,t){var n,i,a=this,r=a.controller.control,s=a.constructor;function o(e){var t=a.rtlTranslate?-a.translate:a.translate;"slide"===a.params.controller.by&&(a.controller.getInterpolateFunction(e),i=-a.controller.spline.interpolate(-t)),i&&"container"!==a.params.controller.by||(n=(e.maxTranslate()-e.minTranslate())/(a.maxTranslate()-a.minTranslate()),i=(t-a.minTranslate())*n+e.minTranslate()),a.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,a),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var l=0;l<r.length;l+=1)r[l]!==t&&r[l]instanceof s&&o(r[l]);else r instanceof s&&t!==r&&o(r)},setTransition:function(t,e){var n,i=this,a=i.constructor,r=i.controller.control;function s(e){e.setTransition(t,i),0!==t&&(e.transitionStart(),e.params.autoHeight&&I(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){r&&(e.params.loop&&"slide"===i.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(r))for(n=0;n<r.length;n+=1)r[n]!==e&&r[n]instanceof a&&s(r[n]);else r instanceof a&&e!==r&&s(r)}},J={getRandomNumber:function(e){return void 0===e&&(e=16),"x".repeat(e).replace(/x/g,function(){return Math.round(16*Math.random()).toString(16)})},makeElFocusable:function(e){return e.attr("tabIndex","0"),e},makeElNotFocusable:function(e){return e.attr("tabIndex","-1"),e},addElRole:function(e,t){return e.attr("role",t),e},addElRoleDescription:function(e,t){return e.attr("aria-role-description",t),e},addElControls:function(e,t){return e.attr("aria-controls",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},addElId:function(e,t){return e.attr("id",t),e},addElLive:function(e,t){return e.attr("aria-live",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this,n=t.params.a11y;if(13===e.keyCode){var i=z(e.target);t.navigation&&t.navigation.$nextEl&&i.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(n.lastSlideMessage):t.a11y.notify(n.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&i.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(n.firstSlideMessage):t.a11y.notify(n.prevSlideMessage)),t.pagination&&i.is("."+t.params.pagination.bulletClass.replace(/ /g,"."))&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop&&e.navigation){var t=e.navigation,n=t.$nextEl,i=t.$prevEl;i&&0<i.length&&(e.isBeginning?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i))),n&&0<n.length&&(e.isEnd?(e.a11y.disableEl(n),e.a11y.makeElNotFocusable(n)):(e.a11y.enableEl(n),e.a11y.makeElFocusable(n)))}},updatePagination:function(){var n=this,i=n.params.a11y;n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.bullets.each(function(e){var t=z(e);n.a11y.makeElFocusable(t),n.params.pagination.renderBullet||(n.a11y.addElRole(t,"button"),n.a11y.addElLabel(t,i.paginationBulletMessage.replace(/\{\{index\}\}/,t.index()+1)))})},init:function(){var n=this,e=n.params.a11y;n.$el.append(n.a11y.liveRegion);var t=n.$el;e.containerRoleDescriptionMessage&&n.a11y.addElRoleDescription(t,e.containerRoleDescriptionMessage),e.containerMessage&&n.a11y.addElLabel(t,e.containerMessage);var i,a,r,s=n.$wrapperEl,o=s.attr("id")||"swiper-wrapper-"+n.a11y.getRandomNumber(16);n.a11y.addElId(s,o),i=n.params.autoplay&&n.params.autoplay.enabled?"off":"polite",n.a11y.addElLive(s,i),e.itemRoleDescriptionMessage&&n.a11y.addElRoleDescription(z(n.slides),e.itemRoleDescriptionMessage),n.a11y.addElRole(z(n.slides),"group"),n.slides.each(function(e){var t=z(e);n.a11y.addElLabel(t,t.index()+1+" / "+n.slides.length)}),n.navigation&&n.navigation.$nextEl&&(a=n.navigation.$nextEl),n.navigation&&n.navigation.$prevEl&&(r=n.navigation.$prevEl),a&&a.length&&(n.a11y.makeElFocusable(a),"BUTTON"!==a[0].tagName&&(n.a11y.addElRole(a,"button"),a.on("keydown",n.a11y.onEnterKey)),n.a11y.addElLabel(a,e.nextSlideMessage),n.a11y.addElControls(a,o)),r&&r.length&&(n.a11y.makeElFocusable(r),"BUTTON"!==r[0].tagName&&(n.a11y.addElRole(r,"button"),r.on("keydown",n.a11y.onEnterKey)),n.a11y.addElLabel(r,e.prevSlideMessage),n.a11y.addElControls(r,o)),n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.$el.on("keydown","."+n.params.pagination.bulletClass.replace(/ /g,"."),n.a11y.onEnterKey)},destroy:function(){var e,t,n=this;n.a11y.liveRegion&&0<n.a11y.liveRegion.length&&n.a11y.liveRegion.remove(),n.navigation&&n.navigation.$nextEl&&(e=n.navigation.$nextEl),n.navigation&&n.navigation.$prevEl&&(t=n.navigation.$prevEl),e&&e.off("keydown",n.a11y.onEnterKey),t&&t.off("keydown",n.a11y.onEnterKey),n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.$el.off("keydown","."+n.params.pagination.bulletClass.replace(/ /g,"."),n.a11y.onEnterKey)}},ee={init:function(){var e=de();if(this.params.history){if(!e.history||!e.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var t=this.history;t.initialized=!0,t.paths=ee.getPathValues(this.params.url),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||e.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){var e=de();this.params.history.replaceState||e.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=ee.getPathValues(this.params.url),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(e){var t=de(),n=(e?new URL(e):t.location).pathname.slice(1).split("/").filter(function(e){return""!==e}),i=n.length;return{key:n[i-2],value:n[i-1]}},setHistory:function(e,t){var n=de();if(this.history.initialized&&this.params.history.enabled){var i;i=this.params.url?new URL(this.params.url):n.location;var a=this.slides.eq(t),r=ee.slugify(a.attr("data-history"));i.pathname.includes(e)||(r=e+"/"+r);var s=n.history.state;s&&s.value===r||(this.params.history.replaceState?n.history.replaceState({value:r},null,r):n.history.pushState({value:r},null,r))}},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){if(t)for(var i=0,a=this.slides.length;i<a;i+=1){var r=this.slides.eq(i);if(ee.slugify(r.attr("data-history"))===t&&!r.hasClass(this.params.slideDuplicateClass)){var s=r.index();this.slideTo(s,e,n)}}else this.slideTo(0,e,n)}},te={onHashCange:function(){var e=w();this.emit("hashChange");var t=e.location.hash.replace("#","");if(t!==this.slides.eq(this.activeIndex).attr("data-hash")){var n=this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+t+'"]').index();if(void 0===n)return;this.slideTo(n)}},setHash:function(){var e=de(),t=w();if(this.hashNavigation.initialized&&this.params.hashNavigation.enabled)if(this.params.hashNavigation.replaceState&&e.history&&e.history.replaceState)e.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||""),this.emit("hashSet");else{var n=this.slides.eq(this.activeIndex),i=n.attr("data-hash")||n.attr("data-history");t.location.hash=i||"",this.emit("hashSet")}},init:function(){var e=this,t=w(),n=de();if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var i=t.location.hash.replace("#","");if(i)for(var a=0,r=e.slides.length;a<r;a+=1){var s=e.slides.eq(a);if((s.attr("data-hash")||s.attr("data-history"))===i&&!s.hasClass(e.params.slideDuplicateClass)){var o=s.index();e.slideTo(o,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&z(n).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){var e=de();this.params.hashNavigation.watchState&&z(e).off("hashchange",this.hashNavigation.onHashCange)}},ne={run:function(){var t=this,e=t.slides.eq(t.activeIndex),n=t.params.autoplay.delay;e.attr("data-swiper-autoplay")&&(n=e.attr("data-swiper-autoplay")||t.params.autoplay.delay),clearTimeout(t.autoplay.timeout),t.autoplay.timeout=I(function(){var e;t.params.autoplay.reverseDirection?t.params.loop?(t.loopFix(),e=t.slidePrev(t.params.speed,!0,!0),t.emit("autoplay")):t.isBeginning?t.params.autoplay.stopOnLastSlide?t.autoplay.stop():(e=t.slideTo(t.slides.length-1,t.params.speed,!0,!0),t.emit("autoplay")):(e=t.slidePrev(t.params.speed,!0,!0),t.emit("autoplay")):t.params.loop?(t.loopFix(),e=t.slideNext(t.params.speed,!0,!0),t.emit("autoplay")):t.isEnd?t.params.autoplay.stopOnLastSlide?t.autoplay.stop():(e=t.slideTo(0,t.params.speed,!0,!0),t.emit("autoplay")):(e=t.slideNext(t.params.speed,!0,!0),t.emit("autoplay")),(t.params.cssMode&&t.autoplay.running||!1===e)&&t.autoplay.run()},n)},start:function(){return void 0===this.autoplay.timeout&&!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0)},stop:function(){return!!this.autoplay.running&&void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0)},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))},onVisibilityChange:function(){var e=w();"hidden"===e.visibilityState&&this.autoplay.running&&this.autoplay.pause(),"visible"===e.visibilityState&&this.autoplay.paused&&(this.autoplay.run(),this.autoplay.paused=!1)},onTransitionEnd:function(e){var t=this;t&&!t.destroyed&&t.$wrapperEl&&e.target===t.$wrapperEl[0]&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}},ie={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var n=this.slides.eq(t),i=-n[0].swiperSlideOffset;this.params.virtualTranslate||(i-=this.translate);var a=0;this.isHorizontal()||(a=i,i=0);var r=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(n[0].progress),0):1+Math.min(Math.max(n[0].progress,-1),0);n.css({opacity:r}).transform("translate3d("+i+"px, "+a+"px, 0px)")}},setTransition:function(e){var n=this,t=n.slides,i=n.$wrapperEl;if(t.transition(e),n.params.virtualTranslate&&0!==e){var a=!1;t.transitionEnd(function(){if(!a&&n&&!n.destroyed){a=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)i.trigger(e[t])}})}}},ae={setTranslate:function(){var e,t=this,n=t.$el,i=t.$wrapperEl,a=t.slides,r=t.width,s=t.height,o=t.rtlTranslate,l=t.size,c=t.browser,d=t.params.cubeEffect,u=t.isHorizontal(),p=t.virtual&&t.params.virtual.enabled,f=0;d.shadow&&(u?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=z('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:r+"px"})):0===(e=n.find(".swiper-cube-shadow")).length&&(e=z('<div class="swiper-cube-shadow"></div>'),n.append(e)));for(var h=0;h<a.length;h+=1){var m=a.eq(h),v=h;p&&(v=parseInt(m.attr("data-swiper-slide-index"),10));var g=90*v,y=Math.floor(g/360);o&&(g=-g,y=Math.floor(-g/360));var b=Math.max(Math.min(m[0].progress,1),-1),x=0,w=0,T=0;v%4==0?(x=4*-y*l,T=0):(v-1)%4==0?(x=0,T=4*-y*l):(v-2)%4==0?(x=l+4*y*l,T=l):(v-3)%4==0&&(x=-l,T=3*l+4*l*y),o&&(x=-x),u||(w=x,x=0);var C="rotateX("+(u?0:-g)+"deg) rotateY("+(u?g:0)+"deg) translate3d("+x+"px, "+w+"px, "+T+"px)";if(b<=1&&-1<b&&(f=90*v+90*b,o&&(f=90*-v-90*b)),m.transform(C),d.slideShadows){var S=u?m.find(".swiper-slide-shadow-left"):m.find(".swiper-slide-shadow-top"),E=u?m.find(".swiper-slide-shadow-right"):m.find(".swiper-slide-shadow-bottom");0===S.length&&(S=z('<div class="swiper-slide-shadow-'+(u?"left":"top")+'"></div>'),m.append(S)),0===E.length&&(E=z('<div class="swiper-slide-shadow-'+(u?"right":"bottom")+'"></div>'),m.append(E)),S.length&&(S[0].style.opacity=Math.max(-b,0)),E.length&&(E[0].style.opacity=Math.max(b,0))}}if(i.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow)if(u)e.transform("translate3d(0px, "+(r/2+d.shadowOffset)+"px, "+-r/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")");else{var M=Math.abs(f)-90*Math.floor(Math.abs(f)/90),k=1.5-(Math.sin(2*M*Math.PI/360)/2+Math.cos(2*M*Math.PI/360)/2),P=d.shadowScale,$=d.shadowScale/k,L=d.shadowOffset;e.transform("scale3d("+P+", 1, "+$+") translate3d(0px, "+(s/2+L)+"px, "+-s/2/$+"px) rotateX(-90deg)")}var A=c.isSafari||c.isWebView?-l/2:0;i.transform("translate3d(0px,0,"+A+"px) rotateX("+(t.isHorizontal()?0:f)+"deg) rotateY("+(t.isHorizontal()?-f:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},re={setTranslate:function(){for(var e=this.slides,t=this.rtlTranslate,n=0;n<e.length;n+=1){var i=e.eq(n),a=i[0].progress;this.params.flipEffect.limitRotation&&(a=Math.max(Math.min(i[0].progress,1),-1));var r=-180*a,s=0,o=-i[0].swiperSlideOffset,l=0;if(this.isHorizontal()?t&&(r=-r):(l=o,s=-r,r=o=0),i[0].style.zIndex=-Math.abs(Math.round(a))+e.length,this.params.flipEffect.slideShadows){var c=this.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),d=this.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom");0===c.length&&(c=z('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),i.append(c)),0===d.length&&(d=z('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),i.append(d)),c.length&&(c[0].style.opacity=Math.max(-a,0)),d.length&&(d[0].style.opacity=Math.max(a,0))}i.transform("translate3d("+o+"px, "+l+"px, 0px) rotateX("+s+"deg) rotateY("+r+"deg)")}},setTransition:function(e){var n=this,t=n.slides,i=n.activeIndex,a=n.$wrapperEl;if(t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),n.params.virtualTranslate&&0!==e){var r=!1;t.eq(i).transitionEnd(function(){if(!r&&n&&!n.destroyed){r=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)a.trigger(e[t])}})}}},se={setTranslate:function(){for(var e=this.width,t=this.height,n=this.slides,i=this.slidesSizesGrid,a=this.params.coverflowEffect,r=this.isHorizontal(),s=this.translate,o=r?e/2-s:t/2-s,l=r?a.rotate:-a.rotate,c=a.depth,d=0,u=n.length;d<u;d+=1){var p=n.eq(d),f=i[d],h=(o-p[0].swiperSlideOffset-f/2)/f*a.modifier,m=r?l*h:0,v=r?0:l*h,g=-c*Math.abs(h),y=a.stretch;"string"==typeof y&&-1!==y.indexOf("%")&&(y=parseFloat(a.stretch)/100*f);var b=r?0:y*h,x=r?y*h:0,w=1-(1-a.scale)*Math.abs(h);Math.abs(x)<.001&&(x=0),Math.abs(b)<.001&&(b=0),Math.abs(g)<.001&&(g=0),Math.abs(m)<.001&&(m=0),Math.abs(v)<.001&&(v=0),Math.abs(w)<.001&&(w=0);var T="translate3d("+x+"px,"+b+"px,"+g+"px)  rotateX("+v+"deg) rotateY("+m+"deg) scale("+w+")";if(p.transform(T),p[0].style.zIndex=1-Math.abs(Math.round(h)),a.slideShadows){var C=r?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),S=r?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom");0===C.length&&(C=z('<div class="swiper-slide-shadow-'+(r?"left":"top")+'"></div>'),p.append(C)),0===S.length&&(S=z('<div class="swiper-slide-shadow-'+(r?"right":"bottom")+'"></div>'),p.append(S)),C.length&&(C[0].style.opacity=0<h?h:0),S.length&&(S[0].style.opacity=0<-h?-h:0)}}},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},oe={init:function(){var e=this,t=e.params.thumbs;if(e.thumbs.initialized)return!1;e.thumbs.initialized=!0;var n=e.constructor;return t.swiper instanceof n?(e.thumbs.swiper=t.swiper,ue(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),ue(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):x(t.swiper)&&(e.thumbs.swiper=new n(ue({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick),!0},onThumbClick:function(){var e=this,t=e.thumbs.swiper;if(t){var n=t.clickedIndex,i=t.clickedSlide;if(!(i&&z(i).hasClass(e.params.thumbs.slideThumbActiveClass)||null==n)){var a;if(a=t.params.loop?parseInt(z(t.clickedSlide).attr("data-swiper-slide-index"),10):n,e.params.loop){var r=e.activeIndex;e.slides.eq(r).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,r=e.activeIndex);var s=e.slides.eq(r).prevAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),o=e.slides.eq(r).nextAll('[data-swiper-slide-index="'+a+'"]').eq(0).index();a=void 0===s||void 0!==o&&o-r<r-s?o:s}e.slideTo(a)}}},update:function(e){var t=this,n=t.thumbs.swiper;if(n){var i="auto"===n.params.slidesPerView?n.slidesPerViewDynamic():n.params.slidesPerView,a=t.params.thumbs.autoScrollOffset,r=a&&!n.params.loop;if(t.realIndex!==n.realIndex||r){var s,o,l=n.activeIndex;if(n.params.loop){n.slides.eq(l).hasClass(n.params.slideDuplicateClass)&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,l=n.activeIndex);var c=n.slides.eq(l).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),d=n.slides.eq(l).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index();s=void 0===c?d:void 0===d?c:d-l==l-c?l:d-l<l-c?d:c,o=t.activeIndex>t.previousIndex?"next":"prev"}else o=(s=t.realIndex)>t.previousIndex?"next":"prev";r&&(s+="next"===o?a:-1*a),n.visibleSlidesIndexes&&n.visibleSlidesIndexes.indexOf(s)<0&&(n.params.centeredSlides?s=l<s?s-Math.floor(i/2)+1:s+Math.floor(i/2)-1:l<s&&(s=s-i+1),n.slideTo(s,e?0:void 0))}var u=1,p=t.params.thumbs.slideThumbActiveClass;if(1<t.params.slidesPerView&&!t.params.centeredSlides&&(u=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(u=1),u=Math.floor(u),n.slides.removeClass(p),n.params.loop||n.params.virtual&&n.params.virtual.enabled)for(var f=0;f<u;f+=1)n.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+f)+'"]').addClass(p);else for(var h=0;h<u;h+=1)n.slides.eq(t.realIndex+h).addClass(p)}}},le=[B,W,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}},create:function(){T(this,{mousewheel:{enabled:!1,lastScrollTime:O(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:Y.enable,disable:Y.disable,handle:Y.handle,handleMouseEnter:Y.handleMouseEnter,handleMouseLeave:Y.handleMouseLeave,animateSlider:Y.animateSlider,releaseScroll:Y.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){T(this,{navigation:t({},_)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var n,i=e.navigation,a=i.$nextEl,r=i.$prevEl;!e.params.navigation.hideOnClick||z(t.target).is(r)||z(t.target).is(a)||(a?n=a.hasClass(e.params.navigation.hiddenClass):r&&(n=r.hasClass(e.params.navigation.hiddenClass)),!0===n?e.emit("navigationShow"):e.emit("navigationHide"),a&&a.toggleClass(e.params.navigation.hiddenClass),r&&r.toggleClass(e.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){T(this,{pagination:t({dynamicBulletIndex:0},G)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){!e.params.loop&&void 0!==e.snapIndex||e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){e.params.pagination.el&&e.params.pagination.hideOnClick&&0<e.pagination.$el.length&&!z(t.target).hasClass(e.params.pagination.bulletClass)&&(!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){T(this,{scrollbar:t({isTouched:!1,timeout:null,dragTimeout:null},V)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},destroy:function(e){e.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){T(this,{parallax:t({},U)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var i=this;T(i,{zoom:t({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},K)});var a=1;Object.defineProperty(i.zoom,"scale",{get:function(){return a},set:function(e){if(a!==e){var t=i.zoom.gesture.$imageEl?i.zoom.gesture.$imageEl[0]:void 0,n=i.zoom.gesture.$slideEl?i.zoom.gesture.$slideEl[0]:void 0;i.emit("zoomChange",e,t,n)}a=e}})},on:{init:function(e){e.params.zoom.enabled&&e.zoom.enable()},destroy:function(e){e.zoom.disable()},touchStart:function(e,t){e.zoom.enabled&&e.zoom.onTouchStart(t)},touchEnd:function(e,t){e.zoom.enabled&&e.zoom.onTouchEnd(t)},doubleTap:function(e,t){e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&e.zoom.toggle(t)},transitionEnd:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:"",elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){T(this,{lazy:t({initialImageLoaded:!1},Q)})},on:{beforeInit:function(e){e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(e){e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&(e.params.lazy.checkInView?e.lazy.checkInViewOnLoad():e.lazy.load())},scroll:function(e){e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize:function(e){e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove:function(e){e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(e){e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(e){e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange:function(e){e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){T(this,{controller:t({control:this.params.controller.control},Z)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,n){e.controller.control&&e.controller.setTranslate(t,n)},setTransition:function(e,t,n){e.controller.control&&e.controller.setTransition(t,n)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null}},create:function(){T(this,{a11y:t({},J,{liveRegion:z('<span class="'+this.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')})})},on:{afterInit:function(e){e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(e){e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(e){e.params.a11y.enabled&&e.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){T(this,{history:t({},ee)})},on:{init:function(e){e.params.history.enabled&&e.history.init()},destroy:function(e){e.params.history.enabled&&e.history.destroy()},transitionEnd:function(e){e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange:function(e){e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){T(this,{hashNavigation:t({initialized:!1},te)})},on:{init:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(e){e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange:function(e){e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){T(this,{autoplay:t({},ne,{running:!1,paused:!1})})},on:{init:function(e){e.params.autoplay.enabled&&(e.autoplay.start(),w().addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t,n){e.autoplay.running&&(n||!e.params.autoplay.disableOnInteraction?e.autoplay.pause(t):e.autoplay.stop())},sliderFirstMove:function(e){e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd:function(e){e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy:function(e){e.autoplay.running&&e.autoplay.stop(),w().removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){T(this,{fadeEffect:t({},ie)})},on:{beforeInit:function(e){if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};ue(e.params,t),ue(e.originalParams,t)}},setTranslate:function(e){"fade"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){"fade"===e.params.effect&&e.fadeEffect.setTransition(t)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){T(this,{cubeEffect:t({},ae)})},on:{beforeInit:function(e){if("cube"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};ue(e.params,t),ue(e.originalParams,t)}},setTranslate:function(e){"cube"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e,t){"cube"===e.params.effect&&e.cubeEffect.setTransition(t)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){T(this,{flipEffect:t({},re)})},on:{beforeInit:function(e){if("flip"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};ue(e.params,t),ue(e.originalParams,t)}},setTranslate:function(e){"flip"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e,t){"flip"===e.params.effect&&e.flipEffect.setTransition(t)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){T(this,{coverflowEffect:t({},se)})},on:{beforeInit:function(e){"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(e){"coverflow"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e,t){"coverflow"===e.params.effect&&e.coverflowEffect.setTransition(t)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){T(this,{thumbs:t({swiper:null,initialized:!1},oe)})},on:{beforeInit:function(e){var t=e.params.thumbs;t&&t.swiper&&(e.thumbs.init(),e.thumbs.update(!0))},slideChange:function(e){e.thumbs.swiper&&e.thumbs.update()},update:function(e){e.thumbs.swiper&&e.thumbs.update()},resize:function(e){e.thumbs.swiper&&e.thumbs.update()},observerUpdate:function(e){e.thumbs.swiper&&e.thumbs.update()},setTransition:function(e,t){var n=e.thumbs.swiper;n&&n.setTransition(t)},beforeDestroy:function(e){var t=e.thumbs.swiper;t&&e.thumbs.swiperCreated&&t&&t.destroy()}}}];return q.use(le),q});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
